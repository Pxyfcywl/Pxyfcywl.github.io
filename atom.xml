<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>浮云世事改, 过月此心明</title>
  
  <subtitle>披星戴月走过的路, 最终将会繁花满地。记住, 一个人, 便是千军万马</subtitle>
  <link href="https://pxyfcywl.github.io/atom.xml" rel="self"/>
  
  <link href="https://pxyfcywl.github.io/"/>
  <updated>2023-01-22T02:41:57.233Z</updated>
  <id>https://pxyfcywl.github.io/</id>
  
  <author>
    <name>彼岸花开</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>指针</title>
    <link href="https://pxyfcywl.github.io/posts/aaaaaaav.html"/>
    <id>https://pxyfcywl.github.io/posts/aaaaaaav.html</id>
    <published>2023-01-22T02:03:15.000Z</published>
    <updated>2023-01-22T02:41:57.233Z</updated>
    
    <content type="html"><![CDATA[<h1 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h1><p><strong>前言：祝大家新年快乐哦！</strong>ヽ(✿ﾟ▽ﾟ)ノ</p><h2 id="题目来源"><a href="#题目来源" class="headerlink" title="题目来源"></a>题目来源</h2><p>今天的这道题来自于<code>acwing</code>的一道周赛题，链接如下：</p><p><a href="https://www.acwing.com/problem/content/4501/">4498. 指针 - AcWing题库</a></p><p>下面给出该题的题面</p><h3 id="原题题面"><a href="#原题题面" class="headerlink" title="原题题面"></a>原题题面</h3><p>给定一个如下图所示的全圆量角器。</p><p>初始时，量角器上的指针指向刻度 0。</p><p>现在，请你对指针进行 <code>n</code> 次拨动操作，每次操作给定一个拨动角度 <code>ai</code>，由你将指针拨动 <code>ai</code> 度，每次的拨动方向（顺时针或逆时针）由你自由决定。</p><p>请你判断，能否通过合理选择每次拨动的方向，使得指针最终仍然指向刻度 0</p><p><strong>输入格式</strong></p><p>第一行包含整数 <code>n</code></p><p>接下来 <code>n</code> 行，每行包含一个整数 <code>ai</code>，表示一次操作的拨动角度。</p><p><strong>输出格式</strong></p><p>如果可以做到指针最终仍然指向刻度 0，则输出 <code>YES</code>，否则输出 <code>NO</code>。</p><p><strong>数据范围</strong><br>所有测试点满足 1 ≤ <code>n</code> ≤ 15，1 ≤ <code>ai</code> ≤ 180</p><p><strong>输入样例1：</strong></p><pre class="line-numbers language-none"><code class="language-none">3102030</code></pre><p><strong>输出样例1：</strong></p><pre class="line-numbers language-none"><code class="language-none">YES</code></pre><p><strong>输入样例2：</strong></p><pre class="line-numbers language-none"><code class="language-none">3101010</code></pre><p><strong>输出样例2：</strong></p><pre class="line-numbers language-none"><code class="language-none">NO</code></pre><p><strong>输入样例3：</strong></p><pre class="line-numbers language-none"><code class="language-none">3120120120</code></pre><p><strong>输出样例3：</strong></p><pre class="line-numbers language-none"><code class="language-none">YES</code></pre><h3 id="题目解释"><a href="#题目解释" class="headerlink" title="题目解释"></a>题目解释</h3><p><strong>优化思路</strong></p><p>通过一系列的分析，我们可以大致得到一个思路，就是我们要灵活的计算出一个有效的方式，使得我们尽可能地使得我们的指针可以走回到0度或者说360度，不过吧，其实这道题和背包问题的一般思路是一样的，都分为取和不取，在背包问题里面，取和不取来分析在目前体积下可以达到的最大价值，而这道题就有些不同了，这道题是分为正向和反向，正向就当成取，反向就当成不取，因此我们可以同背包一样开一个二维数组，然后对于每一个方向都进行分析</p><p><strong>首先，我们按照题目要求进行输入输出</strong></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;#include&lt;algorithm&gt;using namespace std;const int N &#x3D; 1010;int f[N][361], v[N];int main()&#123;    int n;    cin &gt;&gt; n;    for(int i &#x3D; 1;i &lt;&#x3D; n;i++) cin &gt;&gt; v[i];&#125;</code></pre><p><strong>其次，我们对于f数组进行一个判断</strong></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F;原点一定是对的，记为1f[0][0] &#x3D; 1;for(int i &#x3D; 1;i &lt;&#x3D; n;i++)    for(int j &#x3D; 0;j &lt;&#x3D; 360;j++)         &#x2F;&#x2F;正向取和反向取，满足一个就为1        f[i][j] &#x3D; f[i - 1][(j + 360 + v[i]) % 360] || f[i - 1][(j + 360 - v[i]) % 360];</code></pre><p><strong>最后，我们按照题目要求输出结果</strong></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F;360取模和0是一样的，所以这两个都可以if(f[n][0] &#x3D;&#x3D; 1 || f[n][360] &#x3D;&#x3D; 1) cout &lt;&lt; &quot;YES&quot; &lt;&lt; endl;&#x2F;&#x2F;反之不行else cout &lt;&lt; &quot;NO&quot; &lt;&lt; endl;return 0;</code></pre><p>如此一来，我们就解决这道题目啦！下面给出<code>ac</code>代码</p><h2 id="ac代码"><a href="#ac代码" class="headerlink" title="ac代码"></a><code>ac</code>代码</h2><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;bits&#x2F;stdc++.h&gt;using namespace std;const int N &#x3D; 1010;int f[N][360], v[N];int main()&#123;    int n;    cin &gt;&gt; n;    for(int i &#x3D; 1;i &lt;&#x3D; n;i++) cin &gt;&gt; v[i];    f[0][0] &#x3D; 1;    for(int i &#x3D; 1;i &lt;&#x3D; n;i++)        for(int j &#x3D; 0;j &lt;&#x3D; 360;j++)            f[i][j] &#x3D; f[i - 1][(j + 360 + v[i]) % 360] || f[i - 1][(j + 360 - v[i]) % 360];    if(f[n][0] &#x3D;&#x3D; 1 || f[n][360] &#x3D;&#x3D; 1) cout &lt;&lt; &quot;YES&quot; &lt;&lt; endl;else cout &lt;&lt; &quot;NO&quot; &lt;&lt; endl;return 0;&#125;</code></pre><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>本来是打算在除夕上午写的，但是由于各种原因，最后在新年的第一天才写，不过指针嘛，指向了一年的第一天，意味着新的一年的到来，祝大家新的一年多多进步，多敲代码，多多<code>ac</code>哦!</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;指针&quot;&gt;&lt;a href=&quot;#指针&quot; class=&quot;headerlink&quot; title=&quot;指针&quot;&gt;&lt;/a&gt;指针&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;前言：祝大家新年快乐哦！&lt;/strong&gt;ヽ(✿ﾟ▽ﾟ)ノ&lt;/p&gt;
&lt;h2 id=&quot;题目来源&quot;&gt;&lt;a href=&quot;#题目来源</summary>
      
    
    
    
    <category term="c++算法" scheme="https://pxyfcywl.github.io/categories/c-%E7%AE%97%E6%B3%95/"/>
    
    <category term="动态规划" scheme="https://pxyfcywl.github.io/categories/c-%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
    
    <category term="动态规划" scheme="https://pxyfcywl.github.io/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>Tokitsukaze and a+b=n</title>
    <link href="https://pxyfcywl.github.io/posts/aaaaaaau.html"/>
    <id>https://pxyfcywl.github.io/posts/aaaaaaau.html</id>
    <published>2023-01-20T02:52:48.000Z</published>
    <updated>2023-01-22T02:42:02.663Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Tokitsukaze-and-a-b-n"><a href="#Tokitsukaze-and-a-b-n" class="headerlink" title="Tokitsukaze and a+b=n"></a><code>Tokitsukaze</code> <code>and</code> <code>a+b=n</code></h1><p><strong>前提提要：</strong></p><p>今天的这道题，是来源于2023牛客寒假算法集训营的第二次练习的<code>problem</code> <code>c</code></p><h2 id="题目来源"><a href="#题目来源" class="headerlink" title="题目来源"></a>题目来源</h2><p><a href="https://ac.nowcoder.com/acm/contest/46810/C">C-Tokitsukaze and a+b=n (hard)_2023牛客寒假算法基础集训营2 (nowcoder.com)</a></p><p><strong>注意，只要报名了的人才可以进入网站</strong></p><h3 id="原题题面"><a href="#原题题面" class="headerlink" title="原题题面"></a>原题题面</h3><p><strong>题目描述</strong>   </p><p><code>Tokitsukaze</code> 有一个整数 <code>n</code>， 以及 <code>m</code> 个区间 <code>[L,R]</code></p><p> 她想知道有多少种选法，满足：从 <code>m</code> 个区间中选择两个区间 <code>[Li​,Ri​]</code>, <code>[Lj​,Rj​]</code> <code>(i≠j)</code>，并从第一个区间选择一个整数 <code>a</code> <code>(Li≤a≤Ri​)</code>，从第二个区间选择一个整数 <code>b</code> <code>(Lj≤b≤R​)</code>，使得 <code>a+b=n</code></p><p> 对于两种选法，若 <code>i</code>, <code>j</code>, <code>a</code>, <code>b</code> 中有任意一个数不同，则算作不同的选法。</p><p> 由于答案可能很大，请输出对 998 244 353 取模后的结果。</p><p><strong>输入描述:</strong></p><p>第一行包含两个整数 <code>n</code>, <code>m</code> (2 ≤<code>n</code>,<code>m</code>≤ 4 * 10^5)。</p><p>接下来 <code>m</code> 行，每行包含两个整数 <code>L</code>, <code>R</code> (1 ≤ <code>L</code> ≤ <code>R</code> ≤ 2 * 10^5)</p><p><strong>输出描述:</strong></p><p>输出一个整数表示答案对 998 244 353取模后的结果</p><p><strong>输入</strong></p><pre class="line-numbers language-none"><code class="language-none">5 31 32 43 5</code></pre><p><strong>输出</strong></p><pre class="line-numbers language-none"><code class="language-none">12</code></pre><h3 id="题目解释"><a href="#题目解释" class="headerlink" title="题目解释"></a>题目解释</h3><p><strong>朴素算法</strong></p><p>经过一系列的分析，我们可以得到这么一个思路，我们可以每两个区间进行遍历，对于两个区间都给予两个不同的指针，一个从小到大，一个从大到小，遇到了加起来满足题意的就向下进行，最后输出所有的满足的答案</p><p>上面的算法是最朴素的解法了，解法上是满足题目要求的，<strong>但是</strong>时间上的复杂度较高，无法通过题目要求，对于这道题的4<em>10^5的循环量，近乎要<strong>O(n)</strong> 或者<strong>O(n log n)</strong> 的<strong>解法才可以跑完</strong>，所以，我们要对第一个思路进行优化，将复杂度优化至<em>*O(n)</em></em></p><p><strong>优化1 数学</strong></p><p>我们对于1 3 和2 4这两个区间，求出这两个区间有多少满足情况的，我们可以将第一个区间上的每一个数都被5给减去，那么第一个区间的范围就变成了2 4，现在，我们就知道了，2到4范围里面的所有数都是满足第一个区间上的数的，然后，我们再计算一下2到4和2 4有多少个数字是相同的，假设变化后的第一个区间是 </p><pre class="line-numbers language-none"><code class="language-none">a[] &#x3D; &#123;2,3,4&#125;;</code></pre><p>原本的第二个区间是</p><pre class="line-numbers language-none"><code class="language-none">b[] &#x3D; &#123;2,3,4&#125;;</code></pre><p>求两个范围里面有多少个重复的数，我们只要拿到两个范围里面的各自的最小值和最大值，</p><pre class="line-numbers language-none"><code class="language-none">a范围 l1 &#x3D; 2, r1 &#x3D; 4b范围 l2 &#x3D; 2, r2 &#x3D; 4</code></pre><p>计算重复数的式子如下：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int sum, l, r;if(r2 &lt; l1 || r1 &lt; l2) sum &#x3D; 0;else &#123;l &#x3D; max(l1, l2);r &#x3D; min(r1, r2);sum &#x3D; r - l + 1;&#125;</code></pre><p>通过这么一个步骤，我们就可以得到两个区间，然后进行简单的数学计算就可以直接得出两个区间中有多少个匹配的了</p><p>但是，这样计算下来，时间复杂度还是太高了，每两个区间进行就<strong>还要O(n^2) 的复杂度</strong>，所以我们还需要继续优化</p><p><strong>优化2 差分</strong></p><p>现在，我们可以这么想，既然我们要求两个区间中是否有重复的数字，那我们对于<code>n</code>个区间，我们可以将<code>n</code>个区间里面所有的数进行相加,看看我们所有数的范围，比如说上面的例子，对于三个区间</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">1 3 和 2 4 和 3 5总区间数字如下数字012345次数012321</code></pre><p>我们可以找到所有数字出现的总次数，然后对于每一个区间进行遍历，找一找每一个区间与总区间的重复数有多少个，进行相加，同时再减去对比的区间里面出现的重复数，就可以得到答案了</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F;差分法补充int f[6];for(int i &#x3D; 1;i &lt;&#x3D; 3;i++) &#123;    int a, b;    cin &gt;&gt; a &gt;&gt; b;    f[a] ++;    f[b + 1]--;&#125;&#x2F;&#x2F;差分数组求和for(int i &#x3D; 1;i &lt;&#x3D; 5;i++) &#123;    f[i] +&#x3D; f[i - 1];&#125;</code></pre><p>这样一来，我们已经预处理了所有的区间和，我们再遍历每一个区间，就只要O(n)的解法就可以写出来了，这样也就优化到了题目所给出的要求啦    (∩_∩)</p><p><strong>下面是差分代码</strong></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;bits&#x2F;stdc++.h&gt;using namespace std;&#x2F;&#x2F;取模数和数组范围const int N &#x3D; 1000010,M &#x3D; 998244353;&#x2F;&#x2F;左数右数差分求和数减去数int l[N], r[N], d[N], f[N];</code></pre><p><strong>main函数</strong></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int n, m, ans &#x3D; 0;cin &gt;&gt; n &gt;&gt; m;for(int i &#x3D; 1;i &lt;&#x3D; m;i++) &#123;    &#x2F;&#x2F;输入    cin &gt;&gt; l[i] &gt;&gt; r[i];    &#x2F;&#x2F;差分    d[l[i]]++; d[r[i] + 1]--;    &#x2F;&#x2F;满足条件1    if(n - l[i] &gt;&#x3D; l[i] &amp;&amp; n - l[i] &lt;&#x3D; r[i])    &#123;        &#x2F;&#x2F;差分        f[l[i]]++;        f[n - l[i] + 1]--;    &#125;    &#x2F;&#x2F;满足条件2    else if(n - r[i] &gt;&#x3D; l[i] &amp;&amp; n - r[i] &lt;&#x3D; r[i])    &#123;        &#x2F;&#x2F;差分        f[n - r[i]]++;        f[r[i] + 1]--;    &#125;&#125;</code></pre><p><strong>差分数组求和</strong></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">for(int i &#x3D; 1;i &lt;&#x3D; n;i++) &#123;    d[i] +&#x3D; d[i - 1];    f[i] +&#x3D; f[i - 1];&#125;</code></pre><p><strong>小tip</strong></p><p>计算所有满足条件的数字，即所有满足数减去重复数取模</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F;取模补充，减少取模的错误率,假如对N取模const int N &#x3D; 10000000;int m &#x3D; 1145141919;m &#x3D; (m + N) % N;int t &#x3D; -114514;t &#x3D; (t + N) % N;</code></pre><p><strong>取模+求和</strong></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">for(int i &#x3D; 1;i &lt; n;i++) &#123;    &#x2F;&#x2F;自身 &#x3D; 自身 + 乘以次数 - 重复数 + 模数    ans &#x3D; (ans + 1ll * d[i] * d[n - i] % M - f[i] + M) % M;&#125;&#x2F;&#x2F;输出所有数字cout &lt;&lt; ans &lt;&lt; endl;return 0;</code></pre><h2 id="ac代码"><a href="#ac代码" class="headerlink" title="ac代码"></a><code>ac</code>代码</h2><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;bits&#x2F;stdc++.h&gt;using namespace std;const int N &#x3D; 1000010,M &#x3D; 998244353;int l[N], r[N]；int d[N], f[N];int main()&#123;    int n, m, ans &#x3D; 0;    cin &gt;&gt; n &gt;&gt; m;    for(int i &#x3D; 1;i &lt;&#x3D; m;i++) &#123;        cin &gt;&gt; l[i] &gt;&gt; r[i];        d[l[i]]++; d[r[i] + 1]--;        if(n - l[i] &gt;&#x3D; l[i] &amp;&amp; n - l[i] &lt;&#x3D; r[i])        &#123;            f[l[i]]++;            f[n - l[i] + 1]--;        &#125;        else if(n - r[i] &gt;&#x3D; l[i] &amp;&amp; n - r[i] &lt;&#x3D; r[i])        &#123;            f[n - r[i]]++;            f[r[i] + 1]--;        &#125;    &#125;    for(int i &#x3D; 1;i &lt;&#x3D; n;i++) &#123;        d[i] +&#x3D; d[i - 1];        f[i] +&#x3D; f[i - 1];    &#125;    for(int i &#x3D; 1;i &lt; n;i++) &#123;        ans &#x3D; (ans + 1ll * d[i] * d[n - i] % M - f[i] + M) % M;    &#125;    cout &lt;&lt; ans &lt;&lt; endl;    return 0;&#125;</code></pre><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>这道题还是有些小遗憾的，在写这道题的时候，已经得出最后的优化版本了，本来想着直接<code>ac</code>，但是提交修改了几次都<code>wa</code>了，后面想到应该是我写的重复数代码没有减对，直接按上一题的思路减去，最后很遗憾没写出来，因此还需要继续练习，努力补题！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Tokitsukaze-and-a-b-n&quot;&gt;&lt;a href=&quot;#Tokitsukaze-and-a-b-n&quot; class=&quot;headerlink&quot; title=&quot;Tokitsukaze and a+b=n&quot;&gt;&lt;/a&gt;&lt;code&gt;Tokitsukaze&lt;/code</summary>
      
    
    
    
    <category term="c++算法" scheme="https://pxyfcywl.github.io/categories/c-%E7%AE%97%E6%B3%95/"/>
    
    <category term="差分" scheme="https://pxyfcywl.github.io/categories/c-%E7%AE%97%E6%B3%95/%E5%B7%AE%E5%88%86/"/>
    
    
    <category term="差分" scheme="https://pxyfcywl.github.io/tags/%E5%B7%AE%E5%88%86/"/>
    
  </entry>
  
  <entry>
    <title>雪花雪花雪花</title>
    <link href="https://pxyfcywl.github.io/posts/aaaaaaat.html"/>
    <id>https://pxyfcywl.github.io/posts/aaaaaaat.html</id>
    <published>2023-01-16T01:37:16.000Z</published>
    <updated>2023-01-16T03:14:56.235Z</updated>
    
    <content type="html"><![CDATA[<h1 id="雪花雪花雪花"><a href="#雪花雪花雪花" class="headerlink" title="雪花雪花雪花"></a>雪花雪花雪花</h1><h2 id="题目来源"><a href="#题目来源" class="headerlink" title="题目来源"></a>题目来源</h2><p>这道题可以在以下几个地方找到</p><p>1.<code>acwing</code><a href="https://www.acwing.com/problem/content/139/">137. 雪花雪花雪花 - AcWing题库</a></p><p>2.北大的<code>POJ</code><a href="http://poj.org/problem?id=3349">3349 — Snowflake Snow Snowflakes (poj.org)</a></p><p>3.算法竞赛进阶指南</p><h2 id="题目介绍"><a href="#题目介绍" class="headerlink" title="题目介绍"></a>题目介绍</h2><p>有 <code>N</code> 片雪花，每片雪花由六个角组成，每个角都有长度。</p><p>第 <code>i</code>片雪花六个角的长度从某个角开始顺时针依次记为 <code>ai</code>,1,<code>ai</code>,2,…,<code>ai</code>,6</p><p>因为雪花的形状是封闭的环形，所以从任何一个角开始顺时针或逆时针往后记录长度，得到的六元组都代表形状相同的雪花。</p><p>例如 <code>ai</code>,1,<code>ai</code>,2,…,<code>ai</code>,6 和 <code>ai</code>,2,<code>ai</code>,3,…,<code>ai</code>,6，<code>ai</code>,1 就是形状相同的雪花。</p><p><code>ai</code>,1,<code>ai</code>,2,…,<code>ai</code>,6和 <code>ai</code>,6,<code>ai</code>,5,…,<code>ai</code>,1 也是形状相同的雪花。</p><p>我们称两片雪花形状相同，当且仅当它们各自从某一角开始顺时针或逆时针记录长度，能得到两个相同的六元组。</p><p>求这 <code>N</code> 片雪花中是否存在两片形状相同的雪花。</p><p><strong>输入格式</strong></p><p>第一行输入一个整数 <code>N</code>，代表雪花的数量。</p><p>接下来 <code>N</code> 行，每行描述一片雪花。</p><p>每行包含 6 个整数，分别代表雪花的六个角的长度（这六个数即为从雪花的随机一个角顺时针或逆时针记录长度得到）。</p><p>同行数值之间，用空格隔开。</p><p><strong>输出格式</strong></p><p>如果不存在两片形状相同的雪花，则输出：</p><pre class="line-numbers language-none"><code class="language-none">No two snowflakes are alike.</code></pre><p>如果存在两片形状相同的雪花，则输出：</p><pre class="line-numbers language-none"><code class="language-none">Twin snowflakes found.</code></pre><p><strong>数据范围</strong></p><p>1≤<code>N</code>≤100000<br>0≤<code>ai</code>,<code>j</code>&lt;10000000</p><p><strong>输入样例：</strong></p><pre class="line-numbers language-none"><code class="language-none">21 2 3 4 5 64 3 2 1 6 5</code></pre><p><strong>输出样例：</strong></p><pre class="line-numbers language-none"><code class="language-none">Twin snowflakes found.</code></pre><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>​        一开始，我是这么分析的，我先找到6个数字的最小值，然后从最小值开始按照题目的顺序找到一个顺序，然后再把这个顺序的雪花倒过来找到第二个顺序，然后对于这两个顺序的雪花构成一个哈希值，最后再判断是否存在两个哈希值一样的数，如果存在，那么就输出<code>yes</code>，反之<code>no</code></p><p>​        但是，通过实践后看了一些测试数据才发现(<code>acwing</code>的数据几乎半公开)，在题目上并没有说明数字不可以重复，这就导致了测试数据中包含有明明不是一个雪花，但是哈希值计算是一样的，经过2天的思考(看题解)，才发现了字符串表示的最小值这么个方法，由于雪花只有6瓣，数据较少，可以直接枚举找到每一个雪花的字符串的最小表示，找到最小表示后，再全部加入到一个二维数组里面，然后，整个二维数组里面的所有数据就是每一个雪花的最小表示，然后对整个二位数组进行排序，然后一个一个比较，有匹配的就输出<code>yes</code>，反之则<code>no</code></p><p><strong>首先</strong>，给出基础的库函数和初始定义</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;bits&#x2F;stdc++.h&gt;using namespace std;const int N &#x3D; 100010;&#x2F;&#x2F;snows用来存储所有的雪花，idx用来方便排序int snows[N][6], idx[N];</code></pre><p><strong>然后</strong>，我们把创建两个数组，<strong>分别保存雪花的正向和反向数据</strong>，比如说，我们有3 2 1 4 5 6这个雪花，我们先不排序，直接把3 2 1 4 5 6和6 5 4 1 2 3这两个顺序存进两个数组里面，然后用一个函数<strong>分别计算出正向雪花和反向雪花的最小表示</strong>，然后对这两个最小表示取最小值加入<code>snows</code>数组里面</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int main()&#123;    int n;    cin &gt;&gt; n;    &#x2F;&#x2F;两个数组保存正向和反向    int snow[6], isnow[6];    for(int i &#x3D; 0;i &lt; n;i++) &#123;        for(int j &#x3D; 0, k &#x3D; 5;j &lt; 6;j++, k--) &#123;            cin &gt;&gt; snow[j];            isnow[k] &#x3D; snow[j];        &#125;        &#x2F;&#x2F;得到两种雪花方向的最小值        get_min(snow);        get_min(isnow);        &#x2F;&#x2F;比较        if(cmp2(snow, isnow)) memcpy(snows[i], snow, sizeof(snow));        else memcpy(snows[i], isnow, sizeof(isnow));        &#x2F;&#x2F;便于数组排序进行记数        idx[i] &#x3D; i;    &#125;&#125;</code></pre><p><strong>最后</strong>，我们把数组进行排序，然后依次比较，如果发现匹配的就输出结果</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">sort(idx, idx + n, cmp);   for(int i &#x3D; 1;i &lt; n;i++) &#123;       if(!cmp(idx[i - 1], idx[i]) &amp;&amp; !cmp(idx[i], idx[i - 1]))       &#123;           puts(&quot;Twin snowflakes found.&quot;);           return 0;       &#125;   &#125;   puts(&quot;No two snowflakes are alike.&quot;);   return 0;</code></pre><h3 id="函数介绍"><a href="#函数介绍" class="headerlink" title="函数介绍"></a>函数介绍</h3><p>好了，上面我们已经介绍了这道题的大致框架，现在我们来写一下在框架中出现的比较函数</p><p><strong>首先</strong>，是函数1 <code>get_min</code></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void get_min(int *b) &#123;    &#x2F;&#x2F;定义一个静态数组    static int a[12];    &#x2F;&#x2F;把b数组里面的值写两遍放到a数组里面, 便于分析    for(int i &#x3D; 0;i &lt; 12;i++) a[i] &#x3D; b[i % 6];    &#x2F;&#x2F;定义两个指针i, j通过指针来寻找字符串的最小表示    int i &#x3D; 0,j &#x3D; 1, k;    while(i &lt; 6 &amp;&amp; j &lt; 6) &#123;        &#x2F;&#x2F;排除重复        for(k &#x3D; 0;k &lt; 6 &amp;&amp; a[i + k] &#x3D;&#x3D; a[j + k];k++);        &#x2F;&#x2F;直接匹配        if(k &#x3D;&#x3D; 6) break;        &#x2F;&#x2F;i一定不是最小的了        if(a[i + k] &gt; a[j + k]) &#123;            i +&#x3D; k + 1;            if(i &#x3D;&#x3D; j) i++;        &#125;        &#x2F;&#x2F;j一定不是最小的了        else &#123;            j +&#x3D; k + 1;            if(i &#x3D;&#x3D; j) j++;        &#125;    &#125;    &#x2F;&#x2F;取到最小值，对应的就是最小表示    k &#x3D; min(i, j);    &#x2F;&#x2F;刷新原来的数组    for(int i &#x3D; 0;i &lt; 6;i++) b[i] &#x3D; a[i + k];&#125;</code></pre><p>下面，我来介绍一下<strong>字符串的最小表示法</strong>，也就是对上述函数的算法解释。</p><p>就是说，给定我们一个字符串，要我们找到这个字符串里面的最小字典序对应的顺序，比如说这么一个数3 2 1 4 5 6,它有一下几种顺序</p><pre class="line-numbers language-图" data-language="图"><code class="language-图">3 2 1 4 5 62 1 4 5 6 31 4 5 6 3 24 5 6 3 2 15 6 3 2 1 46 3 2 1 4 5</code></pre><p>相信大家已经看出来了，第三行的1 4 5 6 3 2就是这个字符串的最小表示法，那么我们该怎么在O(n)的时间里面求出来这个最小的呢</p><p>一开始，我们先把这个字符串*2，写两遍，放指针<code>i</code>和<code>j</code></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">i3 2 1 4 5 6 3 2 1 4 5 6  j3 2 1 4 5 6 3 2 1 4 5 6</code></pre><p>我们先来比较<code>i</code>和<code>j</code>两个指针，i指针对应的字符串是3 2 1 4 5 6，j指针对应的字符串是2 1 4 5 6 3，我们对比第一个字符就可以发现，<code>i</code>指针对应的字符串一定不是最小字符串，它的首位数就比<code>j</code>的要大了，所以我们就对应的把<code>i</code>加1，欸，这下<code>i</code>和<code>j</code>的位置相同了，这样是不可以的，因为我们现在找到的<code>j</code>字符串是最小的，那么为了继续找下去，我们要把<code>i</code>再往右移动一格，<code>i</code>到1的位置上，变成这样</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">    i3 2 1 4 5 6 3 2 1 4 5 6  j3 2 1 4 5 6 3 2 1 4 5 6</code></pre><p>现在，我们继续匹配，发现i对应的字符串比j的小，现在我们按照第一种情况，把j移动两格，变成这样</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">    i3 2 1 4 5 6 3 2 1 4 5 6      j3 2 1 4 5 6 3 2 1 4 5 6</code></pre><p>现在我们看得出来，<code>i</code>对应的一定是最小的了,后面的循环就是<code>j</code>一直往后走，走到<code>while</code>循环结束，然后，我们得到了<code>i</code>和<code>j</code>对应的位置,一个是2，一个是6，我们找到最小的那个，也就是2，那么2的位置开始，把这段字符串赋给原来的<code>b</code>数组，那么<code>b</code>数组就是最小表示了，上面的<code>k</code>是用来防止有重复数字的，如果有重复数字的话，就用<code>k</code>先去重，然后再判断即可</p><p><strong>接下来</strong>，是函数2，<code>cmp2</code></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">bool cmp2(int a[], int b[]) &#123;for(int i &#x3D; 0;i &lt; 6;i++) &#123;if(a[i] &lt; b[i]) return true;else if(a[i] &gt; b[i]) return false;&#125;return false;&#125;</code></pre><p>这个函数很好理解，就是依次比较字符串的每一位，遇到不同的就开始判断</p><p><strong>最后</strong>，是函数3，<code>cmp</code></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">bool cmp(int a, int b) &#123;for(int i &#x3D; 0;i &lt; 6;i++) &#123;if(snows[a][i] &lt; snows[b][i]) return true;else if(snows[a][i] &gt; snows[b][i]) return false;&#125;return false;&#125;</code></pre><p>这个函数就体现出来一开始的<code>idx</code>函数的妙用了，我们用<code>idx</code>记录每一个位置，然后我们用<code>idx</code>进行比较，放在<code>cmp</code>里面就是指对应的数组的位置了，其次，判断是否相同的方法也很巧妙，我们进行两次<code>cmp</code>判断</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">if(!cmp(idx[i - 1], idx[i]) &amp;&amp; !cmp(idx[i], idx[i - 1]))</code></pre><p>如果两个都成立，那就说明第一个大于等于第二个，第二个大于等于第一个，那么就只可能是第二个和第一个相等，那么就可以找到符合的一对字符串了</p><p>这样，我们就可以解决这道题了，注意，上述方法只能在<code>acwing</code>里面过，在<code>poj</code>上的数据输入较大，需要把<code>cin</code>和<code>cout</code>换成<code>scanf</code>和<code>printf</code>才可以过</p><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>​    这是蒟蒻第一次写题解，由于第一次写，所以不是很懂应该怎么样才可以写出一个比较好的，可以让更多人理解的题解，所以我还需要不断地努力，不断刷题，得到更多的思路，写出更多让大家可以理解清晰的题解！</p><p>​    如果大家有什么不是很理解的地方，或者说有写的有问题的地方还烦请告知本蒟蒻(<code>qq</code>1594463152)</p><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;bits&#x2F;stdc++.h&gt;using namespace std;const int N &#x3D; 100010;int snows[N][6], idx[N];void get_min(int *b)&#123;    static int a[12];    for(int i &#x3D; 0;i &lt; 12;i++) a[i] &#x3D; b[i % 6];    int i &#x3D; 0, j &#x3D; 1, k;    while(i &lt; 6 &amp;&amp; j &lt; 6) &#123;        for(k &#x3D; 0;k &lt; 6 &amp;&amp; a[i + k] &#x3D;&#x3D; a[j + k];k++);        if(k &#x3D;&#x3D; 6) break;        if(a[i + k] &gt; a[j + k]) &#123;            i +&#x3D; k + 1;            if(i &#x3D;&#x3D; j) i++;        &#125;        else &#123;            j +&#x3D; k + 1;            if(i &#x3D;&#x3D; j) j++;        &#125;    &#125;    k &#x3D; min(i, j);    for(i &#x3D; 0;i &lt; 6;i++) b[i] &#x3D; a[i + k];&#125;bool cmp(int a, int b)&#123;    for(int i &#x3D; 0;i &lt; 6;i++) &#123;        if(snows[a][i] &lt; snows[b][i]) return true;        else if(snows[a][i] &gt; snows[b][i]) return false;    &#125;    return false;&#125;bool cmp2(int a[], int b[]) &#123;    for(int i &#x3D; 0;i &lt; 6;i++) &#123;        if(a[i] &lt; b[i]) return true;        else if(a[i] &gt; b[i]) return false;    &#125;    return false;&#125;int main()&#123;    int n;    cin &gt;&gt; n;    int snow[6], isnow[6];    for(int i &#x3D; 0;i &lt; n;i++) &#123;        for(int j &#x3D; 0, k &#x3D; 5;j &lt; 6;j++, k--) &#123;            cin &gt;&gt; snow[j];            isnow[k] &#x3D; snow[j];        &#125;        get_min(snow);        get_min(isnow);        if(cmp2(snow, isnow)) memcpy(snows[i], snow, sizeof(snow));        else memcpy(snows[i], isnow, sizeof(isnow));        idx[i] &#x3D; i;    &#125;    sort(idx, idx + n, cmp);    for(int i &#x3D; 1;i &lt; n;i++) &#123;        if(!cmp(idx[i - 1], idx[i]) &amp;&amp; !cmp(idx[i], idx[i - 1]))        &#123;            puts(&quot;Twin snowflakes found.&quot;);            return 0;        &#125;    &#125;    puts(&quot;No two snowflakes are alike.&quot;);    return 0;&#125;</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;雪花雪花雪花&quot;&gt;&lt;a href=&quot;#雪花雪花雪花&quot; class=&quot;headerlink&quot; title=&quot;雪花雪花雪花&quot;&gt;&lt;/a&gt;雪花雪花雪花&lt;/h1&gt;&lt;h2 id=&quot;题目来源&quot;&gt;&lt;a href=&quot;#题目来源&quot; class=&quot;headerlink&quot; title=&quot;题</summary>
      
    
    
    
    <category term="c++算法" scheme="https://pxyfcywl.github.io/categories/c-%E7%AE%97%E6%B3%95/"/>
    
    <category term="哈希表" scheme="https://pxyfcywl.github.io/categories/c-%E7%AE%97%E6%B3%95/%E5%93%88%E5%B8%8C%E8%A1%A8/"/>
    
    
    <category term="哈希表" scheme="https://pxyfcywl.github.io/tags/%E5%93%88%E5%B8%8C%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>KMP</title>
    <link href="https://pxyfcywl.github.io/posts/aaaaaaas.html"/>
    <id>https://pxyfcywl.github.io/posts/aaaaaaas.html</id>
    <published>2023-01-10T02:42:09.000Z</published>
    <updated>2023-01-10T03:54:25.486Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据结构初见：KMP"><a href="#数据结构初见：KMP" class="headerlink" title="数据结构初见：KMP"></a>数据结构初见：<code>KMP</code></h1><p>今天，我们来看看这么一个数据结构<code>KMP</code>，下面我们来通过了解<code>KMP</code>的基本用法和一些典型例题来逐步了解它吧，(●ˇ∀ˇ●)</p><h2 id="KMP的基本用法"><a href="#KMP的基本用法" class="headerlink" title="KMP的基本用法"></a><code>KMP</code>的基本用法</h2><p>像往常一样，这次我们依然通过一道题来走进<code>KMP</code>的世界，现在有这么一个情景，我们有两个已知大小的字符串，分别是<code>ababa</code>，<code>ababacaababa</code></p><p>​        现在，有一个问题，问我们第一个字符串在第二个字符串里面出现了几次，同时输出对应的下标。在这么个情景中，我们很容易可以发现，第一个字符串可以在第二个字符串里面找到两次，同时对应的下标是0和7，</p><p>​        这道题大家是怎么想的呢？我在第一次想的时候，就是两个for循环，对第二个字符串进行遍历，对于每一个字符，都进行逐一匹配，如果发现了一组，那么就输出对应的下标，这种方法可以保证正确性，但是不保证速度，因此，前辈们研究出来了这么一个数据结构，可以让我们在更短的时间里面找到最优解，而由于这个方法是三个人发现的，于是就取了他们三人名字的首字母，也就是我们现在说的<code>KMP</code>字符串</p><p>我们先来重新看看我们第一次想的朴素算法，第一步，我们设立两个指针，一个指向第一个字符串，一个指向第二个字符串</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">iababaj&amp;kababacaababa</code></pre><p>i和j指向的字母相同，继续匹配,直到这步</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">    iababak    jababacaababa</code></pre><p>我们发现i和j刚好满足子串匹配，于是输出k的位置，重置i和j</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">iababa k&amp;jababacaababa</code></pre><p>i回到了第一位，j到了第二位，这时候，我们发现第一个就不匹配了，于是我们让k加一，重置i和j</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">iababa  k&amp;jababacaababa</code></pre><p>我们继续匹配，直到</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">  iababa  k jababacaababa</code></pre><p>我们发现，又不匹配，于是我们让k加一，再一次重置i和j</p><p>……</p><p>这样子的话，就出现了很多的重复操作，我们无法前瞻性地看出前面是否会满足匹配，我们只是一个一个的尝试，没有得到进步，所以，<code>KMP</code>就可以帮我们减少这种重复操作来达到快速匹配的目的</p><p>对于每一次的不匹配，我们都是直接重置i和j，那我们的j可不可以不止进一个位置，我们可以让他进几个位置，比如说这一步</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">iababak   jababacaababa</code></pre><p>我们已经发现了i和j是匹配的，但是我们已经发现了前面<code>ababa</code>中有重复的字符串，比如说<code>a</code>,<code>ab</code>,<code>aba</code>这些字符串就是在<code>ababa</code>里面是重复的，我们只要按照这种规律重新计算j在一步可以前进几步，我们就可以舍弃第二个位置，直接到第三个位置</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">iababa  k&amp;jababacaababa</code></pre><p>虽然我们直到这一步还是错的，但是有效的减少了我们的次数，我们下一步还可以减少</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">iababa  k&amp;jababacaababa</code></pre><p>这两次我们都是移动了2步，因为在第一个字符串中是存在<code>ab</code>这么个子串的，所以我们可以移动两步，如果我们发现了<code>aba</code>这么个子串,我们还可以更多，所以问题又转换成我们的第一个子串的每个位置对应的可以找到至多多少个子串</p><pre class="line-numbers language-none"><code class="language-none">第一个子串ababa1号位 02号位 03号位 1 a4号位 2 ab5号位 3 aba</code></pre><p>对于每一次查找，我们可以发现上面的规律，在第一个字符中是永远不会有重复字符串的，之后的才可以找到，像下面这个</p><pre class="line-numbers language-none"><code class="language-none">aaaaa1号位 02号位 1 a3号位 2 aa4号位 3 aaa5号位 4 aaaa</code></pre><p>再来一个</p><pre class="line-numbers language-none"><code class="language-none">ababacaabaa1号位02号位03号位1a4号位2ab5号位3aba6号位07号位1a8号位1a9号位2ab10号位3aba11号位1a</code></pre><p>没错，对于每一个位置，我们找到其最多重复字符串的方法就是比较队头和队尾，比如说第10个位置，前三个和后三个的位置是匹配的，所以最多有三个，5号位也是如此</p><pre class="line-numbers language-none"><code class="language-none">aba baca abaaaba是匹配的</code></pre><p>通过找第一个字符串的子串，我们就可以有效的减少无意义匹配的数量，这样就可以减少无意义的循环，下面给出找的代码</p><p>代码如下</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;using namespace std;const int N &#x3D; 1000010;int ne[N];int main()&#123;    int n, m;char a[N], b[N];    cin &gt;&gt; n &gt;&gt; a + 1 &gt;&gt; m &gt;&gt; b + 1;    &#x2F;&#x2F;由于第1个字符必定为0，于是从第2位开始    for(int i &#x3D; 2, j &#x3D; 0;i &lt;&#x3D; n;i++) &#123;        &#x2F;&#x2F;如果发现j &gt; 0 同时发现有字符不匹配 那就回溯，找到记忆中的可能匹配的，减少重复，直到匹配或者无法继续回溯为止        while(j &amp;&amp; a[i] !&#x3D; a[j + 1]) j &#x3D; ne[j];        &#x2F;&#x2F;如果发现有一对匹配的 对应的j++        if(a[i] &#x3D;&#x3D; a[j + 1]) j++;        &#x2F;&#x2F;这个位置的最大子串符号数为j        ne[i] &#x3D; j;    &#125;    for(int i &#x3D; 1;i &lt;&#x3D; n;i++) cout &lt;&lt; ne[i] &lt;&lt; &#39; &#39;;    &#x2F;&#x2F;其他代码();    return 0;&#125;</code></pre><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">input11 ababacaabaaoutput0 0 1 2 3 0 1 1 2 3 1</code></pre><p>于是乎，我们就找到了所有位置上的最大重复子串个数，然后我们再用相应的方法匹配两个字符串</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">for(int i &#x3D; 1,j &#x3D; 0;i &lt;&#x3D; m;i++) &#123;    while(j &amp;&amp; b[i] !&#x3D; a[j+1]) j &#x3D; ne[j];    if(b[i] &#x3D;&#x3D; a[j+1]) j++;    &#x2F;&#x2F;找到匹配的    if(j &#x3D;&#x3D; n)     &#123;        cout &lt;&lt; i - j &lt;&lt; &#39; &#39;;        &#x2F;&#x2F;回溯        j &#x3D; ne[j];    &#125;&#125;</code></pre><p>这样子我们就可以找到所有重复的字符串了，总代码如下</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;#include&lt;algorithm&gt;using namespace std;const int N &#x3D; 1000010;int ne[N];int main()&#123;    char a[N], b[N];    int n, m;    cin &gt;&gt; n &gt;&gt; a + 1 &gt;&gt; m &gt;&gt; b + 1;    for(int i &#x3D; 2,j &#x3D; 0;i &lt;&#x3D; n;i++)    &#123;        while(j &amp;&amp; a[i] !&#x3D; a[j+1]) j &#x3D; ne[j];        if(a[i] &#x3D;&#x3D; a[j+1]) j++;        ne[i] &#x3D; j;    &#125;    for(int i &#x3D; 1,j &#x3D; 0;i &lt;&#x3D; m;i++)    &#123;        while(j &amp;&amp; b[i] !&#x3D; a[j+1]) j &#x3D; ne[j];        if(b[i] &#x3D;&#x3D; a[j+1]) j++;        if(j &#x3D;&#x3D; n)         &#123;            cout &lt;&lt; i - j &lt;&lt; &#39; &#39;;            j &#x3D; ne[j];        &#125;    &#125;    return 0;&#125;</code></pre><h2 id="最后的话"><a href="#最后的话" class="headerlink" title="最后的话"></a>最后的话</h2><p>这个<code>KMP</code>字符串可以说是我在学习数据结构中最难的那个力，学了好久都没有很懂，所以这也说明算法和数据结构的恐怖和其相对应的魅力~(￣▽￣)~*，如果想通过数据结构的话，这个算法就必须要啃下来的，加油吧，<code>acmer</code>！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;数据结构初见：KMP&quot;&gt;&lt;a href=&quot;#数据结构初见：KMP&quot; class=&quot;headerlink&quot; title=&quot;数据结构初见：KMP&quot;&gt;&lt;/a&gt;数据结构初见：&lt;code&gt;KMP&lt;/code&gt;&lt;/h1&gt;&lt;p&gt;今天，我们来看看这么一个数据结构&lt;code&gt;KMP</summary>
      
    
    
    
    <category term="c++数据结构" scheme="https://pxyfcywl.github.io/categories/c-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="KMP" scheme="https://pxyfcywl.github.io/categories/c-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/KMP/"/>
    
    
    <category term="KMP" scheme="https://pxyfcywl.github.io/tags/KMP/"/>
    
  </entry>
  
  <entry>
    <title>Trie树</title>
    <link href="https://pxyfcywl.github.io/posts/aaaaaaar.html"/>
    <id>https://pxyfcywl.github.io/posts/aaaaaaar.html</id>
    <published>2023-01-09T02:18:12.000Z</published>
    <updated>2023-01-09T03:23:45.997Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据结构初见：Trie树"><a href="#数据结构初见：Trie树" class="headerlink" title="数据结构初见：Trie树"></a>数据结构初见：<code>Trie</code>树</h1><p>今天，我们来了解一下<code>Trie</code>树这种数据结构，来看看专属于它的数据结构之美，(●ˇ∀ˇ●)</p><h2 id="Trie树的基本功能"><a href="#Trie树的基本功能" class="headerlink" title="Trie树的基本功能"></a><code>Trie</code>树的基本功能</h2><p>​        在之前我们可能会遇到一种题，比如说，现在我们有<code>m</code>个<strong>小写字母</strong>字符串，然后，我们有<code>n</code>个询问，对于每一个询问会告诉我们一个字符串，让我们在那<code>m</code>个字符串里面找到一样的，找到的话就输出<code>yes</code>，不然就输出<code>no</code></p><p>​        一般情况下，我们会用一个二维数组，把所有的字符串保存在二维数组里面，对于每一次询问，我们对数组进行依次遍历，直到找到符合的字符串，但是呢，这么做的话，就会很麻烦，因此，伟大的前辈们研究出来了一种可以很好解决这一类题目的方法，那就是<code>Trie</code>树这么一种数据结构</p><p>​        那么，<code>Trie</code>树是怎么对于这些字符串数组进行存储的呢？欸，其实也是一个二维数组，只不过存储方式不太一样，假如说，我们现在有一下这些字符串</p><pre class="line-numbers language-字符串" data-language="字符串"><code class="language-字符串">abcdeabdabdcabcbcd</code></pre><p>​        在存储一个字符串之前，我们先设置一个根节点，这个节点的目的就是作为存储的根，可以让我们更加方便地查询。好的，现在我们开始存储第一个字符串吧</p><p>我们从根节点开始找起，看看有没有一个叫做<code>a</code>字符的子节点，如果没有的话，我们就创建一个<code>a</code>字符子节点，像这样</p><pre class="line-numbers language-图" data-language="图"><code class="language-图">    根a</code></pre><p>​        我们添加了字符<code>a</code>这个子节点，然后，我们再从<code>a</code>这个子节点开始找，看看能不能找到字符<code>b</code>，如果不能找到的话，那么就创建一个字符<code>b</code>这么个子节点，像这样</p><pre class="line-numbers language-图" data-language="图"><code class="language-图">        根    ab</code></pre><p>然后，像这样依次进行下去，直到把整个字符串全部存储到<code>Trie</code>树里面，像这样</p><pre class="line-numbers language-图" data-language="图"><code class="language-图">                    根                a            b        c    de</code></pre><p>通过5次存储，最后，我们存储了所有的字符串进入<code>Trie</code>树里面</p><pre class="line-numbers language-图" data-language="图"><code class="language-图">                    根                a        b            b                c        c       d                d    d               ce</code></pre><p>在这棵树里面，就存储了5个字符串，但是，我们在查询的时候如果仅仅这么做的话，我们就不知道我们一开始存了哪些字符串，那么如果我们查询<code>abcd</code>这个字符串，在<code>Trie</code>树里面是可以找到的，但是我们一开始的字符串里面是没有<code>abcd</code>这个字符串的，所以我们对于每一次存储，都要做一个记号，说明这个地方有字符串，这样的话就可以灵活的查询了</p><h3 id="原题如下："><a href="#原题如下：" class="headerlink" title="原题如下："></a>原题如下：</h3><p>——————题目来自<code>acwing</code></p><p>维护一个字符串集合，支持两种操作：</p><ol><li><code>I x</code> 向集合中插入一个字符串 <code>x</code>；</li><li><code>Q x</code> 询问一个字符串在集合中出现了多少次。</li></ol><p>共有 <code>N</code> 个操作，所有输入的字符串总长度不超过 105，字符串仅包含小写英文字母。</p><p><strong>输入格式</strong></p><p>第一行包含整数 <code>N</code>，表示操作数。</p><p>接下来 <code>N</code> 行，每行包含一个操作指令，指令为 <code>I x</code> 或 <code>Q x</code> 中的一种。</p><p><strong>输出格式</strong></p><p>对于每个询问指令 <code>Q x</code>，都要输出一个整数作为结果，表示 <code>x</code> 在集合中出现的次数。</p><p>每个结果占一行。</p><p><strong>数据范围</strong></p><p>1≤<code>N</code>≤2^104</p><p><strong>输入样例：</strong></p><pre class="line-numbers language-none"><code class="language-none">5I abcQ abcQ abI abQ ab</code></pre><p><strong>输出样例：</strong></p><pre class="line-numbers language-none"><code class="language-none">101</code></pre><h3 id="基本功能实现"><a href="#基本功能实现" class="headerlink" title="基本功能实现"></a>基本功能实现</h3><p>上述解释可以转变成代码：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;#include&lt;algorithm&gt;using namespace std;const int N &#x3D; 100010;int son[N][26], idx, cnt[N];&#x2F;&#x2F;往Trie树里面添加字符串void add(char ch[])&#123;    int p &#x3D; 0;    for(int i &#x3D; 0;ch[i];i++) &#123;        int u &#x3D; ch[i] - &#39;a&#39;;        &#x2F;&#x2F;如果这个节点没有创建出来，就新开一个节点        if(!son[p][u]) son[p][u] &#x3D; ++idx;        &#x2F;&#x2F;找到子节点        p &#x3D; son[p][u];    &#125;    &#x2F;&#x2F;对应的字符串印记增加    cnt[p]++;&#125;&#x2F;&#x2F;向Trie树里面询问字符串int query(char ch[])&#123;    int p &#x3D; 0;    for(int i &#x3D; 0;ch[i];i++) &#123;        int u &#x3D; ch[i] - &#39;a&#39;;        &#x2F;&#x2F;如果有一个节点是没有的，说明字符串不存在        if(!son[p][u]) return 0;        p &#x3D; son[p][u];    &#125;    &#x2F;&#x2F;找到了这么一个字符串，但是字符串可能不存在    return cnt[p];&#125;int main()&#123;    int n;    cin &gt;&gt; n;    for(int i &#x3D; 0;i &lt; n;i++) &#123;        char ch[2], s[N];        scanf(&quot;%s%s&quot;,ch, s);        if(ch[0] &#x3D;&#x3D; &#39;I&#39;) add(s);        else cout &lt;&lt; query(s) &lt;&lt; endl;    &#125;    return 0;&#125;</code></pre><p>如此一来，我们就可以自由地查询字符串了</p><p>现在，我们来一道小题来练练手吧（</p><h2 id="练习题目"><a href="#练习题目" class="headerlink" title="练习题目"></a>练习题目</h2><p>在给定的 <code>N</code> 个整数 <code>A1</code>，<code>A2</code>……<code>AN</code> 中选出两个进行 <code>xor</code>（异或）运算，得到的结果最大是多少？</p><p><strong>输入格式</strong></p><p>第一行输入一个整数 <code>N</code>。</p><p>第二行输入 <code>N</code> 个整数 <code>A1</code>～<code>AN</code>。</p><p><strong>输出格式</strong></p><p>输出一个整数表示答案。</p><p><strong>数据范围</strong></p><p>1≤<code>N</code>≤10^5,<br>0≤<code>Ai</code>&lt;2^31</p><p><strong>输入样例：</strong></p><pre class="line-numbers language-none"><code class="language-none">31 2 3</code></pre><p><strong>输出样例：</strong></p><pre class="line-numbers language-none"><code class="language-none">3</code></pre><p>——————————————————————<strong>分割线</strong>——————————————————————</p><p>好的，初看此题，大家的想法应该是先创建一个二维数字数组，对于每一个数都存储进去，然后再进行<code>for</code>循环嵌套<code>for</code>循环依次计算每一个数的异或值，最后再得出最大答案</p><p>没错，这确实可以计算出来，但是对于复杂度来说较高，因为计算量会大于10^8，而<code>c++</code>一秒内只能计算10^7 —- 10^8的数值，所以我们会超时，因此，我们得考虑其它的算法，那么有没有其它的方法呢？</p><p>肯定是有的，不然怎么会出现在这里，对于每一个数，我们可以依次存储到<code>Trie</code>树里面，但是怎么存呢，这就需要很巧妙的方法了</p><h4 id="算法讲解"><a href="#算法讲解" class="headerlink" title="算法讲解"></a>算法讲解</h4><p>首先，我们要知道怎么计算两个数的异或值，对于5和3两个数，</p><pre class="line-numbers language-二进制计算" data-language="二进制计算"><code class="language-二进制计算">5的二进制  0000 01013的二进制  0000 0011异或值为7  00000111</code></pre><p>没错，我们计算二进制的时候是通过二进制计算的，所以说，我们可以把每一个数都转化成二进制数，依次保存到<code>Trie</code>树里面，这样一来，我们就可以有选择的找每一个数对应的最大异或数，再求出每一个数的最大异或值，这样的话就会避免很多难题，</p><p>那么，问题又来了，我们该怎么查找与该数字相匹配的指定数字的最大异或数呢？</p><p>我们来看看5，在2^8里面，5可以和谁组成最大异或数？</p><pre class="line-numbers language-二进制计算" data-language="二进制计算"><code class="language-二进制计算">5的二进制  0000 0101n的二进制  1111 1010</code></pre><p>很明显，5和n可以组成最大异或数，也就是从高位往低位进行寻找，5的最高位是0，那么我们就要找最高位是1的，这样依次查询下去，如果没有对应的相反的值，那就只能找一样的，但是依然可以保证每一个数都找到最大异或数，最后依次比较</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;#include&lt;algorithm&gt;using namespace std;const int N &#x3D; 100010, M &#x3D; 31*N;int a[N], idx, son[M][2];&#x2F;&#x2F;把每一个数都添加到Trie数里面void add(int x)&#123;    int p &#x3D; 0;    &#x2F;&#x2F;从最高位开始存储    for(int i &#x3D; 30;i &gt;&#x3D; 0;i--) &#123;        &#x2F;&#x2F;通过位运算求出这个数的第i位的二进制数        int u &#x3D; x&gt;&gt;i&amp;1;        &#x2F;&#x2F;开辟节点        if(!son[p][u]) son[p][u] &#x3D; ++idx;        p &#x3D; son[p][u];    &#125;&#125;</code></pre><p>寻找每一个数的可以组成最大异或数的数</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int query(int x)&#123;    int p &#x3D; 0;    int ans &#x3D; 0;    for(int i &#x3D; 30;i &gt;&#x3D; 0;i--) &#123;        int u &#x3D; x&gt;&gt;i&amp;1;        &#x2F;&#x2F;找得到相反的        if(son[p][!u]) &#123;            p &#x3D; son[p][!u];            &#x2F;&#x2F;二进制求和            ans &#x3D; ans * 2 + !u;        &#125;        &#x2F;&#x2F;找不到相反的，就找个次的        else &#123;            p &#x3D; son[p][u];            &#x2F;&#x2F;二进制求和            ans &#x3D; ans * 2 + u;        &#125;    &#125;    &#x2F;&#x2F;返回    return ans;&#125;</code></pre><p>输入输出代码：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int main()&#123;    int n;    cin &gt;&gt; n;    int sum &#x3D; 0;    for(int i &#x3D; 0;i &lt; n;i++) &#123;        cin &gt;&gt; a[i];        add(a[i]);        int ans &#x3D; query(a[i]);        sum &#x3D; max(sum, ans^a[i]);    &#125;    cout &lt;&lt; sum &lt;&lt; endl;    return 0;&#125;</code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以上就是关于<code>Trie</code>树的基础内容了，相信通过这个知识点的学习，可以更好的了解数据结构的奥妙之美，ヽ(✿ﾟ▽ﾟ)ノ</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;数据结构初见：Trie树&quot;&gt;&lt;a href=&quot;#数据结构初见：Trie树&quot; class=&quot;headerlink&quot; title=&quot;数据结构初见：Trie树&quot;&gt;&lt;/a&gt;数据结构初见：&lt;code&gt;Trie&lt;/code&gt;树&lt;/h1&gt;&lt;p&gt;今天，我们来了解一下&lt;code&gt;T</summary>
      
    
    
    
    <category term="c++数据结构" scheme="https://pxyfcywl.github.io/categories/c-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="Trie树" scheme="https://pxyfcywl.github.io/categories/c-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/Trie%E6%A0%91/"/>
    
    
    <category term="Trie树" scheme="https://pxyfcywl.github.io/tags/Trie%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>并查集</title>
    <link href="https://pxyfcywl.github.io/posts/aaaaaaaq.html"/>
    <id>https://pxyfcywl.github.io/posts/aaaaaaaq.html</id>
    <published>2023-01-08T10:26:43.000Z</published>
    <updated>2023-01-09T02:21:16.588Z</updated>
    
    <content type="html"><![CDATA[<h1 id="算法初见：并查集"><a href="#算法初见：并查集" class="headerlink" title="算法初见：并查集"></a>算法初见：并查集</h1><p>这是一个类似于树的，可以将两个元素合并起来的一种数据结构。   —-作者感觉的，(●ˇ∀ˇ●)</p><h2 id="并查集的基本功能"><a href="#并查集的基本功能" class="headerlink" title="并查集的基本功能"></a>并查集的基本功能</h2><p>今天，我们来看看并查集这么一个数据结构，来介绍一下它的基本功能</p><p>并查集的主要作用就是把两个树合并成一个树，但是，如果只是这么说的话，那就太笼统了，别人这么跟我说，我也不知道是什么意思，所以下面我们就来好好聊聊合并成一棵树，首先，我们来画个图，从图里面来了解这么一个数据结构</p><p>两棵树，生成！</p><pre class="line-numbers language-图" data-language="图"><code class="language-图">子树1                            子树2         3                                5     2       4                         1  1    5   3    8                  1   3   6</code></pre><p>注意，这两棵树可以不是二叉树，比如子树2就不是二叉树</p><p>现在，我们来看看这两棵树的共同点，比如说，每一棵树都有自己的根节点，子树1的根节点是3，子树2的根节点是5，每一个根节点都会生成任意数的子节点(只要不是负数)，每一个子节点都会生成任意数的自己的子节点，这么依次下去，而并查集做的，就是把两棵本来毫无关系的树变成一棵树，那么，该怎么变成一棵树呢？</p><p>其实，很简单，就是把其中一棵树的根节点移到另外一棵树上，像这样，我们把子树1的根节点移动到子树2上</p><pre class="line-numbers language-图" data-language="图"><code class="language-图">子树351  31       3      6              2              4                         1         5    3          8</code></pre><p>现在的子树3就是由子树1和子树2合成的一棵新的树</p><p>由于两棵树合成一棵树，所以它们肯定要保留一个根节点，在子树3里面，保留的是子树2的根节点，也就是<strong>让子树1的所有元素的根节点变成子树2的根节点</strong></p><p>这样一来，我们也可以来解释子树1和子树2的生成关系了，子树1是由3，2，4，1，5，3，8这几个子子树构成的，而子树2是由5，1，1，3，6这些子子树构成的，对于每一个节点，我们要找到这个节点的根节点，那就是先找到这个节点的父节点，再找到这个父节点的父节点，直到找到最后的根节点</p><p>好了，现在我们已经知道了并查集的基本作用了，就是将两个节点不断地合并，变成一棵新的树，下面我们来通过一道例题，来从代码的实现上来更好的了解并查集</p><p>下题来自<code>acwing</code>算法基础课</p><h3 id="题目：合并集合"><a href="#题目：合并集合" class="headerlink" title="题目：合并集合"></a>题目：合并集合</h3><p>一共有 <code>n</code> 个数，编号是 1∼<code>n</code>，最开始每个数各自在一个集合中。</p><p>现在要进行 <code>m</code> 个操作，操作共有两种：</p><ol><li><code>M a b</code>，将编号为 <code>a</code> 和 <code>b</code> 的两个数所在的集合合并，如果两个数已经在同一个集合中，则忽略这个操作；</li><li><code>Q a b</code>，询问编号为 <code>a</code> 和 <code>b</code> 的两个数是否在同一个集合中；</li></ol><p><strong>输入格式</strong></p><p>第一行输入整数 <code>n</code> 和 <code>m</code>。</p><p>接下来 <code>m</code> 行，每行包含一个操作指令，指令为 <code>M a b</code> 或 <code>Q a b</code> 中的一种。</p><p><strong>输出格式</strong></p><p>对于每个询问指令 <code>Q a b</code>，都要输出一个结果，如果 <code>a</code> 和 <code>b</code> 在同一集合内，则输出 <code>Yes</code>，否则输出 <code>No</code>。</p><p>每个结果占一行。</p><p><strong>数据范围</strong></p><p>1≤<code>n</code>, <code>m</code>≤105</p><p><strong>输入样例：</strong></p><pre class="line-numbers language-none"><code class="language-none">4 5M 1 2M 3 4Q 1 2Q 1 3Q 3 4</code></pre><p><strong>输出样例：</strong></p><pre class="line-numbers language-none"><code class="language-none">YesNoYes</code></pre><h4 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h4><p>其实，这道题就是一道很经典的并查集的题目，里面的<code>a</code>, <code>b</code>本来自生就是一颗小树，现在要把两棵树合并，是这棵树变得更大</p><p>首先，先初始化</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;#include&lt;algorithm&gt;using namespace std;const int N &#x3D; 100010;int p[N];</code></pre><p>区间压缩</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int find(int x)&#123;    if(p[x]!&#x3D;x) p[x] &#x3D; find(p[x]);    return p[x];&#125;</code></pre><p>这时候，我们来介绍一下<code>p[N]</code>数组和<code>find(x)</code> 这两个操作</p><p>首先，我们在一开始的时候，每一个<code>a</code>, <code>b</code>都作为一个个体，那么我们就假设它们的根节点就是它们自己，所以就可以</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">for(int i &#x3D; 0;i &lt; n;i++) &#123;p[i] &#x3D; i;&#125;</code></pre><p>在一开始，就对我们的<code>p[i]</code>进行初始化, 然后我们再来根据题目，改变一个个个体</p><p>然后呢，<strong>区间压缩</strong>就是一个特别厉害的加速算法了，在一开始介绍并查集的时候，我们有一个查询操作，在我们查询每一个节点的根节点的时候，要先找到这个节点的父节点，这样依次寻找出来，但是如果每次都要这么查询的会很慢，所以通过这个区间操作，对于节点找到根节点上的所有点，我们通过<strong>回溯</strong>统一赋值为根节点，那么就只要查询一次，就可以记录了</p><p>下面是输入操作</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int n, m;    cin &gt;&gt; n &gt;&gt; m;    for(int i &#x3D; 1;i &lt;&#x3D; n;i++) p[i] &#x3D; i;    for(int i &#x3D; 1;i &lt;&#x3D; m;i++) &#123;        char ch[2];        int a, b;        scanf(&quot;%s%d%d&quot;, ch, &amp;a, &amp;b);        &#x2F;&#x2F;问题解决()    &#125;</code></pre><p>下一步，我们来讨论题目中的两种情况，先是第一种</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">if(ch[0] &#x3D;&#x3D; &#39;M&#39;) p[find(a)] &#x3D; find(b);</code></pre><p>对于两个数，我们先找到各自的根节点(<strong>区间压缩后的复杂度是O(1)的</strong>)，然后我们默认让<code>b</code>的根节点变成<code>a</code>的根节点，就类似于<code>a</code>是子树1，<code>b</code>是子树2，我们把<code>a</code>移植到<code>b</code>上</p><p>第二种</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">if(find(a) &#x3D;&#x3D; find(b)) cout &lt;&lt; &quot;Yes&quot; &lt;&lt; endl;else cout &lt;&lt; &quot;No&quot; &lt;&lt; endl;</code></pre><p>这种其实就很简单了，就是询问两个数值的根节点是否相等，直接区间压缩一下就可以了</p><h4 id="总代码"><a href="#总代码" class="headerlink" title="总代码"></a>总代码</h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;#include&lt;algorithm&gt;using namespace std;const int N &#x3D; 100010;int p[N];int find(int x)&#123;    if(p[x]!&#x3D;x) p[x] &#x3D; find(p[x]);    return p[x];&#125;int main()&#123;    int n, m;    cin &gt;&gt; n &gt;&gt; m;    for(int i &#x3D; 1;i &lt;&#x3D; n;i++) p[i] &#x3D; i;    for(int i &#x3D; 1;i &lt;&#x3D; m;i++) &#123;        char ch[2];        int a, b;        scanf(&quot;%s%d%d&quot;, ch, &amp;a, &amp;b);        if(ch[0] &#x3D;&#x3D; &#39;M&#39;) p[find(a)] &#x3D; find(b);        else &#123;            if(find(a) &#x3D;&#x3D; find(b)) cout &lt;&lt; &quot;Yes&quot; &lt;&lt; endl;            else cout &lt;&lt; &quot;No&quot; &lt;&lt; endl;        &#125;    &#125;    return 0;&#125;</code></pre><p>从这道题上，完美体现了并查集的两个基本操作了，我们再来看看一道进阶题(其实难度也是简单<code>hh</code>)</p><h3 id="题目：连通块中点的数量"><a href="#题目：连通块中点的数量" class="headerlink" title="题目：连通块中点的数量"></a>题目：连通块中点的数量</h3><p>给定一个包含 <code>n</code> 个点（编号为 1∼<code>n</code>）的无向图，初始时图中没有边。</p><p>现在要进行 <code>m</code> 个操作，操作共有三种：</p><ol><li><code>C a b</code>，在点 <code>a</code> 和点 <code>b</code> 之间连一条边，<code>a</code> 和 <code>b</code> 可能相等；</li><li><code>Q1 a b</code>，询问点 <code>a</code> 和点 <code>b</code> 是否在同一个连通块中，<code>a</code> 和 <code>b</code> 可能相等；</li><li><code>Q2 a</code>，询问点 <code>a</code> 所在连通块中点的数量；</li></ol><p><strong>输入格式</strong></p><p>第一行输入整数 <code>n</code> 和 <code>m</code>。</p><p>接下来 <code>m</code> 行，每行包含一个操作指令，指令为 <code>C a b</code>，<code>Q1 a b</code> 或 <code>Q2 a</code> 中的一种。</p><p><strong>输出格式</strong></p><p>对于每个询问指令 <code>Q1 a b</code>，如果 <code>a</code> 和 <code>b</code> 在同一个连通块中，则输出 <code>Yes</code>，否则输出 <code>No</code>。</p><p>对于每个询问指令 <code>Q2 a</code>，输出一个整数表示点 <code>a</code> 所在连通块中点的数量</p><p>每个结果占一行。</p><p><strong>数据范围</strong></p><p>1≤<code>n</code>,<code>m</code>≤105</p><p><strong>输入样例：</strong></p><pre class="line-numbers language-none"><code class="language-none">5 5C 1 2Q1 1 2Q2 1C 2 5Q2 5</code></pre><p><strong>输出样例：</strong></p><pre class="line-numbers language-none"><code class="language-none">Yes23</code></pre><h4 id="算法分析-1"><a href="#算法分析-1" class="headerlink" title="算法分析"></a>算法分析</h4><p>这道题跟第一题相比，其实就多了一个判断连通块中点的数量，如题目标题所说，那么，其实我们只要再添加一个数组用来记录每一个数所在的树里面的节点的个数就好了，初始值就设置为1</p><p>首先，初始化 + 区间压缩</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;#include&lt;algorithm&gt;using namespace std;const int N &#x3D; 100010;int p[N], sum[N];int find(int x)&#123;    if(p[x]!&#x3D;x) p[x] &#x3D; find(p[x]);    return p[x];&#125;int main()&#123;    int n, m;    cin &gt;&gt; n &gt;&gt; m;    for(int i &#x3D; 1;i &lt;&#x3D; n;i++) p[i] &#x3D; i, sum[i] &#x3D; 1;    for(int i &#x3D; 1;i &lt;&#x3D; m;i++)    &#123;        string s;        int a, b;        cin &gt;&gt; s;        &#x2F;&#x2F;条件判断    &#125;    return 0;&#125;</code></pre><p>然后，就是对于三种情况进行分别的判断了</p><p>第一种情况，在<code>a</code>和<code>b</code>之间连一条边，<code>a</code>和<code>b</code>可能相等</p><p>​    那么也就是说，<code>a</code>和<code>b</code>可能是在一个根节点里面，在一个根节点的话就不用管了，那我们的判断条件就是看它们的根节点是否相等</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">if(s &#x3D;&#x3D; &quot;C&quot;) &#123;cin &gt;&gt; a &gt;&gt; b;    &#x2F;&#x2F;找到a和b各自的根节点a &#x3D; find(a), b &#x3D; find(b);    &#x2F;&#x2F;如果根节点不同if(a !&#x3D; b) &#123;        &#x2F;&#x2F;让a的根节点改变p[a] &#x3D; b;        &#x2F;&#x2F;b所在的数里面的总的点数加上原来a所在的树里面的节点数sum[b] +&#x3D; sum[a];&#125;&#125;</code></pre><p>第二种情况，询问点 <code>a</code> 和点 <code>b</code> 是否在同一个连通块中，<code>a</code> 和 <code>b</code> 可能相等</p><p>​    同理，只要看看a和b的根节点是否一样就可以了</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">else if(s &#x3D;&#x3D; &quot;Q1&quot;) &#123;cin &gt;&gt; a &gt;&gt; b;    if(find(a) &#x3D;&#x3D; find(b)) cout &lt;&lt; &quot;Yes&quot; &lt;&lt; endl;    else cout &lt;&lt; &quot;No&quot; &lt;&lt; endl;&#125;</code></pre><p>第三种情况，询问点 <code>a</code> 所在连通块中点的数量</p><p>​    那么就是输出a所在树的点的数量</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">else &#123;cin &gt;&gt; a;cout &lt;&lt; sum[find(a)] &lt;&lt; endl;&#125;</code></pre><h4 id="总代码-1"><a href="#总代码-1" class="headerlink" title="总代码"></a>总代码</h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">if(s &#x3D;&#x3D; &quot;C&quot;)&#123;      cin &gt;&gt; a &gt;&gt; b;      a &#x3D; find(a), b &#x3D; find(b);      if(a !&#x3D; b)       &#123;          p[a] &#x3D; b;          sum[b] +&#x3D; sum[a];      &#125;&#125;else if(s &#x3D;&#x3D; &quot;Q1&quot;)&#123;      cin &gt;&gt; a &gt;&gt; b;      if(find(a) &#x3D;&#x3D; find(b)) cout &lt;&lt; &quot;Yes&quot; &lt;&lt; endl;      else cout &lt;&lt; &quot;No&quot; &lt;&lt; endl;&#125;else&#123;      cin &gt;&gt; a;      cout &lt;&lt; sum[find(a)] &lt;&lt; endl;&#125;</code></pre><p>好了，既然已经写了两道题了，想必大家已经理解了并查集了吧，现在我们再来写一道简单题，(●ˇ∀ˇ●)</p><h3 id="题目：超市"><a href="#题目：超市" class="headerlink" title="题目：超市"></a>题目：超市</h3><p>超市里有 <code>N</code> 件商品，每件商品都有利润 <code>pi</code> 和过期时间 <code>di</code>，每天只能卖一件商品，过期商品不能再卖。</p><p>求合理安排每天卖的商品的情况下，可以得到的最大收益是多少。</p><p><strong>输入格式</strong></p><p>输入包含多组测试用例。</p><p>每组测试用例，以输入整数 <code>N</code> 开始，接下来输入 <code>N</code> 对 <code>pi</code> 和 <code>di</code>，分别代表第 <code>i</code> 件商品的利润和过期时间。</p><p>在输入中，数据之间可以自由穿插任意个空格或空行，输入至文件结尾时终止输入，保证数据正确。</p><p><strong>输出格式</strong></p><p>对于每组产品，输出一个该组的最大收益值。</p><p>每个结果占一行。</p><p><strong>数据范围</strong></p><p>0≤<code>N</code>≤10000,<br>1≤<code>pi</code>, <code>di</code>≤10000<br>最多有 14 组测试样例</p><p><strong>输入样例：</strong></p><pre class="line-numbers language-none"><code class="language-none">4  50 2  10 1   20 2   30 17  20 1   2 1   10 3  100 2   8 2   5 20  50 10</code></pre><p><strong>输出样例：</strong></p><pre class="line-numbers language-none"><code class="language-none">80185</code></pre><h4 id="算法分析-2"><a href="#算法分析-2" class="headerlink" title="算法分析"></a>算法分析</h4><p>​    浅看这道题，大致就可以分析出来，这道题考了贪心，我们要找在不过期的情况下的能够卖的最贵的物品，而且物品的价格与过期天数可以组成对组，我们可以考虑建立对组来写，而这道题会有多组输入，所以如果一个个判断会超时，所以我们采取并查集，对于每一个天数，都看成一棵树，当有超过一天的树被用过了后，就用并查集把用过的天数联系起来，这样可以更加方便查找我们没有用过的天数</p><h4 id="总代码-2"><a href="#总代码-2" class="headerlink" title="总代码"></a>总代码</h4><p>首先初始化</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;bits&#x2F;stdc++.h&gt;using namespace std;const int N &#x3D; 100010;typedef pair&lt;int, int&gt; PII;vector&lt;PII&gt; res;int p[N];int find(int x)&#123;    if(p[x]!&#x3D;x) p[x] &#x3D; find(p[x]);    return p[x];&#125;</code></pre><p>输入</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int main()&#123;    int n;    while(cin &gt;&gt; n)    &#123;    &#x2F;&#x2F;清空对组        res.clear();        &#x2F;&#x2F;maxx记录最后一天        int ans &#x3D; 0, maxx &#x3D; 0;        for(int i &#x3D; 0;i &lt; n;i++)         &#123;            int a, b;            cin &gt;&gt; a &gt;&gt; b;            &#x2F;&#x2F;对组默认的排序是从小到大，那么都开成负号的，再反过来就是从大到小了            res.push_back(&#123;-a, b&#125;);            maxx &#x3D; max(maxx, b);        &#125;        for(int i &#x3D; 0;i &lt;&#x3D; maxx;i++) p[i] &#x3D; i;        &#x2F;&#x2F;对组排序        sort(res.begin(), res.end());        &#x2F;&#x2F;算法实现()        cout &lt;&lt; ans &lt;&lt; endl;    &#125;    return 0;&#125;</code></pre><p>算法实现</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F;遍历res对组，由re记录for(auto re: res) &#123;    &#x2F;&#x2F;刚刚是通过负号排的序int l &#x3D; -re.first, r &#x3D; re.second;&#x2F;&#x2F;找到这一天的根节点int pt &#x3D; find(r);&#x2F;&#x2F;如果还有天数没有被使用if(pt &gt; 0) &#123;&#x2F;&#x2F;总数增加ans +&#x3D; l;&#x2F;&#x2F;改变这一天的根节点与上一天的节点相连p[pt] &#x3D; pt - 1;&#125;&#125;</code></pre><h3 id="课后练习"><a href="#课后练习" class="headerlink" title="课后练习"></a>课后练习</h3><p><code>P1230</code> 智力大冲浪<strong>(复习)</strong></p><p><a href="https://www.luogu.com.cn/problem/P1230#submit">P1230 智力大冲浪 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a></p><p>涉及算法：贪心 结构体排序 并查集 二叉堆</p><p><strong>注：这道题就是超市那道题的简单版，就相当于背板子喽</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;算法初见：并查集&quot;&gt;&lt;a href=&quot;#算法初见：并查集&quot; class=&quot;headerlink&quot; title=&quot;算法初见：并查集&quot;&gt;&lt;/a&gt;算法初见：并查集&lt;/h1&gt;&lt;p&gt;这是一个类似于树的，可以将两个元素合并起来的一种数据结构。   —-作者感觉的，(●ˇ∀ˇ●</summary>
      
    
    
    
    <category term="c++数据结构" scheme="https://pxyfcywl.github.io/categories/c-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="并查集" scheme="https://pxyfcywl.github.io/categories/c-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    
    
    <category term="并查集" scheme="https://pxyfcywl.github.io/tags/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    
  </entry>
  
  <entry>
    <title>寒假每日五题计划</title>
    <link href="https://pxyfcywl.github.io/posts/aaaaaaap.html"/>
    <id>https://pxyfcywl.github.io/posts/aaaaaaap.html</id>
    <published>2022-12-17T11:46:00.000Z</published>
    <updated>2023-01-20T09:19:25.453Z</updated>
    
    <content type="html"><![CDATA[<h1 id="寒假刷题计划"><a href="#寒假刷题计划" class="headerlink" title="寒假刷题计划"></a>寒假刷题计划</h1><p>计划范围</p><p>从12.17号开始，大约56天，每天去<strong>洛谷oj/acwing</strong>上找大概5道类似的题(题目难度在<strong>普及组</strong>或者<strong>普及/提高组</strong>)，每道题争取自己写出来，实在写不出来那只能就看大佬题解了嘤嘤嘤</p><p>注意算法的涉及：<strong>算法的涉及只是说可以用这种算法思路，不代表题目一定考这个</strong></p><p>下面是题库</p><h2 id="刷题题库"><a href="#刷题题库" class="headerlink" title="刷题题库"></a>刷题题库</h2><h3 id="12-17-排序算法"><a href="#12-17-排序算法" class="headerlink" title="12.17(排序算法)"></a>12.17(排序算法)</h3><p>1.<code>P5414 [YNOI2019]</code>排序</p><p><a href="https://www.luogu.com.cn/problem/P5414">P5414 [YNOI2019] 排序 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a></p><p>涉及算法: 冒泡排序法，线性<code>dp</code></p><p>2.<code>P7714 [EZEC-10]</code>排列排序</p><p><a href="https://www.luogu.com.cn/problem/P7714">P7714 「EZEC-10」排列排序 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a></p><p>涉及算法：双指针</p><p>3.<code>P1908</code> 逆序对</p><p><a href="https://www.luogu.com.cn/problem/P1908">P1908 逆序对 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a></p><p>涉及算法：归并排序</p><p>4.<code>P1230</code> 智力大冲浪</p><p><a href="https://www.luogu.com.cn/problem/P1230#submit">P1230 智力大冲浪 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a></p><p>涉及算法：贪心 结构体排序</p><p>5.<code>P1142</code> <strong>轰炸</strong></p><p><a href="https://www.luogu.com.cn/problem/P1142">P1142 轰炸 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a></p><p>涉及算法：数学 遍历</p><h3 id="12-18-排序算法"><a href="#12-18-排序算法" class="headerlink" title="12.18(排序算法)"></a>12.18(排序算法)</h3><p>6.<code>P1327</code> 数列排序</p><p><a href="https://www.luogu.com.cn/problem/P1327">P1327 数列排序 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a></p><p>涉及算法：快速排序 地图</p><p>7.<code>P1177</code> 【模板】快速排序</p><p><a href="https://www.luogu.com.cn/problem/P1177">P1177 【模板】快速排序 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a></p><p>涉及算法：快速排序</p><p>8.<code>P1223</code> 排队接水</p><p><a href="https://www.luogu.com.cn/problem/P1223">P1223 排队接水 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a></p><p>涉及算法：结构体快排 高精度(用double)</p><p>9.<code>P1716</code> 双调序列</p><p><a href="https://www.luogu.com.cn/problem/P1716">P1716 双调序列 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a></p><p>涉及算法：排序 双指针</p><p>10.<code>P5412 [YNOI2019]</code> 排队</p><p><a href="https://www.luogu.com.cn/problem/P5412">P5412 [YNOI2019] 排队 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a></p><p>涉及算法：排序 双指针</p><h3 id="12-19-二分"><a href="#12-19-二分" class="headerlink" title="12.19(二分)"></a>12.19(二分)</h3><p>11.<code>P7993 [USACO21DEC]</code> <code>Lonely Photo B</code></p><p><a href="https://www.luogu.com.cn/problem/P7993">P7993 [USACO21DEC] Lonely Photo B - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a></p><p>涉及算法：枚举 乘法原理</p><p>12.<code>P1258</code> 小车问题</p><p><a href="https://www.luogu.com.cn/problem/P1258">P1258 小车问题 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a></p><p>涉及算法：数学 二分</p><p>13.<code>P1678</code> 烦恼的高考志愿</p><p><a href="https://www.luogu.com.cn/problem/P1678">P1678 烦恼的高考志愿 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a></p><p>涉及算法：二分</p><p>14.<code>P1102</code> A-B 数对</p><p><a href="https://www.luogu.com.cn/problem/P1102">P1102 A-B 数对 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a></p><p>涉及算法：二分 </p><h3 id="12-20-高精度"><a href="#12-20-高精度" class="headerlink" title="12.20(高精度)"></a>12.20(高精度)</h3><p><strong>python 可以不学(python默认无限精度)</strong></p><p>15.<code>P1601</code> <code>A+B</code> Problem</p><p><a href="https://www.luogu.com.cn/problem/P1601">P1601 A+B Problem（高精） - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a></p><p>涉及算法：高精度 容器 字符串</p><p>16.<code>P2142</code> 高精度减法</p><p><a href="https://www.luogu.com.cn/problem/P2142">P2142 高精度减法 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a></p><p>涉及算法：高精度 容器 字符串</p><p>17.<code>P1480</code> <code>A/B</code> Problem</p><p><a href="https://www.luogu.com.cn/problem/P1480">P1480 A/B Problem - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a></p><p>涉及算法：高精度 容器 字符串</p><p>18.<code>P1303</code> <code>A*B</code> Problem</p><p><a href="https://www.luogu.com.cn/problem/P1303">P1303 A*B Problem - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a></p><p>涉及算法：高精度 容器 字符串</p><p>19.<code>P1009</code> <code>[NOIP1998 普及组]</code> <strong>阶乘之和</strong></p><p><a href="https://www.luogu.com.cn/problem/P1009">P1009 [NOIP1998 普及组] 阶乘之和 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a></p><p>涉及算法：高精度 容器 字符串</p><h3 id="12-21-前缀和"><a href="#12-21-前缀和" class="headerlink" title="12.21(前缀和)"></a>12.21(前缀和)</h3><p>20.<code>P1147</code> 连续自然数和</p><p><a href="https://www.luogu.com.cn/problem/P1147#submit">P1147 连续自然数和 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a></p><p>涉及算法：暴力 枚举 二分 数学 模拟</p><p>21.<code>P8772</code> <code>[蓝桥杯 2022 省 A]</code> 求和</p><p><a href="https://www.luogu.com.cn/problem/P8772">P8772 [蓝桥杯 2022 省 A] 求和 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a></p><p>涉及算法：一维前缀和</p><p>22.<code>P3397</code> 地毯</p><p><a href="https://www.luogu.com.cn/problem/P3397">P3397 地毯 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a></p><p>涉及算法：二维差分</p><p>23.<code>P6568</code> <code>[NOI Online #3 提高组]</code> 水壶</p><p><a href="https://www.luogu.com.cn/problem/P6568">P6568 [NOI Online #3 提高组] 水壶 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a></p><p>涉及算法：一维前缀和</p><p>24.<code>P6625</code> <code>[省选联考 2020 B 卷]</code> 卡牌游戏</p><p><a href="https://www.luogu.com.cn/problem/P6625">P6625 [省选联考 2020 B 卷] 卡牌游戏 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a></p><p>涉及算法：一维前缀和</p><h3 id="12-22-差分"><a href="#12-22-差分" class="headerlink" title="12.22(差分)"></a>12.22(差分)</h3><p>25.<code>P2249</code> <code>【深基13.例1】</code>查找</p><p><a href="https://www.luogu.com.cn/problem/P2249">P2249 【深基13.例1】查找 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a></p><p>涉及算法：二分</p><p>26.<code>P1824</code> 进击的奶牛</p><p><a href="https://www.luogu.com.cn/problem/P1824">P1824 进击的奶牛 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a></p><p>涉及算法：二分</p><p>27.<code>P1115</code> 最大子段和</p><p><a href="https://www.luogu.com.cn/problem/P1115">P1115 最大子段和 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a></p><p>涉及算法：线性<code>dp</code> 滚动数组</p><p>28.<code>P8218</code> <code>【深进1.例1】</code>求区间和</p><p><a href="https://www.luogu.com.cn/problem/P8218">P8218 【深进1.例1】求区间和 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a></p><p>涉及算法：一维前缀和</p><p>29.<code>P1719</code> 最大加权矩形</p><p><a href="https://www.luogu.com.cn/problem/P1719">P1719 最大加权矩形 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a></p><p>涉及算法：二维前缀和 枚举</p><h3 id="12-23-双指针"><a href="#12-23-双指针" class="headerlink" title="12.23(双指针)"></a>12.23(双指针)</h3><p>30.<code>P1207</code> <code>[USACO1.2]</code>双重回文数 <code>Dual Palindromes</code></p><p><a href="https://www.luogu.com.cn/problem/P1207">P1207 [USACO1.2]双重回文数 Dual Palindromes - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a></p><p>涉及算法：双指针</p><p><strong>(由于洛谷上的双指针标记上只有5题，下面3题来自牛客/acwing)</strong></p><p>31.<code>799.</code> 最长连续不重复子序列</p><p><a href="https://www.acwing.com/problem/content/801/">799. 最长连续不重复子序列 - AcWing题库</a></p><p>涉及算法：双指针</p><p>32.<code>800.</code> 数组元素的目标和</p><p><a href="https://www.acwing.com/problem/content/802/">800. 数组元素的目标和 - AcWing题库</a></p><p>涉及算法：双指针</p><p>33.<code>2816.</code> 判断子序列</p><p><a href="https://www.acwing.com/problem/content/2818/">2816. 判断子序列 - AcWing题库</a></p><h3 id="12-24-位运算"><a href="#12-24-位运算" class="headerlink" title="12.24(位运算)"></a>12.24(位运算)</h3><p>34.<code>P1100</code> 高低位交换</p><p><a href="https://www.luogu.com.cn/problem/P1100">P1100 高低位交换 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a></p><p>涉及算法：位运算</p><p>35.<code>P1226</code> <code>【模板】</code>快速幂||取余运算</p><p><a href="https://www.luogu.com.cn/problem/P1226">P1226 【模板】快速幂||取余运算 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a></p><p>涉及算法：欧拉降幂</p><p>36.<code>801.</code>二进制中1的个数</p><p><a href="https://www.acwing.com/problem/content/803/">801. 二进制中1的个数 - AcWing题库</a></p><p>涉及算法：位运算</p><p>37.<code>P8845</code> <code>[传智杯 #4 初赛]</code> 小卡和质数</p><p><a href="https://www.luogu.com.cn/problem/P8845">P8845 [传智杯 #4 初赛] 小卡和质数 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a></p><p>涉及算法：脑筋急转弯(质数里面<strong>只有1和2异或是1，其它都不是</strong>)</p><p>38.</p><h3 id="12-26-区间合并"><a href="#12-26-区间合并" class="headerlink" title="12.26(区间合并)"></a>12.26(区间合并)</h3><p>39.<code>P1628</code> 合并序列</p><p><a href="https://www.luogu.com.cn/problem/P1628">P1628 合并序列 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a></p><p>涉及算法：字符串(<code>string</code>中的<code>find</code>用法) (<code>find</code>比较的是指定字符串的<strong>前n个字符</strong>是否正确)</p><p>40.<code>P8649</code> <code>[蓝桥杯 2017 省 B]</code>k 倍区间</p><p><a href="https://www.luogu.com.cn/problem/P8649">P8649 [蓝桥杯 2017 省 B] k 倍区间 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a></p><p>涉及算法：前缀和 取模运算</p><p>41.<code>P1157</code> 组合的输出</p><p><a href="https://www.luogu.com.cn/problem/P1157#submit">P1157 组合的输出 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a></p><p>涉及算法：容器 宽度优先搜索</p><p>42.<code>803.</code> 区间合并</p><p><a href="https://www.acwing.com/activity/content/problem/content/837/">AcWing 803. 区间合并 - AcWing</a></p><p>涉及算法：区间合并</p><h3 id="12-27-离散化"><a href="#12-27-离散化" class="headerlink" title="12.27(离散化)"></a>12.27(离散化)</h3><p>43.<code>802.</code> 区间和</p><p><a href="https://www.acwing.com/activity/content/problem/content/836/">AcWing 802. 区间和 - AcWing</a></p><p>涉及算法：离散化</p><p>44<code>P1496</code> 火烧赤壁</p><p><a href="https://www.luogu.com.cn/problem/P1496">P1496 火烧赤壁 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a></p><p>涉及算法：区间合并</p><p>45.<code>3400.</code>统计次数</p><p><a href="https://www.acwing.com/activity/content/problem/content/7873/">AcWing 3400. 统计次数 - AcWing</a></p><p>涉及算法：枚举</p><p>46.</p><p>47.</p><h3 id="12-28-单链表"><a href="#12-28-单链表" class="headerlink" title="12.28(单链表)"></a>12.28(单链表)</h3><p>48.<code>4645.</code> 选数异或</p><p><a href="https://www.acwing.com/problem/content/description/4648/">4645. 选数异或 - AcWing题库</a></p><p>涉及算法：线段树 <code>st</code>表</p><p>49.<code>4652.</code> 纸张尺寸</p><p><a href="https://www.acwing.com/problem/content/4655/">4652. 纸张尺寸 - AcWing题库</a></p><p>涉及算法：无</p><p>50.<code>826.</code> 单链表</p><p><a href="https://www.acwing.com/problem/content/828/">826. 单链表 - AcWing题库</a></p><p>涉及算法：单链表</p><p>51.</p><p>52.</p><h3 id="12-29-双链表"><a href="#12-29-双链表" class="headerlink" title="12.29(双链表)"></a>12.29(双链表)</h3><p>53.<code>4818.</code> 奶牛大学</p><p><a href="https://www.acwing.com/problem/content/4821/">4818. 奶牛大学 - AcWing题库</a></p><p>涉及算法：排序 枚举</p><p>54.</p><p>55.</p><p>56.</p><p>57.</p><h3 id="12-30-栈"><a href="#12-30-栈" class="headerlink" title="12.30(栈)"></a>12.30(栈)</h3><p>58.<code>3443.</code>学分绩点</p><p><a href="https://www.acwing.com/problem/content/description/3446/">3443. 学分绩点 - AcWing题库</a></p><p>涉及算法：模拟</p><p>59.</p><p>60.</p><p>61.</p><p>62.</p><h3 id="12-31-队列"><a href="#12-31-队列" class="headerlink" title="12.31(队列)"></a>12.31(队列)</h3><p>63.<code>4366.</code> 上课睡觉</p><p><a href="https://www.acwing.com/problem/content/description/4369/">4366. 上课睡觉 - AcWing题库</a></p><p>涉及算法：数学 质数和约数 枚举</p><p>64.</p><p>65.</p><p>66.</p><p>67.</p><h3 id="1-1-单调栈"><a href="#1-1-单调栈" class="headerlink" title="1.1(单调栈)"></a>1.1(单调栈)</h3><p>68.<code>830.</code> 单调栈</p><p><a href="https://www.acwing.com/problem/content/832/">830. 单调栈 - AcWing题库</a></p><p>涉及算法：单调栈</p><p>69.<code>P1877 [HAOI2012]</code> <strong>音量调节</strong></p><p><a href="https://www.luogu.com.cn/problem/P1877#submit">P1877 [HAOI2012] 音量调节 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a></p><p>涉及算法：动态<code>dp</code> 背包问题</p><p>70.<code>600.</code> 仰视奶牛</p><p><a href="https://www.acwing.com/problem/content/602/">600. 仰视奶牛 - AcWing题库</a></p><p>涉及算法：单调栈</p><p>71.<code>1574.</code>接雨水</p><p><a href="https://www.acwing.com/problem/content/1576/">1574. 接雨水 - AcWing题库</a></p><p>涉及算法：单调栈</p><p>72.<code>1575.</code> 盛水最多的容器</p><p><a href="https://www.acwing.com/problem/content/1577/">1575. 盛水最多的容器 - AcWing题库</a></p><p>涉及算法：单调栈 双指针</p><h3 id="1-2-1-3-单调队列-kmp"><a href="#1-2-1-3-单调队列-kmp" class="headerlink" title="1.2-1.3(单调队列/kmp)"></a>1.2-1.3(单调队列/<code>kmp</code>)</h3><p>73.<code>154.</code> 滑动窗口</p><p><a href="https://www.acwing.com/activity/content/problem/content/868/">AcWing 154. 滑动窗口 - AcWing</a></p><p>涉及算法：单调队列</p><p>74.<code>135.</code> 最大子序和</p><p><a href="https://www.acwing.com/problem/content/137/">135. 最大子序和 - AcWing题库</a></p><p>涉及算法：单调队列 前缀和</p><p>75.<code>599.</code> 发射站</p><p><a href="https://www.acwing.com/problem/content/601/">599. 发射站 - AcWing题库</a></p><p>涉及算法：单调队列</p><p>76.<code>651.</code> 逛画展</p><p><a href="https://www.acwing.com/problem/content/653/">651. 逛画展 - AcWing题库</a></p><p>涉及算法：单调队列</p><p>77.<code>652.</code> 切蛋糕</p><p><a href="https://www.acwing.com/problem/content/654/">652. 切蛋糕 - AcWing题库</a></p><p>涉及算法：单调队列 前缀和(与74题类型一样，只是多了一个判断条件)</p><p>78.<code>4644.</code>求和</p><p><a href="https://www.acwing.com/problem/content/description/4647/">4644. 求和 - AcWing题库</a></p><p>涉及算法：前缀和</p><h3 id="1-4-kmp"><a href="#1-4-kmp" class="headerlink" title="1.4(kmp)"></a>1.4(<code>kmp</code>)</h3><p>79.<code>4653.</code> 数位排序</p><p><a href="https://www.acwing.com/problem/content/4656/">4653. 数位排序 - AcWing题库</a></p><p>涉及算法：排序</p><p>80.<code>831.</code> <code>KMP</code>字符串</p><p><a href="https://www.acwing.com/problem/content/833/">831. KMP字符串 - AcWing题库</a></p><p>涉及算法：<code>kmp</code>算法</p><p>81.<code>141.</code> 周期</p><p><a href="https://www.acwing.com/problem/content/143/">141. 周期 - AcWing题库</a></p><p>涉及算法：<code>kmp</code>算法</p><p>82.<code>1000.</code> 动物园</p><p><a href="https://www.acwing.com/problem/content/1002/">1000. 动物园 - AcWing题库</a></p><p>涉及算法：<code>kmp</code>算法</p><h3 id="1-5-trie字典树"><a href="#1-5-trie字典树" class="headerlink" title="1.5(trie字典树)"></a>1.5(<code>trie</code>字典树)</h3><p>83.<code>AcWing 835.</code> <code>Trie</code>字符串统计`</p><p><a href="https://www.acwing.com/activity/content/problem/content/883/">AcWing 835. Trie字符串统计 - AcWing</a></p><p>涉及算法：Trie</p><p>84.<code>AcWing 143</code>. 最大异或对</p><p><a href="https://www.acwing.com/activity/content/problem/content/884/">AcWing 143. 最大异或对 - AcWing</a></p><p>涉及算法：Trie</p><p>85.<code>4655.</code> 重新排序</p><p><a href="https://www.acwing.com/problem/content/4658/">4655. 重新排序 - AcWing题库</a></p><p>涉及算法：前缀和 差分 结构体排序</p><p>86.<code>142.</code> 前缀统计</p><p><a href="https://www.acwing.com/problem/content/144/">142. 前缀统计 - AcWing题库</a></p><p>涉及算法：Trie</p><p>87.<code>161.</code> 电话列表</p><p><a href="https://www.acwing.com/problem/content/163/">161. 电话列表 - AcWing题库</a></p><p>涉及算法：Trie</p><h3 id="1-7-并查集"><a href="#1-7-并查集" class="headerlink" title="1.7(并查集)"></a>1.7(并查集)</h3><p>88.<code>836.</code> 合并集合</p><p><a href="https://www.acwing.com/problem/content/description/838/">836. 合并集合 - AcWing题库</a></p><p>涉及算法：并查集</p><p>89.<code>837.</code> 连通块中点的数量</p><p><a href="https://www.acwing.com/problem/content/description/839/">837. 连通块中点的数量 - AcWing题库</a></p><p>涉及算法：并查集</p><p>90.<code>240.</code> 食物链</p><p><a href="https://www.acwing.com/problem/content/242/">240. 食物链 - AcWing题库</a></p><p>涉及算法：并查集</p><p>91.<code>145.</code> 超市</p><p><a href="https://www.acwing.com/problem/content/description/147/">145. 超市 - AcWing题库</a></p><p>涉及算法：并查集 二叉堆 贪心</p><p>92.<code>P1230</code> 智力大冲浪<strong>(复习)</strong></p><p><a href="https://www.luogu.com.cn/problem/P1230#submit">P1230 智力大冲浪 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a></p><p>涉及算法：贪心 结构体排序 并查集 二叉堆</p><h3 id="1-9-线性dp"><a href="#1-9-线性dp" class="headerlink" title="1.9 线性dp"></a>1.9 线性<code>dp</code></h3><p>93.<code>4656.</code> 技能升级</p><p><a href="https://www.acwing.com/problem/content/4659/">4656. 技能升级 - AcWing题库</a></p><p>涉及算法：无</p><p>94.<code>898.</code> 数字三角形</p><p><a href="https://www.acwing.com/problem/content/900/">898. 数字三角形 - AcWing题库</a></p><p>涉及算法：线性<code>dp</code></p><p>95.<code>895.</code> 最长上升子序列</p><p><a href="https://www.acwing.com/problem/content/897/">895. 最长上升子序列 - AcWing题库</a></p><p>涉及算法：线性<code>dp</code></p><p>96.<code>897.</code> 最长公共子序列</p><p><a href="https://www.acwing.com/problem/content/899/">897. 最长公共子序列 - AcWing题库</a></p><p>涉及算法：线性<code>dp</code></p><p>97.<code>895.</code> 最长上升子序列<strong>(变式)</strong></p><p><strong>要求：求出最大上升子序列个数的同时求出这个序列的每一个值</strong></p><p>涉及算法：线性<code>dp</code></p><h3 id="1-10-codeforce练习"><a href="#1-10-codeforce练习" class="headerlink" title="1.10 codeforce练习()"></a>1.10 <code>codeforce</code>练习()</h3><p>98.<code>Gardener and the Capybaras</code></p><p><a href="https://codeforces.com/contest/1775/problem/A2">Gardener and the Capybaras</a></p><p>涉及算法：暴力 字符串</p><p>99.<code>Gardener and the Array</code></p><p><a href="https://codeforces.com/contest/1775/problem/B">Gardener and the Array</a></p><p>100.<code>Interesting Sequence</code></p><p><a href="https://codeforces.com/contest/1775/problem/C">Interesting Sequence</a></p><p>涉及算法：位运算</p><p>1.<code>The Human Equation</code></p><p><a href="https://m1.codeforces.com/contest/1775/problem/E">The Human Equation</a></p><h3 id="1-11-堆"><a href="#1-11-堆" class="headerlink" title="1.11(堆)"></a>1.11(堆)</h3><p>2.<code>4454.</code> 未初始化警告</p><p><a href="https://www.acwing.com/problem/content/4457/">4454. 未初始化警告 - AcWing题库</a></p><p>涉及算法：模拟</p><p>3.<code>4509.</code> 归一化处理</p><p><a href="https://www.acwing.com/problem/content/4512/">4509. 归一化处理 - AcWing题库</a></p><p>涉及算法：<code>none</code></p><p>4.<code>838.</code> 堆排序</p><p><a href="https://www.acwing.com/problem/content/840/">838. 堆排序 - AcWing题库</a></p><p>涉及算法：堆</p><p>5.<code>839.</code> 模拟堆</p><p><a href="https://www.acwing.com/problem/content/841/">839. 模拟堆 - AcWing题库</a></p><p>涉及算法：堆</p><p>6.<code>2041.</code> 干草堆</p><p><a href="https://www.acwing.com/problem/content/2043/">2041. 干草堆 - AcWing题库</a></p><p>涉及算法：差分</p><h3 id="1-12-哈希表"><a href="#1-12-哈希表" class="headerlink" title="1.12(哈希表)"></a>1.12(哈希表)</h3><p>7.<code>4699.</code> 如此编码</p><p><a href="https://www.acwing.com/problem/content/4702/">4699. 如此编码 - AcWing题库</a></p><p>涉及算法：<code>none</code></p><p>8.<code>840.</code> 模拟散列表</p><p><a href="https://www.acwing.com/problem/content/842/">840. 模拟散列表 - AcWing题库</a></p><p>涉及算法：哈希表</p><p>9.<code>841.</code> 字符串哈希</p><p><a href="https://www.acwing.com/problem/content/843/">841. 字符串哈希 - AcWing题库</a></p><p>涉及算法：哈希表</p><p>10.<code>425.</code> 明明的随机数</p><p><a href="https://www.acwing.com/problem/content/427/">425. 明明的随机数 - AcWing题库</a></p><p>涉及算法：哈希表 排序</p><p>11.<code>831</code>. KMP字符串</p><p><a href="https://www.acwing.com/problem/content/833/">831. KMP字符串 - AcWing题库</a></p><p>涉及算法：哈希表 <code>KMP</code></p><p>12.<code>1582.</code> 买还是不买</p><p><a href="https://www.acwing.com/problem/content/1584/">1582. 买还是不买 - AcWing题库</a></p><p>涉及算法：哈希表 模拟</p><h3 id="1-13-哈希表"><a href="#1-13-哈希表" class="headerlink" title="1.13(哈希表)"></a>1.13(哈希表)</h3><p>13.<code>137.</code> <strong>雪花雪花雪花</strong></p><p><a href="https://www.acwing.com/problem/content/139/">137. 雪花雪花雪花 - AcWing题库</a></p><p>涉及算法：哈希表 字符串</p><p>14.<code>4700.</code>何以包邮？</p><p><a href="https://www.acwing.com/problem/content/description/4703/">4700. 何以包邮？ - AcWing题库</a></p><p>涉及算法：01背包问题</p><p>15.<code>591.</code> 国家领导者</p><p><a href="https://www.acwing.com/problem/content/description/593/">591. 国家领导者 - AcWing题库</a></p><p>涉及算法：哈希表 字符串的输入输出</p><p>16.<code>1532.</code> 找硬币</p><p><a href="https://www.acwing.com/problem/content/1534/">1532. 找硬币 - AcWing题库</a></p><p>涉及算法：哈希表 双指针</p><p>17.<code>1534.</code> 字符串减法</p><p><a href="https://www.acwing.com/problem/content/1536/">1534. 字符串减法 - AcWing题库</a></p><p>涉及算法：哈希表</p><h3 id="1-14-dfs"><a href="#1-14-dfs" class="headerlink" title="1.14(dfs)"></a>1.14(<code>dfs</code>)</h3><p>18.<code>4455.</code> 出行计划</p><p><a href="https://www.acwing.com/problem/content/4458/">4455. 出行计划 - AcWing题库</a></p><p>涉及算法：<code>none</code></p><p>19.<code>842.</code> 排列数字</p><p><a href="https://www.acwing.com/problem/content/844/">842. 排列数字 - AcWing题库</a></p><p>涉及算法：<code>dfs</code></p><p>20.<code>843.</code> n-皇后问题</p><p><a href="https://www.acwing.com/problem/content/845/">843. n-皇后问题 - AcWing题库</a></p><p>涉及算法：<code>dfs</code></p><p>21.<code>165.</code> 小猫爬山</p><p><a href="https://www.acwing.com/problem/content/167/">165. 小猫爬山 - AcWing题库</a></p><p>涉及算法：<code>dfs</code></p><p>22.<code>1026.</code> 乘积最大</p><p><a href="https://www.acwing.com/problem/content/1028/">1026. 乘积最大 - AcWing题库</a></p><p>涉及算法：<code>dfs</code></p><h3 id="1-15-bfs"><a href="#1-15-bfs" class="headerlink" title="1.15(bfs)"></a>1.15(<code>bfs</code>)</h3><p>23.<code>844.</code> 走迷宫</p><p><a href="https://www.acwing.com/problem/content/846/">844. 走迷宫 - AcWing题库</a></p><p>涉及算法：<code>bfs</code></p><p>24.<code>845.</code> 八数码</p><p><a href="https://www.acwing.com/problem/content/847/">845. 八数码 - AcWing题库</a></p><p>涉及算法：<code>bfs</code></p><p>25.<code>24.</code>机器人的运动范围</p><p><a href="https://www.acwing.com/problem/content/22/">24. 机器人的运动范围 - AcWing题库</a></p><p>涉及算法：<code>bfs</code></p><p>26.<code>188.</code> 武士风度的牛</p><p><a href="https://www.acwing.com/problem/content/description/190/">188. 武士风度的牛 - AcWing题库</a></p><p>涉及算法：<code>bfs</code></p><h3 id="1-16-牛客寒训"><a href="#1-16-牛客寒训" class="headerlink" title="1.16(牛客寒训)"></a>1.16(牛客寒训)</h3><p>27.<code>World Final? World Cup! (I)</code></p><p><a href="https://ac.nowcoder.com/acm/contest/46800/A">A-World Final? World Cup! (I)_2023牛客寒假算法基础集训营1 (nowcoder.com)</a></p><p>涉及算法：<code>none</code></p><p>28.现在是，学术时间</p><p><a href="https://ac.nowcoder.com/acm/contest/46800/C">C-现在是，学术时间 (I)_2023牛客寒假算法基础集训营1 (nowcoder.com)</a></p><p>涉及算法：<code>none</code></p><p>29.本题主要考察了<code>DFS</code></p><p><a href="https://ac.nowcoder.com/acm/contest/46800/H">H-本题主要考察了DFS_2023牛客寒假算法基础集训营1 (nowcoder.com)</a></p><p>涉及算法：<code>dfs</code> <code>none</code> 贪心</p><p>30.本题主要考察了运气</p><p><a href="https://ac.nowcoder.com/acm/contest/46800/L">L-本题主要考察了运气_2023牛客寒假算法基础集训营1 (nowcoder.com)</a></p><p>涉及算法：数学</p><p>31.本题主要考察了<code>dp</code></p><p><a href="https://ac.nowcoder.com/acm/contest/46800/K">K-本题主要考察了dp_2023牛客寒假算法基础集训营1 (nowcoder.com)</a></p><p>涉及算法：背包<code>dp</code></p><p>32.现在是，学术时间 <code>(II)</code></p><p><a href="https://ac.nowcoder.com/acm/contest/46800/D">D-现在是，学术时间 (II)_2023牛客寒假算法基础集训营1 (nowcoder.com)</a></p><p>涉及算法：数学</p><p>33.本题主要考察了找规律</p><p><a href="https://ac.nowcoder.com/acm/contest/46800/M">M-本题主要考察了找规律_2023牛客寒假算法基础集训营1 (nowcoder.com)</a></p><p>涉及算法：背包<code>dp</code></p><h3 id="1-17-01背包"><a href="#1-17-01背包" class="headerlink" title="1.17(01背包)"></a>1.17(01背包)</h3><p>34.<code>4510.</code>寻宝！大冒险！</p><p><a href="https://www.acwing.com/problem/content/4513/">4510. 寻宝！大冒险！ - AcWing题库</a></p><p>涉及算法：数学</p><p>35.<code>2.</code> 01背包问题 </p><p><a href="https://www.acwing.com/problem/content/2/">2. 01背包问题 - AcWing题库</a></p><p>涉及算法：背包<code>dp</code></p><p>36.<code>4700.</code> 何以包邮？</p><p><a href="https://www.acwing.com/problem/content/4703/">4700. 何以包邮？ - AcWing题库</a></p><p>涉及算法：背包dp</p><p>37.<code>278.</code> 数字组合</p><p><a href="https://www.acwing.com/problem/content/280/">278. 数字组合 - AcWing题库</a></p><p>涉及算法：背包<code>dp</code></p><p>38.<code>423.</code> 采药</p><p><a href="https://www.acwing.com/problem/content/425/">423. 采药 - AcWing题库</a></p><p>涉及算法：背包<code>dp</code></p><p>39.<code>426.</code> 开心的金明</p><p><a href="https://www.acwing.com/problem/content/428/">426. 开心的金明 - AcWing题库</a></p><p>涉及算法：背包<code>dp</code></p><p>40.<code>4498.</code> 指针</p><p><a href="https://www.acwing.com/problem/content/description/4501/">4498. 指针 - AcWing题库</a></p><p>涉及算法：背包<code>dp</code></p><h3 id="1-18-牛客寒训"><a href="#1-18-牛客寒训" class="headerlink" title="1.18(牛客寒训)"></a>1.18(牛客寒训)</h3><p>1.<code>Tokitsukaze</code> <code>and</code> <code>a+b=n</code></p><p><a href="https://ac.nowcoder.com/acm/contest/46810/A">A-Tokitsukaze and a+b=n (easy)_2023牛客寒假算法基础集训营2 (nowcoder.com)</a></p><p>涉及算法：<code>none</code></p><p>2.<code>Tokitsukaze</code> <code>and</code> <code>a+b=n</code></p><p><a href="https://ac.nowcoder.com/acm/contest/46810/B">B-Tokitsukaze and a+b=n (medium)_2023牛客寒假算法基础集训营2 (nowcoder.com)</a></p><p>涉及算法：前缀和</p><p>3.<code>Tokitsukaze</code> <code>and</code> <code>a+b=n</code></p><p><a href="https://ac.nowcoder.com/acm/contest/46810/C">C-Tokitsukaze and a+b=n (hard)_2023牛客寒假算法基础集训营2 (nowcoder.com)</a></p><p>涉及算法：前缀和 差分</p><p>4.<code>Tokitsukaze</code> <code>and</code> <code>Energy Tree</code></p><p><a href="https://ac.nowcoder.com/acm/contest/46810/D">D-Tokitsukaze and Energy Tree_2023牛客寒假算法基础集训营2 (nowcoder.com)</a></p><p>涉及算法：树的遍历</p><p>5.<code>Tokitsukaze</code> <code>and</code> <code>Sum of MxAb</code></p><p><a href="https://ac.nowcoder.com/acm/contest/46810/J">J-Tokitsukaze and Sum of MxAb_2023牛客寒假算法基础集训营2 (nowcoder.com)</a></p><p>涉及算法：前缀和</p><p>6.<code>Tokitsukaze</code> <code>and``K-Sequence</code></p><p><a href="https://ac.nowcoder.com/acm/contest/46810/H">H-Tokitsukaze and K-Sequence_2023牛客寒假算法基础集训营2 (nowcoder.com)</a></p><p>7.<code>Tokitsukaze</code> <code>and</code> <code>Three</code> <code>Integers</code></p><p><a href="https://ac.nowcoder.com/acm/contest/46810/L">L-Tokitsukaze and Three Integers_2023牛客寒假算法基础集训营2 (nowcoder.com)</a></p><h3 id="1-19-完全背包"><a href="#1-19-完全背包" class="headerlink" title="1.19(完全背包)"></a>1.19(完全背包)</h3><p>48.<code>4728.</code> 乘方</p><p><a href="https://www.acwing.com/problem/content/4731/">4728. 乘方 - AcWing题库</a></p><p>涉及算法：快速幂</p><p>49.<code>3422.</code> 左孩子右兄弟</p><p><a href="https://www.acwing.com/activity/content/problem/content/7976/">AcWing 3422. 左孩子右兄弟 - AcWing</a></p><p>涉及算法：贪心 树形<code>dp</code></p><p>50.<code>3.</code> 完全背包问题</p><p><a href="https://www.acwing.com/problem/content/3/">3. 完全背包问题 - AcWing题库</a></p><p>涉及算法：背包<code>dp</code></p><p>51.<code>279.</code> 自然数拆分</p><p><a href="https://www.acwing.com/problem/content/281/">279. 自然数拆分 - AcWing题库</a></p><p>涉及算法：背包<code>dp</code></p><p>52.<code>587.</code> 吃蛋糕</p><p><a href="https://www.acwing.com/problem/content/589/">587. 吃蛋糕 - AcWing题库</a></p><p>涉及算法：背包<code>dp</code></p><h3 id="1-20-牛客寒训"><a href="#1-20-牛客寒训" class="headerlink" title="1.20(牛客寒训)"></a>1.20(牛客寒训)</h3><p>53.<code>A-</code>不断减损的时间</p><p><a href="https://ac.nowcoder.com/acm/contest/46811/A">A-不断减损的时间_2023牛客寒假算法基础集训营3 (nowcoder.com)</a></p><p>54.<code>C-</code>忽远忽近的距离</p><p><a href="https://ac.nowcoder.com/acm/contest/46811/C">C-忽远忽近的距离_2023牛客寒假算法基础集训营3 (nowcoder.com)</a></p><p>55.<code>D-</code>宿命之间的对决</p><p><a href="https://ac.nowcoder.com/acm/contest/46811/D">D-宿命之间的对决_2023牛客寒假算法基础集训营3 (nowcoder.com)</a></p><p>56.<code>E-</code>公平守望的灯塔</p><p><a href="https://ac.nowcoder.com/acm/contest/46811/E">E-公平守望的灯塔_2023牛客寒假算法基础集训营3 (nowcoder.com)</a></p><p>57.<code>F-</code>迎接终结的寂灭</p><p><a href="https://ac.nowcoder.com/acm/contest/46811/F">F-迎接终结的寂灭_2023牛客寒假算法基础集训营3 (nowcoder.com)</a></p><h3 id="1-21-多重背包"><a href="#1-21-多重背包" class="headerlink" title="1.21(多重背包)"></a>1.21(多重背包)</h3><p>58.<code>4.</code> 多重背包问题 I </p><p><a href="https://www.acwing.com/problem/content/4/">4. 多重背包问题 I - AcWing题库</a></p><p>涉及算法：背包<code>dp</code></p><p>59.<code>5.</code> 多重背包问题 II </p><p><a href="https://www.acwing.com/problem/content/5/">5. 多重背包问题 II - AcWing题库</a></p><p>涉及算法：背包<code>dp</code></p><p>60.<code>6.</code> 多重背包问题 III </p><p><a href="https://www.acwing.com/problem/content/6/">6. 多重背包问题 III - AcWing题库</a></p><p>涉及算法：背包<code>dp</code></p><p>61.<code>318.</code> 划分大理石</p><p><a href="https://www.acwing.com/problem/content/320/">318. 划分大理石 - AcWing题库</a></p><p>涉及算法：背包<code>dp</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;寒假刷题计划&quot;&gt;&lt;a href=&quot;#寒假刷题计划&quot; class=&quot;headerlink&quot; title=&quot;寒假刷题计划&quot;&gt;&lt;/a&gt;寒假刷题计划&lt;/h1&gt;&lt;p&gt;计划范围&lt;/p&gt;
&lt;p&gt;从12.17号开始，大约56天，每天去&lt;strong&gt;洛谷oj/acwing&lt;/st</summary>
      
    
    
    
    <category term="刷题题库" scheme="https://pxyfcywl.github.io/categories/%E5%88%B7%E9%A2%98%E9%A2%98%E5%BA%93/"/>
    
    
    <category term="刷题题库" scheme="https://pxyfcywl.github.io/tags/%E5%88%B7%E9%A2%98%E9%A2%98%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>单链表</title>
    <link href="https://pxyfcywl.github.io/posts/aaaaaaao.html"/>
    <id>https://pxyfcywl.github.io/posts/aaaaaaao.html</id>
    <published>2022-12-15T02:51:34.000Z</published>
    <updated>2023-01-08T03:35:30.454Z</updated>
    
    <content type="html"><![CDATA[<h1 id="单链表从出生到毕业"><a href="#单链表从出生到毕业" class="headerlink" title="单链表从出生到毕业"></a>单链表从出生到毕业</h1><p>​    今天，我们来学习一下链表的基本操作，与其相关联的操作大致有9种，我们一个一个来讲解，来揭开链表的神秘面纱</p><h2 id="单链表的操作"><a href="#单链表的操作" class="headerlink" title="单链表的操作"></a>单链表的操作</h2><p>首先，我们要先定义一个单链表，怎样才可以定义一个单链表呢？</p><p>我们要创建一个结构体，来存储需要的数据还有该数据指向的下一个节点，因为单链表是按照创建<code>malloc</code>动态分配内存给它的,我们也要动态的创建链表</p><h3 id="第一步-创建一个链表并初始化"><a href="#第一步-创建一个链表并初始化" class="headerlink" title="第一步 创建一个链表并初始化"></a>第一步 创建一个链表并初始化</h3><p>​    我们要创建一个结构体来描绘我们所需要的对象，比如说，我们想描述一个游戏账号，他的<code>id</code>是多少，他在游戏中取得名字叫什么，这些信息需要我们来创建一个链表来依次查询的</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F;头文件#include&lt;iostream&gt;#include&lt;algorithm&gt;using namespace std;const int N &#x3D; 1001;typedef long long ll;&#x2F;&#x2F;创建一个存储信息的结构体typedef struct List &#123;    &#x2F;&#x2F;游戏idint id;    &#x2F;&#x2F;游戏名char name[10];&#125;sum[N];&#x2F;&#x2F;名字</code></pre><p>现在，我们的结构体创建完了，我们下一个目的就是要把两个结构体之间进行一个链接，那么要怎么链接呢？这就需要我们再额外定义一个指针变量来记录该数据指向的下一个数据是什么。因此，我们可以再创建一个新的结构体来将<strong>我们刚才定义的结构体</strong>和<strong>刚才定义的结构体所指向的下一个结构体的指针</strong>所存储下来</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">typedef struct Node &#123;    &#x2F;&#x2F;刚才定义的结构体sum list;    &#x2F;&#x2F;list所指向的下一个节点的指针struct Node* next;&#125;node;&#x2F;&#x2F;名字</code></pre><p>要创建一个链表，我们还需要定义一个头指针，这个头指针是链表的核心，我们之后的所有对链表的操作都是基于头指针来进行的</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F;创建一个头指针, 意思是 _head指向的下一个节点是NULL node* _head &#x3D; NULL;&#x2F;&#x2F;_head的意思是 —————— _head指向的下一个节点</code></pre><p>欸，为什么头指针后面是<strong>NULL</strong>啊，这主要是因为在目前为止，我们并没有对这个链表做什么操作，仅仅只是将这个链表给创建了出来罢了，对其的初始化就是头节点指向空</p><pre class="line-numbers language-图" data-language="图"><code class="language-图">_head ----&gt; NULL</code></pre><p>到目前为止，链表就已经被我们创建好了</p><h3 id="第二步-链表的插入操作"><a href="#第二步-链表的插入操作" class="headerlink" title="第二步 链表的插入操作"></a>第二步 链表的插入操作</h3><p>好的，这一步开始，就意味着我们可以对我们刚才那个链表做手脚了，嘿嘿(●ˇ∀ˇ●)</p><p>我们想给纯洁无暇的链表打上我们的颜色，那么我们需要在链表里面添加一些东西，那我们该怎么往里面添加东西呢，我们可以从链表的头部或者尾部添加呢</p><p>下面，我来依次介绍这两种插入的方法捏~(￣▽￣)~*</p><h4 id="头插法"><a href="#头插法" class="headerlink" title="头插法"></a>头插法</h4><p>我们想从链表的头部添加一些东西，那我们就要从改变<code>_head</code>开始，一开始，我们的<code>_head</code>指向的下一个节点是<code>NULL</code>,既然是从头开始添加元素，那么我们就不能再让我们的<code>_head</code>指向<code>NULL</code>力</p><p>一开始的样子是这样的</p><pre class="line-numbers language-图" data-language="图"><code class="language-图">_head ---&gt; NULL</code></pre><p>我们想让它变成的样子</p><pre class="line-numbers language-图" data-language="图"><code class="language-图">_head ---&gt; pnewnode1 ---&gt; NULL</code></pre><p>那么，现在我们就要先动态生成一个新节点捏</p><p>节点生成！</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F;生成一个新的节点node* pnewnode &#x3D; (node*)malloc(sizeof(node));&#x2F;&#x2F;让新节点的尾部始终是指向NULL的，防止出错pnewnode-&gt;next &#x3D; NULL;</code></pre><p>我们生成了一个新的节点，现在我们就要让<code>_head</code>指向我们的新节点，怎么办呢，要像这样</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">_head &#x3D; pnewnode;</code></pre><p>现在，我们的<code>_head</code>指向的下一个节点就是<code>pnewnode</code>啦</p><p>那么，如果说，我们还想再次添加一个新节点，用头插法的形式，但是这次的链表已经不是一开始的样子了，那我们又该怎么修改呢？</p><p>现在的样子</p><pre class="line-numbers language-none"><code class="language-none">_head ---&gt; pnewnode1 ---&gt; NULL</code></pre><p>我们想让他变成的样子</p><pre class="line-numbers language-图" data-language="图"><code class="language-图">_head ---&gt; pnewnode2 ---&gt; pnewnode1 ---&gt; NULL</code></pre><p>同理，我们还是要先生成一个新节点捏，怎么生成新节点就如上述所示</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F;生成一个新的节点node* pnewnode &#x3D; (node*)malloc(sizeof(node));&#x2F;&#x2F;让新节点的尾部始终是指向NULL的，防止出错pnewnode-&gt;next &#x3D; NULL;</code></pre><p>不过，现在的<code>_head</code>指向的下一个节点是<code>pnewnode1</code>，我们想让它指向<code>pnewnode2</code>，我们需要先把我们添加的新节点<code>pnewnode2</code>指向我们的<code>_head</code>指向的下一个节点<code>pnewnode1</code></p><p>像这样</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">pnewnode-&gt;next &#x3D; _head;</code></pre><p>然后，再让我们的<code>_head</code>指向的下一个节点指向<code>pnewnode2</code></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">_head &#x3D; pnewnode;</code></pre><p>这样一来，我们就又添加一个新的节点力(●ˇ∀ˇ●)</p><p>总的头插法如下</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void add_to_head()&#123;    &#x2F;&#x2F;动态分配内存node* pnewnode &#x3D; (node*)malloc(sizeof(node));pnewnode-&gt;next &#x3D; NULL;&#x2F;&#x2F;情况1if (_head &#x3D;&#x3D; NULL) &#123;_head &#x3D; pnewnode;&#125;    &#x2F;&#x2F;情况2else &#123;pnewnode-&gt;next &#x3D; _head;_head &#x3D; pnewnode;&#125;    &#x2F;&#x2F;输入cin &gt;&gt; pnewnode-&gt;list-&gt;id &gt;&gt; pnewnode-&gt;list-&gt;name;&#125;</code></pre><h4 id="尾插法"><a href="#尾插法" class="headerlink" title="尾插法"></a>尾插法</h4><p>可是，只学会一种头插法还不够，我们还要继续学习，继续改造我们的单链表，于是乎，你开始研究尾插法</p><p>现在，我们默认我们的单链表还是没有被改造的，它还是纯白无暇的</p><p>现在的样子</p><pre class="line-numbers language-图" data-language="图"><code class="language-图">_head ---&gt; NULL</code></pre><p>我们想让它成为的样子(注意，我们是从尾部插入的哦这次)</p><pre class="line-numbers language-none"><code class="language-none">_head ---&gt; pnewnode1 ---&gt; NULL</code></pre><p>同理，我们动态分配内存</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F;生成一个新的节点node* pnewnode &#x3D; (node*)malloc(sizeof(node));&#x2F;&#x2F;让新节点的尾部始终是指向NULL的，防止出错pnewnode-&gt;next &#x3D; NULL;</code></pre><p>节点生成！</p><p>不过嘛，我们现在的单链表是纯洁的，其实就是我们往<code>_head</code>后面添加一个新节点罢了</p><p>如头插法一般即可</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">_head &#x3D; pnewnode;</code></pre><p>但是呢，我们想再次从尾部添加一个新的节点，这时候就不可以像头插法那样进行插入了，我们得采用别的办法</p><p>链表有一个性质，就是说，它不像数组那样，你不可以通过下标这种手段直接访问到指定数组的元素，链表需要我们从头节点依次遍历，直到我们找到最后一个有效的元素，像这样</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F;定义一个指向头节点的指针node* p &#x3D; _head;&#x2F;&#x2F;依次遍历while (p-&gt;next !&#x3D; NULL) p &#x3D; p-&gt;next;</code></pre><p>这里的判断就会有人有疑问了，为什么是<code>p-&gt;next!=NULL</code>，为什么不是<code>p!=NULL</code>呢，你想，如果我们判断<code>p!=NULL</code>结束的话,那么，我们现在的<code>p</code>节点就是<code>NULL</code>了，它不是我们链表里面的节点啊，所以说，我们是要<code>p-&gt;next!=NULL</code></p><p>然后，再让<code>p</code>指向我们所创建的新节点即可</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">p-&gt;next &#x3D; pnewnode;</code></pre><p>这样一来，我们就又添加一个新的节点力(●ˇ∀ˇ●)</p><p>总的尾插法如下：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void add_to_fail()&#123;node* pnewnode &#x3D; (node*)malloc(sizeof(node));pnewnode-&gt;next &#x3D; NULL;if (_head &#x3D;&#x3D; NULL) &#123;_head &#x3D; pnewnode;&#125;else &#123;node* p &#x3D; _head;while (p-&gt;next !&#x3D; NULL) p &#x3D; p-&gt;next;p-&gt;next &#x3D; pnewnode;&#125;cin &gt;&gt; pnewnode-&gt;list-&gt;id &gt;&gt; pnewnode-&gt;list-&gt;name;&#125;</code></pre><h4 id="指定位置插入"><a href="#指定位置插入" class="headerlink" title="指定位置插入"></a>指定位置插入</h4><p>在学会了头插法插入和尾插法插入后，你感觉还不够，还不能继续改变这个单链表，于是呢，你又想到了一个新方法，想要在某个指定的id后面插入新的节点，这时候该怎么办呢？~(￣▽￣)~*</p><p><strong>（下面的讲解默认能够找到指定的位置，总代码上的不是捏）</strong></p><p>这时候，其实和上面两种插入方法差不多，尤其是在单链表纯洁无暇的时候是一样的</p><p>第一步，还是新建一个新节点</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F;生成一个新的节点node* pnewnode &#x3D; (node*)malloc(sizeof(node));&#x2F;&#x2F;让新节点的尾部始终是指向NULL的，防止出错pnewnode-&gt;next &#x3D; NULL;</code></pre><p>节点生成！</p><p>在链表只有<code>_head</code>节点的时候，我们只要<code>_head</code>指向我们新建的<code>pnewnode</code>节点即可</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">_head &#x3D; pnewnode;</code></pre><p>但是，如果我们已经改变了这个单链表呢？</p><p>现在，这个单链表长这样</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">_head ---&gt; 1 ---&gt; 2 ---&gt; 3 ---&gt; NULL&#x2F;&#x2F;1 2 3指的是节点id</code></pre><p>我们想在id为2的后面插入一个新节点，想变成下面这种样子</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">_head ---&gt; 1 ---&gt; 2 ---&gt; 4 ---&gt; 3 ----&gt; NULL</code></pre><p>这时候，我们就要改变2号节点的<code>next</code>指针的指向了，我们要让<strong>2号节点的<code>next</code>指针</strong>指向<strong>我们的新节点</strong>，<strong>我们的新节点的<code>next</code>指针</strong>指向<strong>2号节点的<code>next</code>指针原来指向的</strong></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F;新建一个p指向头节点node* p &#x3D; _head;while (p !&#x3D; NULL) &#123;    &#x2F;&#x2F;找到了id为2的节点if (p-&gt;list-&gt;id &#x3D;&#x3D; k) &#123;&#x2F;&#x2F;我们的新节点的next指针指向2号节点的next指针原来指向的pnewnode-&gt;next &#x3D; p-&gt;next;&#x2F;&#x2F;2号节点的next指针指向我们的新节点p-&gt;next &#x3D; pnewnode;        cin &gt;&gt; pnewnode-&gt;list-&gt;id &gt;&gt; pnewnode-&gt;list-&gt;name;        return;    &#125;    &#x2F;&#x2F;没找到就继续遍历p &#x3D; p-&gt;next;&#125;</code></pre><p>如此一来，我们就做到了指定位置插入新的节点力，好耶ヽ(✿ﾟ▽ﾟ)ノ</p><p>总的方法如下：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F;指定位置插入(id为k的后面插入新节点)void add(int k)&#123;node* pnewnode &#x3D; (node*)malloc(sizeof(node));pnewnode-&gt;next &#x3D; NULL;    node* p &#x3D; _head;while (p !&#x3D; NULL) &#123;        &#x2F;&#x2F;找到了这么一个值if (p-&gt;list-&gt;id &#x3D;&#x3D; k) &#123;            pnewnode-&gt;next &#x3D; p-&gt;next;p-&gt;next &#x3D; pnewnode;            cin &gt;&gt; pnewnode-&gt;list-&gt;id &gt;&gt; pnewnode-&gt;list-&gt;name;            return;        &#125;        &#x2F;&#x2F;没找到就继续遍历p &#x3D; p-&gt;next;&#125;&#125;</code></pre><h3 id="第三步-依次输出链表元素"><a href="#第三步-依次输出链表元素" class="headerlink" title="第三步 依次输出链表元素"></a>第三步 依次输出链表元素</h3><p>我们添加了一些元素进去，现在我们想看看，我们之前都添加过什么元素，那么我们就要对链表进行依次遍历，依次输出链表里面的元素呢</p><p>首先，我们要添加一个指向<code>_head</code>的指针</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">node* p &#x3D; _head;</code></pre><p>第二步，依次遍历链表</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">while (p !&#x3D; NULL) &#123;cout &lt;&lt; p-&gt;list-&gt;id &lt;&lt; &#39; &#39; &lt;&lt; p-&gt;list-&gt;name &lt;&lt; endl;&#x2F;&#x2F;p指向下一个节点p &#x3D; p-&gt;next;&#125;</code></pre><p>这样一来，我们就完成了链表输出操作了</p><p>注意哦，我们使用头插法和尾插法的输入输出是不同的</p><p>在我们使用头插法的时候</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">input1 tom2 mike3 jakeoutput3 jake2 mike1 tom</code></pre><p>在我们使用尾插法的时候</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">input1 tom2 mike3 jakeoutput1 tom2 mike3 jake</code></pre><p>总的输出输出法如下：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void printList()&#123;node* p &#x3D; _head;while (p !&#x3D; NULL) &#123;cout &lt;&lt; p-&gt;list-&gt;id &lt;&lt; &#39; &#39; &lt;&lt; p-&gt;list-&gt;name &lt;&lt; endl;p &#x3D; p-&gt;next;&#125;&#125;</code></pre><h3 id="第四步-删除指定的节点"><a href="#第四步-删除指定的节点" class="headerlink" title="第四步 删除指定的节点"></a>第四步 删除指定的节点</h3><p>欸，在一次添加节点的时候，你意识到，有一个节点你添加错误了，你不想要这个节点了，这时候，你又犯难了，我还没有学会怎么删除链表节点呢，怎么办~(￣▽￣)~*</p><p>好的，现在我们就来看看该怎么删除指定的节点吧</p><p>首先，我们还是要了解链表的特性，我们现在创立的单链表是动态链表，不是数组模拟链表，我们每插入一个新节点，就要从内存里面拿一部分空间来存储链表元素。所以，在我们不想要某个节点的时候，我们需要释放我们之前的动态内存</p><p>同理，我们还是要看我们删除的节点是什么地方的</p><p>第一种地方，头节点</p><p>假如说，你在第一次创建链表的时候第一个数据就搞错了，你想删除这部分数据，这时我们需要一个替代品来代替我们原先的数据</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F;p指向头节点 t作为替代品node* p &#x3D; _head, * t &#x3D; NULL;</code></pre><p>我们该怎么删掉节点呢？</p><p>还记得我们是怎么创建节点的嘛，我们是改变了某一个位置的节点，比如说</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">_head ---&gt; 3 ---&gt; 1 ---&gt; 2 ---&gt; NULL</code></pre><p>我们想删掉1这个位置，我们就需要3这个位置的<code>next</code>指针指向1这个位置的<code>next</code>指针,那么就变成这样</p><pre class="line-numbers language-图" data-language="图"><code class="language-图">     --------&gt;_head ---&gt; 3(  1 ---&gt; )2 ---&gt; NULL</code></pre><p>我们改变了3的<code>next</code>指针指向，让现在的链表里面去掉了1，但是1其实没有改变指向的，这时候，我们把1给释放掉就可以了</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F;删除头节点&#x2F;&#x2F;_head 是 我们要删掉的节点，指向_head的next指针 是 我们要改变指向的节点if (_head-&gt;list-&gt;id &#x3D;&#x3D; k) &#123;    &#x2F;&#x2F;t是我们要删除的节点t &#x3D; _head;    &#x2F;&#x2F;改变头节点的上一个节点的next指针的指向_head &#x3D; _head-&gt;next;free(t);&#125;&#x2F;&#x2F;删除一般情况else &#123;while (p-&gt;next !&#x3D; NULL) &#123;        &#x2F;&#x2F;p-&gt;next 是 我们要删掉的节点，p 是 我们要改变指向的节点 也是 p-&gt;next 的上一个节点if (p-&gt;next-&gt;list-&gt;id &#x3D;&#x3D; k) &#123;            &#x2F;&#x2F;t就是我们要删除的节点了t &#x3D; p-&gt;next;            &#x2F;&#x2F;改变p的next指针的指向p-&gt;next &#x3D; p-&gt;next-&gt;next;            &#x2F;&#x2F;释放我们不想要的节点free(t);break;&#125;p &#x3D; p-&gt;next;&#125;&#125;</code></pre><p>如此一来，我们就可以删除任意节点的元素了</p><p>总的代码如下：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F;删除节点(删除id为k的节点)void remove(int k)&#123;node* p &#x3D; _head, * t &#x3D; NULL;&#x2F;&#x2F;删除头节点if (_head-&gt;list-&gt;id &#x3D;&#x3D; k) &#123;t &#x3D; _head;_head &#x3D; _head-&gt;next;free(t);&#125;else &#123;while (p-&gt;next !&#x3D; NULL) &#123;if (p-&gt;next-&gt;list-&gt;id &#x3D;&#x3D; k) &#123;t &#x3D; p-&gt;next;p-&gt;next &#x3D; p-&gt;next-&gt;next;free(t);break;&#125;p &#x3D; p-&gt;next;&#125;&#125;&#125;</code></pre><h3 id="第五步-重新排序链表顺序"><a href="#第五步-重新排序链表顺序" class="headerlink" title="第五步 重新排序链表顺序"></a>第五步 重新排序链表顺序</h3><p>假如说，我们现在不满意我们现在的链表，我们想对我们的链表进行排序</p><p>我们现在的链表</p><pre class="line-numbers language-图" data-language="图"><code class="language-图">_head ---&gt; 5 ---&gt; 3 ---&gt; 1 ---&gt; 2 ---&gt; 4 ---&gt; NULL</code></pre><p>我们想让我们的链表变成的样子</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">_head ---&gt; 1 ---&gt; 2 ---&gt; 3 ---&gt; 4 ---&gt; 5 ---&gt; NULL</code></pre><p>还记得我们学习过的冒泡排序法/选择排序法吗？(这应该是大家学<code>for</code>循环都会遇见的一个经典循环了(作者不会嘤嘤嘤))</p><p>主要是由两个<code>for</code>循环进行的，一步一步进行筛选的</p><p>我们先定义几个变量，类似于冒泡排序</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">node* p &#x3D; _head, * t &#x3D; NULL, temp;</code></pre><p>然后，我们还是要判断一下的，如果这个链表是刚创建出来的，或者说只有一个新节点的，那么就不用排了，怎么排都一样</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">if (_head &#x3D;&#x3D; NULL || _head-&gt;next &#x3D;&#x3D; NULL) return;</code></pre><p>好了，现在我们可以进行排序了，这里写的是从小到大排序的，从大到小只要换一个符号就可以了</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">while (p-&gt;next !&#x3D; NULL) &#123;t &#x3D; p-&gt;next;while (t !&#x3D; NULL) &#123;if (p-&gt;list-&gt;id &gt; t-&gt;list-&gt;id) &#123;temp &#x3D; *p;*p &#x3D; *t;*t &#x3D; temp;temp.next &#x3D; p-&gt;next;p-&gt;next &#x3D; t-&gt;next;t-&gt;next &#x3D; temp.next;&#125;t &#x3D; t-&gt;next;&#125;p &#x3D; p-&gt;next;&#125;</code></pre><p>在进入了<code>if</code>语句后，就意味着两个变量要交换了，这时候就有人有疑问了，为什么要交换<code>next</code>指针啊，下面我来画个图，你就明白了</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F;没有交换前_head ---&gt; 5 ---&gt; 3 ---&gt; 1 ---&gt; 2 ---&gt; 4 ---&gt; NULL&#x2F;&#x2F;我们交换5和3节点,5是p，3是t&#x2F;&#x2F;开始5 &#x3D; 5 , 5-&gt;next &#x3D; 3;3 &#x3D; 3 , 3-&gt;next &#x3D; 1;&#x2F;&#x2F;变换一次现在的5 &#x3D; 原来的3 , 5-&gt;next &#x3D; 3;现在的3 &#x3D; 原来的5 , 3-&gt;next &#x3D; 1;&#x2F;&#x2F;变换两次现在的5 &#x3D; 原来的3 , 现在的5-&gt;next &#x3D; 1;现在的3 &#x3D; 原来的5 , 现在的3-&gt;next &#x3D; 原来的3;</code></pre><p>就是说，第一次变换中，5和3两个结构体只是结构体里面的值变了，但是它们的<code>next</code>指针的指向性没有变，所以第二次交换就是要我们把它们的<code>next</code>指针给改变掉，这才真正完成了交换</p><p>总的代码如下：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F;链表重排序(id从小到大排序)void rearrangement()&#123;node* p &#x3D; _head, * t &#x3D; NULL, temp;if (_head &#x3D;&#x3D; NULL || _head-&gt;next &#x3D;&#x3D; NULL) return;else &#123;while (p-&gt;next !&#x3D; NULL) &#123;t &#x3D; p-&gt;next;while (t !&#x3D; NULL) &#123;if (p-&gt;list-&gt;id &gt; t-&gt;list-&gt;id) &#123;temp &#x3D; *p;*p &#x3D; *t;*t &#x3D; temp;temp.next &#x3D; p-&gt;next;p-&gt;next &#x3D; t-&gt;next;t-&gt;next &#x3D; temp.next;&#125;t &#x3D; t-&gt;next;&#125;p &#x3D; p-&gt;next;&#125;&#125;&#125;</code></pre><h3 id="第六步-查询链表元素"><a href="#第六步-查询链表元素" class="headerlink" title="第六步 查询链表元素"></a>第六步 查询链表元素</h3><p>现在，我们想要查询某个指定的链表元素，其实呢，就跟我们的第三步，输出链表元素是一样的</p><p>第一步，我们先创建一个指向<code>_head</code>的指针</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">node* p &#x3D; _head;</code></pre><p>第二步，我们依次循环，去寻找我们想要的id</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">while (p !&#x3D; NULL) &#123;    &#x2F;&#x2F;找到了if (p-&gt;list-&gt;id &#x3D;&#x3D; k) &#123;cout &lt;&lt; &quot;YES&quot; &lt;&lt; endl;return;&#125;    &#x2F;&#x2F;没找到继续找p &#x3D; p-&gt;next;&#125;</code></pre><p>总的代码如下：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F;查询链表指定元素(搜索指定id)void search(int k)&#123;node* p &#x3D; _head;while (p !&#x3D; NULL) &#123;if (p-&gt;list-&gt;id &#x3D;&#x3D; k) &#123;cout &lt;&lt; &quot;YES&quot; &lt;&lt; endl;return;&#125;p &#x3D; p-&gt;next;&#125;&#125;</code></pre><h3 id="第七步-输出链表元素个数"><a href="#第七步-输出链表元素个数" class="headerlink" title="第七步 输出链表元素个数"></a>第七步 输出链表元素个数</h3><p>到了这里，我们又来学习链表的一个性质了，它不像数组，可以直接算出来有多少数组元素，它需要我们依次访问链表节点来一个一个计算，只是链表在内存中的存储不同于数组导致的，链表在内存中的存储是很乱的，只能通过一个个<code>next</code>指针来访问链表的下一个元素</p><p>第一步，我们先创建一个指向<code>_head</code>的指针，初始化一个变量用来记录元素</p><pre class="line-numbers language-none"><code class="language-none">int sum &#x3D; 0;node* p &#x3D; _head;</code></pre><p>第二步，遍历链表计算总数</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">while (p !&#x3D; NULL) &#123;sum++;p &#x3D; p-&gt;next;&#125;cout &lt;&lt; sum &lt;&lt; endl;</code></pre><p>总的代码如下:</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F;输出链表长度void length()&#123;int sum &#x3D; 0;node* p &#x3D; _head;while (p !&#x3D; NULL) &#123;sum++;p &#x3D; p-&gt;next;&#125;cout &lt;&lt; sum &lt;&lt; endl;&#125;</code></pre><h3 id="第八步-清空链表"><a href="#第八步-清空链表" class="headerlink" title="第八步 清空链表"></a>第八步 清空链表</h3><p>你觉得，你写的这个链表太臭了（恼，想要把这个链表给清空，重新回到那个纯洁无暇的空链表捏，在这一步，我们将会学会把整个链表给清除了</p><p>在第四步中，我们有学到如何把链表的指定节点给删除的操作，让我们来回忆一下</p><pre class="line-numbers language-图" data-language="图"><code class="language-图">_head ---&gt; 3 ---&gt; 1 ---&gt; 2 ---&gt; NULL</code></pre><p>我们在删除1这个节点的时候，我们要找到id为3的这个节点，再把3这个节点的<code>next</code>指针给指向2，那么我们清空链表就是把<code>_head</code>指向<code>NULL</code>就可以了，</p><p>但是，真的是这样吗？</p><p>我们现在制作的链表是动态存储数据的，也就是说，我们在清空链表的时候，我们也要把链表的元素在内存中的空间给释放掉才行，所以，我们又重新回到了链表的遍历操作，因为只有链表的遍历操作，我们才可以找到链表的下一个节点的位置，清空对应的内存</p><p>首先，我们先定义两个指针，其中一个用来指向链表的头节点</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">node* p &#x3D; _head,* t;</code></pre><p>其次，我们就需要依次遍历释放元素了</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">while(p!&#x3D;NULL) &#123;t &#x3D; p-&gt;next;free(p);p &#x3D; t;&#125;</code></pre><p>我们在释放内存前，需要先用一个指针记录下来<code>p</code>的<code>next</code>指针的指向，不然的话，我们在释放掉当前的<code>p</code>的内存后，我们就没有办法找到<code>p</code>的<code>next</code>指针的指向了，所以，我们要一个<code>t</code>指针来保存，把<code>p</code>释放掉后，再让<code>p = t</code></p><p><strong>链表遍历完了，内存也就释放完了</strong></p><p>总的代码如下：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F;链表清除void clear()&#123;node* p &#x3D; _head, *t;while (p !&#x3D; NULL) &#123;t &#x3D; p-&gt;next;free(p);p &#x3D; t;&#125;&#125;</code></pre><h3 id="第九步-反转链表"><a href="#第九步-反转链表" class="headerlink" title="第九步 反转链表"></a>第九步 反转链表</h3><p>我们清空了原来那个臭链表后，又写了一个新的链表，但是，这次我们想玩些不一样的，怎么个不一样呢，就是，我们把我们的链表给反过来，让头节点变到尾，让尾节点变到头</p><p>假设，我们写了一个新的链表</p><pre class="line-numbers language-图" data-language="图"><code class="language-图">_head ---&gt; 3 ---&gt; 1 ---&gt; 2 ---&gt; 4 ---&gt; NULL</code></pre><p>我们现在想让链表反转</p><pre class="line-numbers language-图" data-language="图"><code class="language-图">_head ---&gt; 4 ---&gt; 2 ---&gt; 1 ---&gt; 3 ---&gt; NULL</code></pre><p>欸，这该怎么办呢？</p><p>其实，这个就跟我们的链表排序大同小异，只是这次我们不按<code>id</code>的大小来排罢了</p><p>我们还是先创建两个节点</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">node* p &#x3D; _head,* t &#x3D; _head;</code></pre><p>现在，我们来想，我们想让链表反转，其实就是已知原来的链表的元素，对原来的链表自身重新进行了一次头插法，一开始，我们的链表已经告诉我们我们要按照什么顺序进行头插法了</p><p>一开始，我们看看我们的链表需不需要反转，如果它本身是空链表或者说只有一个元素在里面，那就没有必要进行反转了，怎么转都是一样的，因此，我们一开始要来判断一下，我们的链表是否需要反转</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F;链表不需要反转if (_head &#x3D;&#x3D; NULL || _head-&gt;next &#x3D;&#x3D; NULL) return;</code></pre><p>如果，我们的链表需要反转，那么，就要这么做</p><p>首先，我们要我们的3指向<code>NULL</code>，那么就要<code>p</code>的<code>next</code>指针先指向3,</p><p>再让<code>p</code>指向<code>NULL</code>,但是这里不是真的让<code>p</code>指向<code>NULL</code>，而是让<code>_head</code>的<code>next</code>指针指向<code>NULL</code>，至于为什么，等一下就知道了</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">p &#x3D; _head-&gt;next;_head-&gt;next &#x3D; NULL;</code></pre><p>现在，我们来对链表进行遍历，欸，现在我们用<code>p</code>来遍历链表是有效的，但是如果刚才我们直接让<code>p</code>去指向<code>NULL</code>的话，我们就不能让<code>p</code>来遍历链表了，而t是我们后面用来进行保留数据的操作的，所以用<code>t</code>来遍历不妥</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">while (p !&#x3D; NULL) &#123;t &#x3D; p-&gt;next;p-&gt;next &#x3D; _head;_head &#x3D; p;p &#x3D; t;&#125;</code></pre><p>上述代码的四行思路如下：</p><p>一开始，我们的链表长这样</p><pre class="line-numbers language-图" data-language="图"><code class="language-图">_head ---&gt; 3 ---&gt; 1 ---&gt; 2 ---&gt; 4 ---&gt; NULL</code></pre><p>在循环中的第一步结束后，我们的<code>t</code>现在在1的位置上，<code>p</code>在3的位置上，我们让<code>p</code>的<code>next</code>指针指向<code>_head</code>，也就是让我们的<code>p</code>的<code>next</code>指针指向了<code>NULL</code>，这时候，我们就把3和1转换过去了，第三步结束后，我们的<code>_head</code>到了现在3的位置，而<code>p</code>到了现在1的位置，在进入下一步循环后，第一步结束，我们的<code>t</code>的位置更新到原来的2的位置上了，这样一来，我们就做到了，遍历之前的链表上的每一个元素</p><p>总的代码如下：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F;链表反转void turn()&#123;node* p &#x3D; _head, * t &#x3D; _head;if (_head &#x3D;&#x3D; NULL || _head-&gt;next &#x3D;&#x3D; NULL) return;p &#x3D; _head-&gt;next;_head-&gt;next &#x3D; NULL;while (p !&#x3D; NULL) &#123;t &#x3D; p-&gt;next;p-&gt;next &#x3D; _head;_head &#x3D; p;p &#x3D; t;&#125;&#125;</code></pre><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>好了，到目前为止，我们就掌握了单链表的基本操作了，其它的困难操作都是由这九种的基础来扩展的，同时再加上了一些算法的范畴，所以牢记掌握这九种基本操作，对于之后的链表学习有很大的帮助哦，Ciallo～(∠・ω&lt; )⌒☆</p><p>当然，由于作者能力有限，如果读者找到了文章中的不够妥当或者生涩难懂的地方，还请告知我，我将会第一时间查询并修改我的错误之处，谢谢！<code>(qq1594463152)</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;单链表从出生到毕业&quot;&gt;&lt;a href=&quot;#单链表从出生到毕业&quot; class=&quot;headerlink&quot; title=&quot;单链表从出生到毕业&quot;&gt;&lt;/a&gt;单链表从出生到毕业&lt;/h1&gt;&lt;p&gt;​    今天，我们来学习一下链表的基本操作，与其相关联的操作大致有9种，我们一个一</summary>
      
    
    
    
    <category term="c++数据结构" scheme="https://pxyfcywl.github.io/categories/c-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="链表" scheme="https://pxyfcywl.github.io/categories/c-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%93%BE%E8%A1%A8/"/>
    
    <category term="单链表" scheme="https://pxyfcywl.github.io/categories/c-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%93%BE%E8%A1%A8/%E5%8D%95%E9%93%BE%E8%A1%A8/"/>
    
    
    <category term="单链表" scheme="https://pxyfcywl.github.io/tags/%E5%8D%95%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>字典序排序</title>
    <link href="https://pxyfcywl.github.io/posts/aaaaaaan.html"/>
    <id>https://pxyfcywl.github.io/posts/aaaaaaan.html</id>
    <published>2022-12-13T08:06:34.000Z</published>
    <updated>2022-12-13T15:56:50.153Z</updated>
    
    <content type="html"><![CDATA[<h1 id="字典序排序"><a href="#字典序排序" class="headerlink" title="字典序排序"></a>字典序排序</h1><p>​    在这次的文章中将会介绍关于字典序排序的一些内容(包括一道复盘题)，但是在讲述字典序题目前，我们先要知道什么是字典序，字典序是指按照<code>ascii</code>码值来进行排序的序列来形成一个有序的集合。</p><p>​    有个经典的例子，比如说这样一道题，有1，2，3这三个数，你要把它们所组成的三位数按照从小到大的顺序依次排列，想都不用想就知道可以排列成123，132，213，231，312，321这6种情况，但是放在程序中要怎么写呢，这就是我们要解决的问题，这道题可以用回溯算法，数组和宽度优先搜索来解决，对于每一个数字进行判断是否满足一定的要求，满足的话就放入一个新的序列，这就是字典序排序</p><h2 id="两个最简单的函数"><a href="#两个最简单的函数" class="headerlink" title="两个最简单的函数"></a>两个最简单的函数</h2><p>​    给我们指定5个数字，例如1 8 9 0 4，要找出这五个树中组成的某个数的上一个字典序对应的数是什么，通俗的说，就是告诉你18940后，你要立刻回答给我18904，这道题可以用一个字典序排序的函数来解决<code>prev_permutation()</code>这个函数就可以立刻对18940这个数进行排序，代码如下</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;#include&lt;algorithm&gt;using namespace std;int main()&#123;    int a[5] &#x3D; &#123;1,8,9,4,0&#125;;    prev_permutation(a,a+5);    for(int i &#x3D; 0;i &lt; 5;i++)&#123;        printf(&quot;%d&quot;,a[i]);    &#125;return 0;&#125;</code></pre><p>同理，还有一个函数<code>next_permutation()</code>函数可以告诉你18940的下一个字典序对应的数是什么,代码如下</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;#include&lt;algorithm&gt;using namespace std;int main()&#123;    int a[5] &#x3D; &#123;1,8,9,4,0&#125;;    next_permutation(a,a+5);    for(int i &#x3D; 0;i &lt; 5;i++)&#123;        printf(&quot;%d&quot;,a[i]);    &#125;return 0;&#125;</code></pre><h2 id="组合数排序"><a href="#组合数排序" class="headerlink" title="组合数排序"></a>组合数排序</h2><p>但是，在面对一些题目时，这个函数也帮不到你，比如这道</p><p>​    给定两个整数 <code>n</code>和 <code>k</code>，返回范围 [1, n] 中所有可能的 <code>k</code> 个数的组合。</p><p>你可以按 任何顺序 返回答案。</p><pre class="line-numbers language-none"><code class="language-none">示例 1：输入：n &#x3D; 4, k &#x3D; 2输出：[[2,4],[3,4],[2,3],[1,2],[1,3],[1,4],]</code></pre><p>在面对此题时，我们只能采取别的方法</p><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>首先，我们要定义一个<code>n</code>和<code>k</code>,同时我们要创建两个数组，一个用来记录每一种情况，一个用来把每一个情况存储起来</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;#include&lt;algorithm&gt;#include&lt;vector&gt;#include&lt;cstring&gt;using namespace std;const int N &#x3D; 100010;typedef long long ll;int n,k;&#x2F;&#x2F;记录当前情况vector&lt;int&gt; ans;&#x2F;&#x2F;存储每一种情况vector&lt;vector&lt;int&gt;&gt; cnt;void dfs(int n,int k,int u)&#123;    &#x2F;&#x2F;算法分析    check();&#125;int main()&#123;cin&gt;&gt;n&gt;&gt;k;    &#x2F;&#x2F;1指的是第一位数是1    dfs(n,k,1);    &#x2F;&#x2F;输出语法    cout&lt;&lt;?;    return 0;&#125;</code></pre><h3 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h3><p>现在，我们开始分析算法</p><p>我们通过例题可以知道，我们要找到的数是单调递增的，像12 23 34 14 这种，每个数从左到右的位数是单调递增的，所以我们要判断我们的数是否满足可以组成<code>k</code>位数</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F;判断是否可以组成k位数if(ans.size() + (n - u + 1) &lt; k)    return;&#x2F;&#x2F;进入循环则说明不可以找到组成k位数的了</code></pre><p>现在我们来分析怎样可以组成k位数</p><p>我们要先组12这个数，我们要看1有没有出现过</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F;没有出现过ans.push_back(u);&#x2F;&#x2F;进入下一个循环dfs(n,k,u+1);&#x2F;&#x2F;恢复现场ans.pop_back();</code></pre><p>如果我们无法判定2是否出现过，我们可以把不出现也放上去</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F;不选择当前的数直接下一个循环dfs(n,k,u+1);</code></pre><p>这样，选数的环节就已经搞定了</p><p>现在，我们要把选好的数的数组存起来</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F;保存所有的结果if(ans.size() &#x3D;&#x3D; k)&#123;cnt.push_back(ans);return;&#125;</code></pre><h3 id="得出结果"><a href="#得出结果" class="headerlink" title="得出结果"></a>得出结果</h3><p>输出</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int main()&#123;cin&gt;&gt;n&gt;&gt;k;    &#x2F;&#x2F;1指的是第一位数是1    dfs(n,k,1);    &#x2F;&#x2F;输出语法    int n &#x3D; cnt.size(),m &#x3D; cnt[0].size();    for(int i &#x3D; 0; i &lt; n;i++)&#123;        for(int j &#x3D; 0; j &lt; m;j++)&#123;            cout&lt;&lt;cnt[i][j];        &#125;        puts(&quot;&quot;);    &#125;    return 0;&#125;</code></pre><p>现在，我们再来介绍第二种题型</p><h2 id="全排列类排序"><a href="#全排列类排序" class="headerlink" title="全排列类排序"></a>全排列类排序</h2><p>给定一个不含重复数字的数组 <code>nums</code> ，返回其 所有可能的全排列 。你可以 <strong>按任意顺序</strong> 返回答案。</p> <pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">示例 1：输入：nums &#x3D; [1,2,3]输出：[[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]</code></pre><p>虽然题目是说可以任意顺序返回，但是我们可以写一个按照字典序返回的，同时还可以不需要<code>STL</code>中的vector容器(跑的实在是太快啦)</p><p><img src="/posts/aaaaaaan/image-20221213231828671.png" alt="image-20221213231828671"></p><p>第二个是我用<code>STL</code>写的，跑的巨慢，虽然思路贼简单(只要给我足够的内存，我一定可以跑出来)</p><p>我们来介绍一下<code>dfs</code>，利用宽度搜索算法的思路来写这道题(后面会给出这道题的核心代码的<code>STL</code>形式)</p><p>​    其实，思路和第一个一样，都是看一下这个数有没有被搜索过了，没有的话就放上去</p><p>我们先把初始量定义好</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;#include&lt;algorithm&gt;using namespace std;const int N &#x3D; 100010;typedef long long ll;int a[N],b[N];bool st[N];int n;void dfs(int u)&#123;&#x2F;&#x2F;算法设计;&#125;int main()&#123;cin&gt;&gt;n;for(int i &#x3D; 0;i &lt; n;i++)&#123;cin&gt;&gt;b[i];&#125;dfs(0);return 0;&#125;</code></pre><h3 id="算法设计"><a href="#算法设计" class="headerlink" title="算法设计"></a>算法设计</h3><p>首先，我们要判断现在是否满足u == n，是的话我们就可以输出一种情况了</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">if(u &#x3D;&#x3D; n)&#123;for(int i &#x3D; 0;i &lt; n;i++) &#123;printf(&quot;%d &quot;,a[i]);&#125;puts(&quot;&quot;);return;&#125;</code></pre><p>现在，我们要把满足的数一个一个输进去，但是在输进去前，我们要对数组进行排序</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int main()&#123;cin&gt;&gt;n;for(int i &#x3D; 0;i &lt; n;i++)&#123;cin&gt;&gt;b[i];&#125;sort(b,b+n);dfs(0);return 0;&#125;</code></pre><p>排序后，我们进入<code>dfs</code>，开始循环</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">for(int i &#x3D; 0;i &lt; n;i++)&#123;&#x2F;&#x2F;如果这个数没有被用过if(!st[i])&#123;&#x2F;&#x2F;说明被用过st[i] &#x3D; true;&#x2F;&#x2F;加入数组a[u] &#x3D; b[i];&#x2F;&#x2F;进入下一个循环dfs(u+1);&#x2F;&#x2F;恢复现场st[i] &#x3D; false;&#125;&#125;</code></pre><p>现在我们就把这道题解出来了</p><p>最后放出核心代码中的<code>stl</code>解法,使用的是回溯算法</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void dfs(vector&lt;vector&lt;int&gt;&gt;&amp; ans,vector&lt;int&gt;&amp; nums,int u,int len)&#123;    &#x2F;&#x2F;如果满足if(u &#x3D;&#x3D; len)&#123;        ans.push_back(nums);        return;    &#125;    &#x2F;&#x2F;插入数字    for(int i &#x3D; u;i &lt; len;i++)&#123;        &#x2F;&#x2F;交换        swap(nums[i],nums[u]);        &#x2F;&#x2F;进入下一个循环        dfs(ans,nums,u+1,len);        &#x2F;&#x2F;恢复现场        swap(nums[i],nums[u]);    &#125;&#125;vector&lt;vector&lt;int&gt;&gt; permute(vector&lt;int&gt;&amp; nums) &#123;    &#x2F;&#x2F;定义二维vector数组    vector&lt;vector&lt;int&gt;&gt; ans;    &#x2F;&#x2F;计算nums数组的长度    int len &#x3D; nums.size();    &#x2F;&#x2F;宽搜(回溯算法)    dfs(ans,nums,0,len);    &#x2F;&#x2F;返回二维数组    return ans;&#125;</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;字典序排序&quot;&gt;&lt;a href=&quot;#字典序排序&quot; class=&quot;headerlink&quot; title=&quot;字典序排序&quot;&gt;&lt;/a&gt;字典序排序&lt;/h1&gt;&lt;p&gt;​    在这次的文章中将会介绍关于字典序排序的一些内容(包括一道复盘题)，但是在讲述字典序题目前，我们先要知道什么</summary>
      
    
    
    
    <category term="c++算法" scheme="https://pxyfcywl.github.io/categories/c-%E7%AE%97%E6%B3%95/"/>
    
    <category term="字典序排序" scheme="https://pxyfcywl.github.io/categories/c-%E7%AE%97%E6%B3%95/%E5%AD%97%E5%85%B8%E5%BA%8F%E6%8E%92%E5%BA%8F/"/>
    
    
    <category term="字典序排序" scheme="https://pxyfcywl.github.io/tags/%E5%AD%97%E5%85%B8%E5%BA%8F%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>学期总结和寒假计划1</title>
    <link href="https://pxyfcywl.github.io/posts/aaaaaaam.html"/>
    <id>https://pxyfcywl.github.io/posts/aaaaaaam.html</id>
    <published>2022-12-13T07:10:38.000Z</published>
    <updated>2023-01-10T02:44:33.918Z</updated>
    
    <content type="html"><![CDATA[<h1 id="大一上的期度总结"><a href="#大一上的期度总结" class="headerlink" title="大一上的期度总结"></a>大一上的期度总结</h1><p>​    <code>emmm</code>，时隔了好多天，终于来更新我的小博客了，不过这次的更新不是增加了新的知识，而是总结一下大一上学期的时候学习的相关的程序设计内容(才，才不是摆烂欸)</p><p>​    记得在暑假的时候，高考考了572被工大的计科录取时，其实是比较开心的，毕竟一直想学点除了高中9科以外的一些内容，又因为比较好玩，这就想到了工大的计算机，但是大学城那边的分数太高了，最后被录取到了揭阳校区的计科</p><p>​    以上就是我和C语言邂逅的开端</p><h2 id="初识C语言"><a href="#初识C语言" class="headerlink" title="初识C语言"></a>初识C语言</h2><p>​    一开始，我对于这么语言是完全不会的，像什么<code>printf</code>啊<code>scanf</code>啊这些的东西，我打了一周才勉强记住了，又因为我之前几乎不用电脑，为此我还特地每天练习打字，打一篇语言文章啊之类的,当时加了一个揭阳这边的<code>acm</code>兴趣群,看到里面的人讨论的东西都好高级，大脑就在想着(哇，同是大一怎么差距这么大，我也想像你们一样强大)，于是暑假的时候就也简单的学习了一些C语言(记得是预习到了指针吧)，那段知识简直就是初学者我的噩梦(现在都不是很会那个…) ,有好多好多次我都想放弃了，想着直接开玩游戏算了</p><h2 id="转折"><a href="#转折" class="headerlink" title="转折"></a>转折</h2><p>​    说实话，这个转折其实好功利的来说。当时看到了当时就读大一下学期的那些<code>acm</code>队里面的队员，在蓝桥杯啊，挑战赛啊，天梯赛啊什么的这种全国赛事拿到好多好多奖，抱着我也想在大学拿奖的心情，我开始重新审视<code>C</code>语言这门学科(对的，当时的我完全是把它当作一门学科来学的)，发现其实它也挺好，因为好多好多游戏里面的源代码都是类似这种<code>C</code>语言的语言写出来的，当时的我就在想，等我在大学搞几个奖，到时候去游戏公司做程序员敲代码也不错，就抱着这种心情，我继续了我的<code>c</code>语言学习</p><h2 id="初识算法和数据结构"><a href="#初识算法和数据结构" class="headerlink" title="初识算法和数据结构"></a>初识算法和数据结构</h2><p>​    在浅学了一些C语言后，我打了一场21级的选拔赛暨22级新生赛(主要是选拔21级的新队员)，当时我抱着试试看的心情打了一场，感觉还好，在67个人里面可以排到19名，还打赢了好多大二的，其实当时的我是有一点小骄傲的，感觉自己还可以了，但到后面我才发现我真天真，在那场选拔赛中，22级的新生居然拿下了第一，第二，有6个22级的新生比我强。正式上c语言课的时候，我又了解到我们班有一位早就会python的大佬，听说已经开始学习算法了。那时的我对于算法是个什么东西是一点印象都没有的，只是感觉他们好厉害</p><p>​    于是，为了变得更强，我开始学习算法和数据结构，开始了解递归啊，快排啊，宽搜啊，贪心啊之类的算法，二叉树啊，链表啊，栈啊，队列啊这些数据结构，后面的学习也就是围绕这些来的</p><h2 id="22级acm选拔赛"><a href="#22级acm选拔赛" class="headerlink" title="22级acm选拔赛"></a>22级<code>acm</code>选拔赛</h2><p>​    就在10几天前，<code>acm</code>群上发出了选拔22级<code>acm</code>新队员的通知，当时的我看到了，那实在是一个热血沸腾啊，因为等这一刻等了实在是太久了,不过，在一开始的初赛上，我的表现不是太好，6道题在2小时内只写出来了1道，还好写的比较快，拿到了12名，但是前面有8个人<code>ac</code>出来了两题,这让我感到很慌张，有点担心能否进复赛，不过最后还是如愿以偿地打进复赛(由于8个人进复赛太少，主办方决定让写出一道题的也加入进去)，在复赛中千钧一发<code>ac</code>出了3题，最终以第三名的成绩加入了<code>acm</code>队</p><h2 id="如愿进入"><a href="#如愿进入" class="headerlink" title="如愿进入"></a>如愿进入</h2><p>​    最终，我加入了<code>acm</code>校队，但是在校队里面，我就是一个纯萌新(很多人都是提前好久就学了，要么就是高中打比赛的)，为了不在里面当垫底人，我还要继续努力对抗算法和数据结构，争取在寒假的时候学会基础算法，来面对3月的大比赛</p><h2 id="。"><a href="#。" class="headerlink" title="。"></a>。</h2><p>大一上学期的算法学习基本就到这里了，后面便是考试周了，寒假再战，加油啊，追梦人！</p><h1 id="寒假计划"><a href="#寒假计划" class="headerlink" title="寒假计划"></a>寒假计划</h1><h2 id="关于程序设计"><a href="#关于程序设计" class="headerlink" title="关于程序设计"></a>关于程序设计</h2><p>补题<br>每天4 - 6道题(洛谷，<code>acwing</code>, <code>codeforce</code>)<br>每2 - 3天复习一次基础算法内容</p><p>锻炼比赛思考能力<br>周六<code>acwing</code>比赛以及可以参加的<code>codeforce</code>比赛</p><h2 id="关于高数"><a href="#关于高数" class="headerlink" title="关于高数"></a>关于高数</h2><p>每天预习一个新的知识点</p><h2 id="关于英语"><a href="#关于英语" class="headerlink" title="关于英语"></a>关于英语</h2><p>听力练习(软件待定)<br>单词背诵<br>看哈利波特的书</p><h2 id="关于数模-如果有空"><a href="#关于数模-如果有空" class="headerlink" title="关于数模(如果有空)"></a>关于数模(如果有空)</h2><p>学习<code>MATLAB</code>和<code>SPSS</code><br>学习<code>latex</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;大一上的期度总结&quot;&gt;&lt;a href=&quot;#大一上的期度总结&quot; class=&quot;headerlink&quot; title=&quot;大一上的期度总结&quot;&gt;&lt;/a&gt;大一上的期度总结&lt;/h1&gt;&lt;p&gt;​    &lt;code&gt;emmm&lt;/code&gt;，时隔了好多天，终于来更新我的小博客了，不过这次</summary>
      
    
    
    
    <category term="寒暑假计划和期度总结" scheme="https://pxyfcywl.github.io/categories/%E5%AF%92%E6%9A%91%E5%81%87%E8%AE%A1%E5%88%92%E5%92%8C%E6%9C%9F%E5%BA%A6%E6%80%BB%E7%BB%93/"/>
    
    
    <category term="寒暑假计划和期度总结" scheme="https://pxyfcywl.github.io/tags/%E5%AF%92%E6%9A%91%E5%81%87%E8%AE%A1%E5%88%92%E5%92%8C%E6%9C%9F%E5%BA%A6%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>质数和合数</title>
    <link href="https://pxyfcywl.github.io/posts/aaaaaaal.html"/>
    <id>https://pxyfcywl.github.io/posts/aaaaaaal.html</id>
    <published>2022-11-29T08:52:42.000Z</published>
    <updated>2022-11-29T10:31:22.520Z</updated>
    
    <content type="html"><![CDATA[<h1 id="质数和合数"><a href="#质数和合数" class="headerlink" title="质数和合数"></a>质数和合数</h1><p>在这个内容中，我们将学习质数和合数的内容，有部分内容是我们小学的时候就已经学习过了，还有部分的知识就涉及到数论的内容中了</p><h2 id="质数"><a href="#质数" class="headerlink" title="质数"></a>质数</h2><p>在学习质数之前，我们要先知道一下质数的定义，什么样的数才算是一个质数？</p><p>​        质数又称<a href="https://baike.baidu.com/item/素数/115069?fromModule=lemma_inlink">素数</a>。一个大于1的<a href="https://baike.baidu.com/item/自然数/385394?fromModule=lemma_inlink">自然数</a>，除了1和它自身外，不能被其他自然数<a href="https://baike.baidu.com/item/整除/2452641?fromModule=lemma_inlink">整除</a>的数叫做质数；否则称为<a href="https://baike.baidu.com/item/合数/49186?fromModule=lemma_inlink">合数</a>（规定1既不是质数也不是合数）</p><p>—来源于百度百科</p><h3 id="判断质数"><a href="#判断质数" class="headerlink" title="判断质数"></a>判断质数</h3><p>​        知道质数的定义后，我们就要知道如何才能够求解出一个数是不是质数，判断一个数是不是质数，那就看从2开始到小于它一位的数是否都不能将它整除</p><p>这样来看，这个程序还是很好写的</p><p>代码如下</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">bool isprime(int m)&#123;    if(m&lt;2) return false;    for(int i &#x3D; 2;i&lt;m-1;i++)    &#123;        if(m%i&#x3D;&#x3D;0) return false;    &#125;    return true;&#125;</code></pre><p>​        这样的代码在求一个数是否是质数的时候是非常方便快捷的，但是在求解多个数是否是质数的话就不够优秀了，因为时间复杂度可能会超时</p><p>​        这时候就要对代码进行优化，以16这个数为例，16不可以被9，10，11，12，13，14，15这些数整除，这是显而易见的，进而我们将代码加快了一倍，但是还不够，我们知道4可以整除16，8也可以整除16，但是在2的时候，16就已经被判断为合数了，或者说，我们只要判断16的平方根次，4*4=16，那么我们就只要判断最多3次，就可以知道16是不是质数了，因为4后面的数都不会被16整除或者可以整除但是前面已经它(指4后面可以将16整除的数)的因数了</p><p>因此，我们的代码可以再简化一些</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">bool isprime(int m)&#123;    if(m&lt;2) return false;    for(int i &#x3D; 2;i&lt;&#x3D;m&#x2F;i;i++)    &#123;        if(m%i&#x3D;&#x3D;0) return false;    &#125;    return true;&#125;</code></pre><p>这样，我们就可以在不超时的情况下判断多个数是不是质数了</p><h3 id="分解质因数"><a href="#分解质因数" class="headerlink" title="分解质因数"></a>分解质因数</h3><p>​        在判断完一个数是否为质数后，我们现在想知道到底是多少个质数可以做到将一个数分解成多个数相乘的结果</p><p>​        举个例子, 36 = 4 <em> 9, 36是由1个4和1个9组成的, 4 = 2 </em> 2,9 = 3 <em> 3,所以这个式子又可以转换为36 = 2 </em> 2 <em> 3 </em> 3，即36是由2个2和2个3组成的，现在我们给出多个数相乘，我们要计算多个数相乘得到的数是由哪些数组成的，其实就是求每一个数的是由哪些数相乘的，最后叠加就可以了</p><p>代码如下</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void prime(int m)&#123;    for(int i &#x3D; 2;i&lt;&#x3D;m&#x2F;i;i++)    &#123;        &#x2F;&#x2F;找到一个可以整除的数了        if(m%i&#x3D;&#x3D;0)        &#123;            int s &#x3D; 0;            &#x2F;&#x2F;把这个数直接除完            while(m%i&#x3D;&#x3D;0)            &#123;                m&#x2F;&#x3D;i;                s++;            &#125;            cout&lt;&lt;i&lt;&lt;&#39; &#39;&lt;&lt;s&lt;&lt;endl;        &#125;    &#125;    &#x2F;&#x2F;判断一下最后的数是多少,不是1的话就要单独再输出出来    if(m&gt;1) cout&lt;&lt;m&lt;&lt;&#39; &#39;&lt;&lt;1&lt;&lt;endl;    cout&lt;&lt;endl;&#125;</code></pre><h3 id="筛质数"><a href="#筛质数" class="headerlink" title="筛质数"></a>筛质数</h3><p>​        现在，我们的要求更加难度了，我们要求1~<code>n</code>里面的数有多少个质数，比如说1-1000000内有多少个质数，这样的话，如果用我们传统的求法（就是一开始说的那个）来求的话肯定会超时的，要计算的数实在是太多了，所以为了能够更加快速的求出一个范围里面的质数，这里有两种质数筛法，第一种是欧拉筛法，第二种是线性筛法，埃氏筛法比线性筛法要慢一些，但是它的思想是很重要的</p><h4 id="埃氏筛法"><a href="#埃氏筛法" class="headerlink" title="埃氏筛法"></a>埃氏筛法</h4><p>首先将2到n范围内的整数写下来。其中2是最小的素数。将表中所有的2的倍数划去，表中剩下的最小的数字就是3，他不能被更小的数整除，所以3是素数，再将表中所有的3的倍数划去…… 以此类推，如果表中剩余的最小的数是<code>m</code>，那么<code>m</code>就是素数，然后将表中所有<code>m</code>的倍数划去，像这样反复操作，就能依次枚举<code>n</code>以内的素数</p><p>埃氏筛法的时间复杂度是<code>0(n*log(logn))</code></p><p>代码如下</p><p>定义</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;const int N&#x3D; 1000010;int primes[N], cnt;bool st[N];</code></pre><p>函数</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void get_primes(int n)&#123;    for (int i &#x3D; 2; i &lt;&#x3D; n; i ++ )    &#123;        if (st[i]) continue;        primes[cnt ++ ] &#x3D; i;        for (int j &#x3D; i + i; j &lt;&#x3D; n; j +&#x3D; i)            st[j] &#x3D; true;    &#125;&#125;</code></pre><h4 id="线性筛法-欧拉筛法"><a href="#线性筛法-欧拉筛法" class="headerlink" title="线性筛法(欧拉筛法)"></a>线性筛法(欧拉筛法)</h4><p>线性筛法就是在埃氏筛法的基础上再次进行了优化，使得我们可以更加快速的判断质数了</p><p>开一个<code>n</code>+1大小的<code>bool</code>数组<code>st[n]</code>来存放每一个元素的筛留情况(即对于<code>st[n]</code>的每个数与下标号相同，对于任意<code>st[n]</code>有<code>st[n]=0</code>,<code>st[n]=1</code>两种情况，如果<code>st[n]!=true</code>则是素数，反之是合数)</p><p>再开一个数组<code>prime[n]</code>来存放筛出的素数以便最后输出结果</p><p>上述就是我们在使用线性筛法时的方式</p><p><strong>对于一个数k,总是进行从n*prime[0]~n*prime[j]，直到if(n%prime[j]==0)成立时break掉</strong></p><p>代码如下</p><p>定义</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;#include&lt;algorithm&gt;using namespace std;const int N &#x3D; 1000010;int prime[N],cnt;bool st[N];</code></pre><p>函数</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void isprime(int n)&#123;    for(int i&#x3D;2;i&lt;&#x3D;n;i++)    &#123;        if(!st[i]) prime[cnt++] &#x3D; i;        for(int j &#x3D; 0;prime[j]&lt;&#x3D;n&#x2F;i;j++)        &#123;            st[prime[j]*i] &#x3D; true;            if(i%prime[j]&#x3D;&#x3D;0) break;        &#125;    &#125;    cout&lt;&lt;cnt&lt;&lt;endl;&#125;</code></pre><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>以上就是质数的相关知识啦，如果你用心看到这里的话，相信你一定会有所收获的捏~(￣▽￣)~*</p><p>如果我写的有什么不明白的地方或者有歧义的地方还希望大家可以告诉我(<strong><code>QQ1594463152</code></strong>),谢谢捏~(￣▽￣)~*</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;质数和合数&quot;&gt;&lt;a href=&quot;#质数和合数&quot; class=&quot;headerlink&quot; title=&quot;质数和合数&quot;&gt;&lt;/a&gt;质数和合数&lt;/h1&gt;&lt;p&gt;在这个内容中，我们将学习质数和合数的内容，有部分内容是我们小学的时候就已经学习过了，还有部分的知识就涉及到数论的内容</summary>
      
    
    
    
    <category term="c++数学知识" scheme="https://pxyfcywl.github.io/categories/c-%E6%95%B0%E5%AD%A6%E7%9F%A5%E8%AF%86/"/>
    
    
    <category term="c++数学知识" scheme="https://pxyfcywl.github.io/tags/c-%E6%95%B0%E5%AD%A6%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>容器</title>
    <link href="https://pxyfcywl.github.io/posts/aaaaaaak.html"/>
    <id>https://pxyfcywl.github.io/posts/aaaaaaak.html</id>
    <published>2022-11-26T05:36:12.000Z</published>
    <updated>2022-11-26T12:08:01.950Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vector容器"><a href="#vector容器" class="headerlink" title="vector容器"></a><code>vector</code>容器</h1><p>今天，我们来讲解一下<code>c++</code>中的<code>vector</code>容器，它封装了动态大小数组的顺序容器，就相当于它能够存放各种类型的对象。可以简单的认为，<code>vector</code>是一个<strong>能够存放任意类型的动态数组</strong></p><h2 id="vector容器的特性"><a href="#vector容器的特性" class="headerlink" title="vector容器的特性"></a><code>vector</code>容器的特性</h2><p>为了更好叙述下面的内容，我在这里先新建一个<code>vector</code>容器</p><h3 id="生成一个vector容器"><a href="#生成一个vector容器" class="headerlink" title="生成一个vector容器"></a>生成一个<code>vector</code>容器</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">容器名 &lt;容器存储对象的类型&gt; 储存对象的名字vector&lt;int&gt; tp;</code></pre><h3 id="顺序序列"><a href="#顺序序列" class="headerlink" title="顺序序列"></a>顺序序列</h3><p><code>vector</code>容器中的元素按照严格的线性顺序排序。可以通过元素在序列中的位置访问对应的元素</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">对vector容器的第6位元素的值进行修改(类似于数组的修改)tp[5] &#x3D; 10;</code></pre><h3 id="动态数组"><a href="#动态数组" class="headerlink" title="动态数组"></a>动态数组</h3><p>支持对序列中的任意元素进行快速直接访问，甚至可以通过指针算述进行该操作。提供了在序列末尾相对快速地添加/删除元素的操作</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">对vector容器的尾部进行插入操作tp.push_back();对vector容器的尾部进行删除操作tp.pop_back();</code></pre><h3 id="能够感知内存分配器"><a href="#能够感知内存分配器" class="headerlink" title="能够感知内存分配器"></a>能够感知内存分配器</h3><p>容器使用一个内存分配器对象来动态地处理它的存储需求</p><h2 id="vector容器的使用"><a href="#vector容器的使用" class="headerlink" title="vector容器的使用"></a>vector容器的使用</h2><p>我们在知道vector容器的基本用法后，我们是不是应该了解vector容器的用法了? ((<em>^_^</em>))</p><p>下面我们就从vector容器的构造开始讲起吧</p><h3 id="容器构造"><a href="#容器构造" class="headerlink" title="容器构造"></a>容器构造</h3><p>默认构造，不含参数的构造</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">vector&lt;int&gt; a;&#x2F;&#x2F;先构造再赋值int i;for (i &#x3D; 0; i &lt; 10; i++)&#123;a.push_back(i);&#125;</code></pre><p>区间构造，把别人的复制到自己这里</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">vector&lt;int&gt; b(a.begin(), a.end());</code></pre><p>n个elem的形式构造，往里面输入10个100进去</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">vector&lt;int&gt; c(n, elem);vector&lt;int&gt; c(10, 100);</code></pre><p>直接拷贝构造</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">vector&lt;int&gt; d(c);</code></pre><h3 id="容器赋值"><a href="#容器赋值" class="headerlink" title="容器赋值"></a>容器赋值</h3><p>采用for循环进行赋值</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">vector&lt;int&gt; a;for (int i &#x3D; 0; i &lt; 10; i++)&#123;a.push_back(i);&#125;</code></pre><p>采用了等号的方式直接赋值</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">vector&lt;int&gt;b;b &#x3D; a;</code></pre><p>采用类似于string容器中的assign操作</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">vector&lt;int&gt;c;c.assign(a.begin(), a.end());</code></pre><p>n个elem的形式构造，往里面输入10个100进去</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">vector&lt;int&gt;d;d.assign(10, 100);</code></pre><h3 id="容器空间大小"><a href="#容器空间大小" class="headerlink" title="容器空间大小"></a>容器空间大小</h3><p>初始化</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">vector&lt;int&gt; a;for (int i &#x3D; 0; i &lt; 10; i++) &#123;a.push_back(i);&#125;</code></pre><p>判断容器是否非空，空的话返回0,反之返回1</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">a.empty();</code></pre><p>改变容器内存空间</p><p>改变a的内存空间为15，size往后的多余部分以100补上</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F;假设一开始容器的初始空间大小是10，里面的值都是1&#x2F;&#x2F;改变容器的大小为n,如果一开始容器的大小不足n,后面的值全部赋以elem,如果一开始容器的大小大于或等于n,只是对容器的大小进行了缩水a.resize(n, elem);</code></pre><p>改变a的内存空间为16，size往后的多余部分以默认值0补上</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F;elem不写默认是0a.resize(n,elem);a.resize(16);</code></pre><p>改变a的内存空间为5，减少空间，在5个空间内的值不变，其它值全部删去</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">a.resize(5);</code></pre><h3 id="容器的插入和删除"><a href="#容器的插入和删除" class="headerlink" title="容器的插入和删除"></a>容器的插入和删除</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">vector&lt;int&gt; a;int i;for (i &#x3D; 0; i &lt; 10; i++)&#123;        &#x2F;&#x2F;对a容器尾部添加数值a.push_back(i);&#125;</code></pre><p>对a尾部的数值进行删除</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">a.pop_back();</code></pre><p>头插法，对a头部插入一个指定的值100</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F;对a的头部插入n个数值为elem的数,n不写默认为1a.insert(a.begin(),n,elem);a.insert(a.begin(), 100);a.insert(a.begin(), 2, 1000);</code></pre><p>头删法，对a头部进行删除</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">a.erase(a.begin());</code></pre><p>选择删除法，对a整个容器进行删除</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">a.erase(a.begin(),a.end());</code></pre><p>删除a容器里面的所有数值</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">a.clear();</code></pre><p>判断容器是否非空</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">a.empty();</code></pre><h3 id="容器内数据读取"><a href="#容器内数据读取" class="headerlink" title="容器内数据读取"></a>容器内数据读取</h3><p>初始化</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">vector&lt;int&gt; a;int i;for (i &#x3D; 0; i &lt; 10; i++)&#123;a.push_back(i);&#125;</code></pre><p>按照顺序输出a容器</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F;数组方式for (i &#x3D; 0; i &lt; a.size(); i++)&#123;cout &lt;&lt; a[i] &lt;&lt; &#39; &#39;;&#125;cout &lt;&lt; endl;&#x2F;&#x2F;访问底层数据方式for (i &#x3D; 0; i &lt; a.size(); i++)&#123;cout &lt;&lt; a.at(i) &lt;&lt; &#39; &#39;;&#125;cout &lt;&lt; endl;</code></pre><h3 id="容器互换"><a href="#容器互换" class="headerlink" title="容器互换"></a>容器互换</h3><p>初始化</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">vector&lt;int&gt; a,b;int i;for (i &#x3D; 0; i &lt; 10; i++)&#123;a.push_back(i);&#125;for (i &#x3D; 10; i &gt;&#x3D;0; i--)&#123;b.push_back(i);&#125;</code></pre><p>两个容器互换</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">a.swap(b);</code></pre><h4 id="容器互换的意义"><a href="#容器互换的意义" class="headerlink" title="容器互换的意义"></a>容器互换的意义</h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void test7()&#123;vector&lt;int&gt; a;    for (int i &#x3D; 0; i &lt; 100000; i++)&#123;a.push_back(i);&#125;        &#x2F;&#x2F;容量过大无法压缩容量cout &lt;&lt; &quot;a.capacity()&#x3D; &quot; &lt;&lt; a.capacity() &lt;&lt; endl;cout &lt;&lt; &quot;a.size()&#x3D; &quot; &lt;&lt; a.size() &lt;&lt; endl;    &#x2F;&#x2F;重定义大小改不了容量a.resize(3);cout &lt;&lt; &quot;a.capacity()&#x3D; &quot; &lt;&lt; a.capacity() &lt;&lt; endl;cout &lt;&lt; &quot;a.size()&#x3D; &quot; &lt;&lt; a.size() &lt;&lt; endl;    &#x2F;&#x2F;自己给自己交换，将容量重定义为3了vector&lt;int&gt;(a).swap(a);cout &lt;&lt; &quot;a.capacity()&#x3D; &quot; &lt;&lt; a.capacity() &lt;&lt; endl;cout &lt;&lt; &quot;a.size()&#x3D; &quot; &lt;&lt; a.size() &lt;&lt; endl;    &#125;</code></pre><h3 id="容器内数据的输出"><a href="#容器内数据的输出" class="headerlink" title="容器内数据的输出"></a>容器内数据的输出</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void printvector(vector&lt;int&gt;&amp; a)&#123;for (vector&lt;int&gt;::iterator it &#x3D; a.begin(); it !&#x3D; a.end(); it++)&#123;cout &lt;&lt; *it &lt;&lt; &#39; &#39;;&#125;cout &lt;&lt; endl;&#125;</code></pre><h3 id="容器的预留空间"><a href="#容器的预留空间" class="headerlink" title="容器的预留空间"></a>容器的预留空间</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void test8()&#123;vector&lt;int&gt; a;int num &#x3D; 0;&#x2F;&#x2F;开始的时候初始化指针p为空指针int* p &#x3D; NULL;for (int i &#x3D; 0; i &lt; 10000; i++)&#123;a.push_back(i);&#x2F;&#x2F;如果要往a容器插数，就要开辟内存，如果一段内存不够用的话，就会新开一段大内存，&#x2F;&#x2F;释放原来的内存，此时指针的地址变化就说明了内存在扩大，地址变化if (p !&#x3D; &amp;a[0])&#123;p &#x3D; &amp;a[0];num++;&#125;&#125;cout &lt;&lt; &quot;num&#x3D; &quot; &lt;&lt; num &lt;&lt; endl;&#125;</code></pre><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F;vector 的减少预留空间扩张的方法，事先判断可能会开多大，采用reserve函数预处理开辟的内存空间void test9()&#123;vector&lt;int&gt; a;a.reserve(10000);int num &#x3D; 0;&#x2F;&#x2F;开始的时候初始化指针p为空指针int* p &#x3D; NULL;for (int i &#x3D; 0; i &lt; 10000; i++)&#123;a.push_back(i);&#x2F;&#x2F;如果要往a容器插数，就要开辟内存，如果一段内存不够用的话，就会新开一段大内存，if (p !&#x3D; &amp;a[0])&#123;&#x2F;&#x2F;释放原来的内存，此时指针的地址变化就说明了内存在扩大，地址变化p &#x3D; &amp;a[0];num++;&#125;&#125;    &#x2F;&#x2F;此时的num就只为1，就是第一次开辟的10000的空间，之后都没有开辟新的空间cout &lt;&lt; &quot;num&#x3D; &quot; &lt;&lt; num &lt;&lt; endl;&#125;</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;vector容器&quot;&gt;&lt;a href=&quot;#vector容器&quot; class=&quot;headerlink&quot; title=&quot;vector容器&quot;&gt;&lt;/a&gt;&lt;code&gt;vector&lt;/code&gt;容器&lt;/h1&gt;&lt;p&gt;今天，我们来讲解一下&lt;code&gt;c++&lt;/code&gt;中的&lt;code</summary>
      
    
    
    
    <category term="c++中的stl算法" scheme="https://pxyfcywl.github.io/categories/c-%E4%B8%AD%E7%9A%84stl%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="vector容器" scheme="https://pxyfcywl.github.io/tags/vector%E5%AE%B9%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>中值定理证明</title>
    <link href="https://pxyfcywl.github.io/posts/aaaaaaaj.html"/>
    <id>https://pxyfcywl.github.io/posts/aaaaaaaj.html</id>
    <published>2022-11-25T03:28:33.000Z</published>
    <updated>2022-11-25T03:30:55.049Z</updated>
    
    
    
    
    <category term="中值定理" scheme="https://pxyfcywl.github.io/categories/%E4%B8%AD%E5%80%BC%E5%AE%9A%E7%90%86/"/>
    
    
    <category term="高等数学" scheme="https://pxyfcywl.github.io/tags/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>最短路问题(floyd算法)(初版)</title>
    <link href="https://pxyfcywl.github.io/posts/aaaaaaai.html"/>
    <id>https://pxyfcywl.github.io/posts/aaaaaaai.html</id>
    <published>2022-11-24T09:13:49.000Z</published>
    <updated>2022-11-25T02:39:19.334Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Floyd最短路算法-初版"><a href="#Floyd最短路算法-初版" class="headerlink" title="Floyd最短路算法(初版)"></a><code>Floyd</code>最短路算法(初版)</h1><p>今天，我们来讲讲在最短路中的第三种算法，<code>floyd</code>算法, 实际上这是第五个基础算法，</p><p><code>dijstkra</code>算法有朴素算法形式的，也有堆优化版的，它有两种形式</p><p>在处理负权边的时候有<code>boolman_ford</code>算法和优化版的<code>spfa</code>算法</p><p>所以这实际上是第五种了((<em>^_^</em>))</p><h2 id="算法来源"><a href="#算法来源" class="headerlink" title="算法来源"></a>算法来源</h2><p>在计算机科学中，<code>Floyd</code>算法是一种在具有正或负边缘权重（但没有负周期）的加权图中找到最短路径的算法。算法的单个执行将找到所有顶点对之间的最短路径的长度（加权）。 虽然它不返回路径本身的细节，但是可以通过对算法的简单修改来重建路径。 该算法的版本也可用于查找关系<code>R</code>的传递闭包，或（与<code>Schulze</code>投票系统相关）在加权图中所有顶点对之间的最宽路径。</p><p>&lt;来源于百度百科&gt;</p><p><code>floyd</code>算法主要是来处理最短路问题中的多个点之间的距离，在需要使用这种算法的题目上会出现多次询问,让你求<code>a</code>点到<code>b</code>点的最短距离，包括负权边和闭环</p><p>下面以一道题目为例，来说明这个算法在处理实际题目上的应用</p><h2 id="例题-Floyd求最短路"><a href="#例题-Floyd求最短路" class="headerlink" title="例题:Floyd求最短路"></a>例题:<code>Floyd</code>求最短路</h2><p>给定一个 <code>n</code> 个点 <code>m</code> 条边的有向图，图中可能存在重边和自环，边权可能为负数。</p><p>再给定 <code>k</code> 个询问，每个询问包含两个整数 <code>x</code> 和<code>y</code>，表示查询从点 <code>x</code> 到点 <code>y</code> 的最短距离，如果路径不存在，则输出 <code>impossible</code>。</p><p>数据保证图中不存在负权回路。</p><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行包含三个整数 <code>n</code>,<code>m</code>,<code>k</code></p><p>接下来 <code>m</code> 行，每行包含三个整数 <code>x,y,z</code>表示存在一条从点 <code>x</code> 到点 <code>y</code> 的有向边，边长为<code>z</code></p><p>接下来 <code>k</code> 行，每行包含两个整数 <code>x,y</code>表示询问点 <code>x</code> 到点 <code>y</code>的最短距离</p><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>共 <code>k</code> 行，每行输出一个整数，表示询问的结果，若询问两点间不存在路径，则输出 <code>impossible</code>。</p><h4 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h4><p>1≤n≤200<br>1≤k≤n<br>1≤m≤20000<br>图中涉及边长绝对值均不超过 10000</p><h4 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例"></a>输入样例</h4><pre class="line-numbers language-none"><code class="language-none">3 3 21 2 12 3 21 3 12 11 3</code></pre><h4 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例"></a>输出样例</h4><pre class="line-numbers language-none"><code class="language-none">impossible1</code></pre><h2 id="算法思想"><a href="#算法思想" class="headerlink" title="算法思想"></a>算法思想</h2><p>(详见动态规划)</p><p>(作者还没有学动态规划……)</p><p>下面介绍引自百度百科</p><h3 id="路径矩阵"><a href="#路径矩阵" class="headerlink" title="路径矩阵"></a>路径矩阵</h3><p>通过一个图的权值<a href="https://baike.baidu.com/item/矩阵?fromModule=lemma_inlink">矩阵</a>求出它的每两点间的最短路径矩阵</p><p>从图的带权<a href="https://baike.baidu.com/item/邻接矩阵?fromModule=lemma_inlink">邻接矩阵</a><code>A=[a(i,j)] n×n</code>开始，迭代地进行<code>n</code>次更新，即由矩阵<code>D(0)=A</code>，按一个公式，构造出矩阵<code>D(1)</code>；又用同样地公式由<code>D(1)</code>构造出<code>D(2)</code>；……；最后又用同样的公式由<code>D(n-1)</code>构造出矩阵<code>D(n)</code>。矩阵<code>D(n)</code>的i行j列元素便是<code>i</code>号顶点到<code>j</code>号顶点的最短路径长度，称<code>D(n)</code>为图的<a href="https://baike.baidu.com/item/距离矩阵?fromModule=lemma_inlink">距离矩阵</a>，同时还可引入一个后继节点矩阵<code>path</code>来记录两点间的最短路径</p><p>采用松弛技术（<a href="https://baike.baidu.com/item/松弛操作?fromModule=lemma_inlink">松弛操作</a>），对在i和j之间的所有其他点进行一次松弛。所以时间复杂度为<code>O(n^3)</code>;</p><h3 id="状态转移方程"><a href="#状态转移方程" class="headerlink" title="状态转移方程"></a>状态转移方程</h3><p>其<a href="https://baike.baidu.com/item/状态转移方程?fromModule=lemma_inlink">状态转移方程</a>如下： <code>map[i,j]:=min&#123;map[i,k]+map[k,j],map[i,j]&#125;；</code></p><p><code>map[i,j]</code>表示<code>i</code>到<code>j</code>的最短距离，<code>K</code>是穷举<code>i,j</code>的断点，<code>map[n,n]</code>初值应该为0，或者按照题目意思来做</p><p>当然，如果这条路没有通的话，还必须特殊处理，比如没有<code>map[i,k]</code>这条路</p><h2 id="算法构建"><a href="#算法构建" class="headerlink" title="算法构建"></a>算法构建</h2><p>首先，这道题有<code>q</code>次询问，一共有<code>m</code>条边，<code>n</code>个点</p><p><code>q</code>次询问就需要我们对于每一个点都需要进行分析，我们设立一个三维数组<code>d[k,i,j]</code>, 这个三维数组的意思是从<code>i</code>开始,只经过1到<code>k</code>这些中间点后到达<code>j</code>的最短距离</p><p>它可以用一个等式来表示</p><pre class="line-numbers language-none"><code class="language-none">d[k,i,j] &#x3D; d[k-1,i,k] + d[k-1,k,j]</code></pre><p>右半部分表示的是从<code>i</code>开始，只经过1到<code>k-1</code>这些中间点后到达<code>k</code>的最短距离 与 从<code>k</code>这个点开始，只经过1到<code>k-1</code>这些中间点到达<code>j</code>的最短距离 之和可以用来表示左边的三维数组，右边实际上就是一个累加的过程，类似于<code>dp</code>方程的记忆化搜索，可以将一个<strong>邻接矩阵转换成邻接表的形式</strong></p><p>代码优化</p><pre class="line-numbers language-none"><code class="language-none">d[i][j] &#x3D; min(d[i][j],d[i][k]+d[k][j])</code></pre><h2 id="定义类代码"><a href="#定义类代码" class="headerlink" title="定义类代码"></a>定义类代码</h2><h3 id="变量初始化"><a href="#变量初始化" class="headerlink" title="变量初始化"></a>变量初始化</h3><pre class="line-numbers language-code" data-language="code"><code class="language-code">#include&lt;iostream&gt;#include&lt;algorithm&gt;#include&lt;cstring&gt;using namespace std;const int N &#x3D; 210, INF &#x3D; 1e9;&#x2F;&#x2F;n个点 m条路 q次询问int n, m, q;&#x2F;&#x2F;d数组表示的是从某个点到某个点的距离int d[N][N];</code></pre><h3 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h3><pre class="line-numbers language-code" data-language="code"><code class="language-code">int main()&#123;    scanf(&quot;%d%d%d&quot;, &amp;n, &amp;m, &amp;q);    int i, j;    &#x2F;&#x2F;初始化i号点到j号店的距离    for (i &#x3D; 1; i &lt;&#x3D; n; i++)    &#123;        for (j &#x3D; 1; j &lt;&#x3D; n; j++)        &#x2F;&#x2F;每一行的1号点上的i和j是相等的，初始化为0            if (i &#x3D;&#x3D; j) d[i][j] &#x3D; 0;            &#x2F;&#x2F;其它点不确定，初始化为正无穷(其实也没有那么大)            else d[i][j] &#x3D; INF;    &#125;    while (m--)    &#123;        int a, b, w;        scanf(&quot;%d%d%d&quot;, &amp;a, &amp;b, &amp;w);        &#x2F;&#x2F;排除自环正权边和重边(重边取最小值)        d[a][b] &#x3D; min(d[a][b], w);    &#125;    &#x2F;&#x2F;进入floyd算法    floyd();    &#x2F;&#x2F;q次询问    while (q--)    &#123;        int a, b;        scanf(&quot;%d%d&quot;, &amp;a, &amp;b);        &#x2F;&#x2F;不能够找到距离        if (d[a][b] &gt; INF &#x2F; 2) puts(&quot;impossible&quot;);        &#x2F;&#x2F;能够找到距离        else printf(&quot;%d\n&quot;, d[a][b]);    &#125;    return 0;&#125;</code></pre><h3 id="算法代码化"><a href="#算法代码化" class="headerlink" title="算法代码化"></a>算法代码化</h3><pre class="line-numbers language-none"><code class="language-none">void floyd()&#123;    int i, j, k;    for (k &#x3D; 1; k &lt;&#x3D; n; k++)        for (i &#x3D; 1; i &lt;&#x3D; n; i++)            for (j &#x3D; 1; j &lt;&#x3D; n; j++)            &#x2F;&#x2F;邻接矩阵转邻接表                d[i][j] &#x3D; min(d[i][j], d[i][k] + d[k][j]);&#125;</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Floyd最短路算法-初版&quot;&gt;&lt;a href=&quot;#Floyd最短路算法-初版&quot; class=&quot;headerlink&quot; title=&quot;Floyd最短路算法(初版)&quot;&gt;&lt;/a&gt;&lt;code&gt;Floyd&lt;/code&gt;最短路算法(初版)&lt;/h1&gt;&lt;p&gt;今天，我们来讲讲在最短</summary>
      
    
    
    
    <category term="c++算法" scheme="https://pxyfcywl.github.io/categories/c-%E7%AE%97%E6%B3%95/"/>
    
    <category term="最短路问题" scheme="https://pxyfcywl.github.io/categories/c-%E7%AE%97%E6%B3%95/%E6%9C%80%E7%9F%AD%E8%B7%AF%E9%97%AE%E9%A2%98/"/>
    
    
    <category term="最短路问题" scheme="https://pxyfcywl.github.io/tags/%E6%9C%80%E7%9F%AD%E8%B7%AF%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>堆</title>
    <link href="https://pxyfcywl.github.io/posts/aaaaaaah.html"/>
    <id>https://pxyfcywl.github.io/posts/aaaaaaah.html</id>
    <published>2022-11-22T07:46:09.000Z</published>
    <updated>2022-11-26T05:36:39.874Z</updated>
    
    <content type="html"><![CDATA[<h1 id="堆的概览"><a href="#堆的概览" class="headerlink" title="堆的概览"></a>堆的概览</h1><p>在这篇文章中，将会对<code>c++</code>中的<code>stl</code>容器中的堆进行一个讲解，主要讲解<strong>堆的概念，堆的使用，模拟堆，堆排序和优先队列</strong>这些内容</p><h2 id="堆的概念"><a href="#堆的概念" class="headerlink" title="堆的概念"></a>堆的概念</h2><p>堆的本质实际上是一个完全二叉树，怎样才算是一个完全二叉树呢？</p><p><img src="/posts/aaaaaaah/image-20221122161034091.png" alt="image-20221122161034091"></p><p>以下这些便是完全二叉树</p><p><img src="/posts/aaaaaaah/image-20221122183232311.png" alt="image-20221122183232311"></p><p>非完全二叉树</p><p><img src="/posts/aaaaaaah/image-20221122183459870.png" alt="image-20221122183459870"></p><h2 id="堆的堆序性"><a href="#堆的堆序性" class="headerlink" title="堆的堆序性"></a>堆的堆序性</h2><p>堆分为两种类型,第一种是大根堆，第二种是小根堆</p><p><img src="/posts/aaaaaaah/image-20221122183644512.png" alt="image-20221122183644512"></p><p>小根堆，顾名思义，就是指在每一棵二叉树中，父节点都要比它的两个子节点要小，而所有点连起来的最上面的祖父节点就是最小的，</p><p>大根堆就是与小根堆完全相反的两个事物，在这里就不多做赘述了</p><p><img src="/posts/aaaaaaah/image-20221122184128494.png" alt="image-20221122184128494"></p><h2 id="堆的储存"><a href="#堆的储存" class="headerlink" title="堆的储存"></a>堆的储存</h2><p>首先，我们可以按照层序遍历的顺序来给堆里面的元素编号   (层序遍历就是一层层的往下走,类似于宽度优先搜索)</p><p><img src="/posts/aaaaaaah/image-20221122184314390.png" alt="image-20221122184314390"></p><p>由于堆的层数是与编号是一一对应的,所以我们可以将一个堆通过使用一个一维数组的方式来实现</p><hr><p>​    用一个父节点的位置找到子节点位置的方式就是通过数学规律来实现的，如这样<code>2*n+1</code>和<code>2*n+2</code>，便是上图中父节点找到子节点的一种方式</p><p>​    但是在竞赛中为了更加方便，一般情况下是将自顶而下的第一个父节点对应到一维数组中的第二个位置，这样的话，每一个父节点查找子节点的方式就改为了<code>2*n</code>和<code>2*n+1</code></p><hr><h2 id="堆的基本操作"><a href="#堆的基本操作" class="headerlink" title="堆的基本操作"></a>堆的基本操作</h2><p>​        第一种是上滤，用函数表示的话就是<code>up[x]</code>，第二种是下滤,用函数表示的话就是<code>down[x]</code>,上滤是什么意思呢？我们在建造一个堆的时候，我们会涉及到堆的堆序性，也就是大根堆和小根堆的判断</p><p>我们以一张图来说明我们关于上滤和下滤的操作流程</p><p><img src="/posts/aaaaaaah/image-20221122192209213.png" alt="image-20221122192209213"></p><p>首先，我们可以知道目前这个完全二叉树不是有序的，现在假设我们要将现在这个二叉树变成一个小根堆的形式</p><hr><p>关于规则，我们假设加<code>[]</code>的是排好了序的，<code>&#123;&#125;</code>是没有排好序的</p><p>目前这个二叉树用一维数组表示的话是这样的{1 7 6 4 5 1 2}</p><hr><p>​        现在这个二叉树有7个节点(包括根结点)，我们在恢复成小根堆二叉树的时候只需要从倒数第二排的最后一个节点开始就行了，现在我们从6那个数的位置开始，让它与它的子节点进行比较。6比1大，也比2大，那么我们应该让6和谁换位置呢？</p><p>​        我们让6和1换位置，现在根节点的右子树变成了[1 6 2]</p><p>[1 6 2]现在是一个规范的右子树了，它满足了小根堆的性质</p><p>​        那如果我们让6和2换位置呢？那么右子树就会变成{2 1 6}这样的，它不满足小根堆的性质(2比1要大，按道理应该让1在右子树上的父节点)，所以我们在换位置的时候<strong>还要选择与谁换位置</strong></p><p>​        接下来是对于祖父节点上的二叉树的判断了，祖父节点上的二叉树用一维数组表示是{1 7 1},我们要看左边的7的位置是否正确，左子树上的元素是{7 4 5}，不满足小根堆的要求，所以我们要让7和4交换</p><hr><p>现在这个二叉树用一维数组表示的话是{1 4 1 7 5 6 2}</p><hr><p>现在的话，这个二叉树就是用小根堆的形式呈现出来的二叉树了</p><p>下滤和上滤的代码如下</p><p><code>u</code>指的是现在所处于的父节点,<code>h[]</code>是模拟堆形成的一个一维数组</p><pre class="line-numbers language-none"><code class="language-none">void down(int u)&#123;    int t &#x3D; u;    if (u * 2 &lt;&#x3D; idx &amp;&amp; h[u * 2] &lt; h[t]) t &#x3D; u * 2;    if (u * 2 + 1 &lt;&#x3D; idx &amp;&amp; h[u * 2 + 1] &lt; h[t]) t &#x3D; u * 2 + 1;    if (u !&#x3D; t)    &#123;        swap(h[u], h[t]);        down(t);    &#125;&#125;void up(int u)&#123;    while (u &#x2F; 2 &amp;&amp; h[u &#x2F; 2] &gt; h[u])    &#123;        swap(h[u &#x2F; 2], [u]);        u &#x2F;&#x3D; 2;    &#125;&#125;</code></pre><h3 id="建堆方法"><a href="#建堆方法" class="headerlink" title="建堆方法"></a>建堆方法</h3><p>一共分为两种方式建一个堆，第一种是自顶而下建堆，第二种是自下而上建堆</p><p>自顶而下建堆就跟我们刚刚讲过的上滤操作相关</p><p><img src="/posts/aaaaaaah/image-20221122195304330.png" alt="image-20221122195304330"></p><p>而自下而上建堆的话，就跟我刚刚讲过的下滤操作有关</p><p><img src="/posts/aaaaaaah/image-20221122195439489.png" alt="image-20221122195439489"></p><h1 id="优先队列"><a href="#优先队列" class="headerlink" title="优先队列"></a>优先队列</h1><p>优先队列可以在堆排序算法中使用，普通的队列(队列的概念详见<code>c++</code>中的<code>stl</code>算法)是谁先进去，谁就先出来，优先队列不太一样(毕竟在名字上就已经体现出它的特殊性了)，优先队列是谁先进去，但是要按照一定的顺序出来，比如说从大到小的顺序和从小到大的顺序这样子</p><p><img src="/posts/aaaaaaah/image-20221122195816779.png" alt="image-20221122195816779"></p><p>我们来按照要求依次弹出最小的元素，但是堆的性质却不让我们这么做(堆只能一次次弹出头节点)，那我们只好换个方式来做了</p><p>​        你们有没有玩过刺客信条？刺客在刺杀别人的时候是先刺杀最后一个人才不会被前面的人看见，如果我们直接去刺杀第一个人，那就不是刺杀了，是光明正大的杀人啊，所以为了将头元素取出来，我们要先把头节点放到最后一个节点上去，再把最后一个节点删掉，然后对头节点实行下滤<code>down[x]</code>，这样我们就可以从小到大依次删除每一个元素了</p><p><code>idx</code>指的是我们现在在所谓的堆上有多少个树(被删除的数都在数组后面)</p><pre class="line-numbers language-none"><code class="language-none">swap(h[1], h[idx]);           [idx]--;           down(1);</code></pre><h2 id="优先队列的使用"><a href="#优先队列的使用" class="headerlink" title="优先队列的使用"></a>优先队列的使用</h2><hr><p>自定义顺序的优先队列：</p><p>1.按从小到大顺序</p><p><code>priority_queue&lt;int, vector&lt;int&gt;, greater&lt;int&gt; &gt; heap;</code></p><p>2.按从大到小排序</p><p><code>priority_queue&lt;int, vector&lt;int&gt;, less&lt;int&gt; &gt; heap;</code></p><p>普通的优先队列：</p><p>1.按从大到小排序</p><p><code>priority_queue&lt;int&gt; heap;</code></p><p>特殊的优先队列：</p><p>1.必须要重载运算符</p><p><code>priority_queue&lt;node&gt; heap;</code></p><p>优先队列中的函数使用</p><p>取出队列中最高优先级的元素</p><p><code>heap.top()</code></p><p>删除队列中的目前最高优先级的元素</p><p><code>heap.pop()</code></p><p>计算队列中目前一共有多少个元素</p><p><code>heap.size()</code></p><p>插入一个元素到队尾的同时将队列按顺序排序</p><p><code>heap.push()</code></p><p>在优先队列中构造元素</p><p><code>heap.enplace()</code></p><p>判断优先队列内是否有元素</p><p><code>heap.empty()</code></p><p>与其他容器交换元素</p><p><code>heap.swap()</code></p><hr><h1 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h1><p>我们会发现，上面的优先队列把所有的点全部都弄出去了，但是呢，实际上我们不需要真的把点给丢弃掉，我们是把那些点依旧放在了数组里面，便于之后对于题目所处的问题进行一个及时的答复</p><p>这是一开始的大根堆，我们要对它的头节点进行一个删除处理</p><p><img src="/posts/aaaaaaah/image-20221122203501425.png" alt="image-20221122203501425"></p><p>实际上，我们不是真的删除了头节点，只是把它给移到了下面去</p><p><img src="/posts/aaaaaaah/image-20221122203429367.png" alt="image-20221122203429367"></p><h2 id="无序堆变成有序堆-实战"><a href="#无序堆变成有序堆-实战" class="headerlink" title="无序堆变成有序堆(实战)"></a>无序堆变成有序堆(实战)</h2><p>我们先给堆里面添加元素，之后从第<code>n/2</code>个节点开始依次采用<code>down[]</code>,使得一个无序堆变成一个有序的小根堆</p><p>代码如下:</p><pre class="line-numbers language-none"><code class="language-none">int main()&#123;    cin &gt;&gt; n &gt;&gt; m;    int i;    for (i &#x3D; 1; i &lt;&#x3D; n; i++) cin &gt;&gt; h[i];    idx &#x3D; n;    for (i &#x3D; n &#x2F; 2; i; i--) down(i);    while (m--)    &#123;        printf(&quot;%d &quot;, h[1]);        h[1] &#x3D; h[idx], idx--, down(1);    &#125;    return 0;&#125;</code></pre><h1 id="结尾的话"><a href="#结尾的话" class="headerlink" title="结尾的话"></a>结尾的话</h1><p>首先,希望个位如果看到有什么错误的地方，或者说对于某些语句有更好的解释的话，烦请告知我(<code>qq1594463152</code>),我看到后会立刻修改自己的错误和错误的思考方向</p><p>另外,如果你用心看到这里的话，相信你一定可以学有所获！不过多多练习才是最重要的哦</p><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p>我这些图片一部分是来自于b站的up主制作的一个视频里面的截图，如有侵权等问题请立刻联系我，我立刻删除相关文章</p><p>引用视频网址如下</p><p>​    <a href="https://www.bilibili.com/video/BV1AF411G7cA/?spm_id_from=333.337.search-card.all.click&amp;vd_source=761675b97a969cb27e2baf475b4f2be3">https://www.bilibili.com/video/BV1AF411G7cA/?spm_id_from=333.337.search-card.all.click&amp;vd_source=761675b97a969cb27e2baf475b4f2be3</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;堆的概览&quot;&gt;&lt;a href=&quot;#堆的概览&quot; class=&quot;headerlink&quot; title=&quot;堆的概览&quot;&gt;&lt;/a&gt;堆的概览&lt;/h1&gt;&lt;p&gt;在这篇文章中，将会对&lt;code&gt;c++&lt;/code&gt;中的&lt;code&gt;stl&lt;/code&gt;容器中的堆进行一个讲解，主要讲解&lt;s</summary>
      
    
    
    
    <category term="c++中的stl算法" scheme="https://pxyfcywl.github.io/categories/c-%E4%B8%AD%E7%9A%84stl%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="堆与堆排序" scheme="https://pxyfcywl.github.io/tags/%E5%A0%86%E4%B8%8E%E5%A0%86%E6%8E%92%E5%BA%8F/"/>
    
    <category term="优先队列" scheme="https://pxyfcywl.github.io/tags/%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>最短路问题(bellman-ford算法)</title>
    <link href="https://pxyfcywl.github.io/posts/aaaaaaag.html"/>
    <id>https://pxyfcywl.github.io/posts/aaaaaaag.html</id>
    <published>2022-11-22T03:18:55.000Z</published>
    <updated>2022-11-25T02:39:01.650Z</updated>
    
    <content type="html"><![CDATA[<h1 id="bellman-ford算法"><a href="#bellman-ford算法" class="headerlink" title="bellman-ford算法"></a>bellman-ford算法</h1><p>今天，我们来讲讲第二种最短路算法，<code>boolman_ford</code>算法，这个算法可以用来处理两种情况</p><pre class="line-numbers language-none"><code class="language-none">第一种是含有 边权可能为负数 这种情况第二种是 给定了步数 的这种情况</code></pre><p>接下来给的这道题就是典型的只可以使用<code>boolman_ford</code>算法解决的，如果用<code>spfa</code>算法(<strong>另外一种负权类最短路算法</strong>)的话会被控时间</p><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个 <code>n</code> 个点 <code>m</code> 条边的有向图，图中可能存在<strong>重边和自环</strong>， <strong>边权可能为负数</strong></p><p>请你求出从 1 号点到 <code>n</code> 号点的最多经过 <code>k</code> 条边的最短距离，如果无法从 1 号点走到 <code>n</code> 号点，输出 <code>impossible</code></p><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行包含三个整数 <code>n,m,k</code></p><p>接下来<code>m</code> 行，每行包含三个整数<code>x,y,z</code>，表示存在一条从点 <code>x</code> 到点 <code>y</code> 的有向边，边长为 <code>z</code></p><p>点的编号为 1∼<code>n</code></p><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>输出一个整数，表示从 1号点到 <code>n</code>号点的最多经过<code>k</code> 条边的最短距离。</p><p>如果不存在满足条件的路径，则输出 <code>impossible</code></p><h4 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h4><p>1≤n,k≤500<br>1≤m≤10000<br>1≤x,y≤n<br>任意边长的绝对值不超过 10000</p><h4 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h4><pre class="line-numbers language-none"><code class="language-none">3 3 11 2 12 3 11 3 3</code></pre><h4 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h4><pre class="line-numbers language-none"><code class="language-none">3</code></pre><h2 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h2><p>我们在进行讲解算法前，我们需要先知道一下边权为负数是个什么样的情况</p><p><img src="/posts/aaaaaaag/01eaf8a7b7f90794c66e0299f93531c.jpg" alt></p><p><strong>为了更好的表达意思，我在下面的文章会统一把a指向b的线所占的负权的值c用{a,b,c}表示</strong></p><p>我们可以看看左上角的那幅图，图中的{3,4,-2},{4,2,-4}指的是3到4和4到2所占的负权边，一个是-2，另一个是-4</p><p>我还是来讲一个故事吧</p><h3 id="小故事"><a href="#小故事" class="headerlink" title="小故事"></a>小故事</h3><p>我们现在遇到了一个抽奖大冒险，我们可以选择无数次机会，去走我们想要的路，在道路中我们会的得到钱或者失去钱，假设<strong>+3是我们失去了三块钱，老板得到了3块钱的意思，-3是我们得到了三块钱，老板失去了3块钱的意思</strong>，我们把上面的图再搬运过来，我们可以从<code>1 - 2，2 - 3，3 - 4，4 - 2，2 - 3，3 - 4，4 - 2，2 -3......</code>无限循环下去，这样的话，老板就会一直亏钱，直到全部赔完，相反，我们会拿钱拿到手软(天哪，世上怎么会有这种好事)</p><p>所以老板为了限制我们获得无数的钱，便制定了一条手段，就说我们最多可以走多少步，最后所得到的结果就是我们获得的最后的钱(可能会赔钱)，这也是使用<code>boolman_ford</code>算法的两条定律(如开头)</p><h3 id="算法构造"><a href="#算法构造" class="headerlink" title="算法构造"></a>算法构造</h3><p>现在，我们就可以通过上面的小故事来了解我们的算法原理了，就是说在限定的次数内，我们要尽可能地走向终点</p><p>为了更好地存储我们的点以及两个点之间的权，我们创立一个<strong>结构体变量</strong>(结构体就不用解释了吧…)</p><pre class="line-numbers language-none"><code class="language-none">#include&lt;iostream&gt;#include&lt;algorithm&gt;#include&lt;cstring&gt;using namespace std;const int N &#x3D; 510, M &#x3D; 100010;struct Edge&#123;    int a, b, c;&#125;edge[M];</code></pre><p>紧接着,我们再定义相关变量</p><pre class="line-numbers language-none"><code class="language-none">int n, m, k;int last[N], dist[N];</code></pre><p><code>dist[N]</code>是用来<strong>存储我们的每个点到原点的最近距离的</strong>，而<code>last[N]</code>是用来<strong>记忆我们的上上步是怎么走的</strong></p><h3 id="last的理解"><a href="#last的理解" class="headerlink" title="last的理解"></a>last的理解</h3><p>​        还记得之前的第一篇最短路的博客吗？里面的小故事有提到过桥的概念，就是说我们每走一步，都会更新我们的位置，但是在这个题中我们不可以用那种思维来写，请看此题</p><p>要求: 我们要在1步之内走到终点</p><pre class="line-numbers language-none"><code class="language-none">图  1    11 -&gt; 2 -&gt; 3 \-------&#x2F;     3</code></pre><p>上面那幅图，如果我们按照走桥的思维走，我们最少只要2的权，但是需要走2步，这是不合理的</p><pre class="line-numbers language-none"><code class="language-none">     1    2   3    (00指无穷)第0步 0   00  00第1步 0    1  00第2步 0    1   2</code></pre><p>我们要满足题目所给的要求，这就需要我们走下面那个权为3的桥，这才可以满足题目中走一步的要求</p><pre class="line-numbers language-none"><code class="language-none">     1    2   3    (00指无穷)第0步 0   00  00第1步 0    1  00第2步 0    1   3    (用last记录了上上步的位置)</code></pre><h3 id="定义类代码书写"><a href="#定义类代码书写" class="headerlink" title="定义类代码书写"></a>定义类代码书写</h3><p>定义代码如下</p><pre class="line-numbers language-none"><code class="language-none">int main()&#123;&#x2F;&#x2F;按照题目要求输入    scanf(&quot;%d%d%d&quot;, &amp;n, &amp;m, &amp;k);    int i;    &#x2F;&#x2F;一共有m次相连接的点    for (i &#x3D; 0; i &lt; m; i++)    &#123;        int a, b, c;        scanf(&quot;%d%d%d&quot;, &amp;a, &amp;b, &amp;c);        edge[i] &#x3D; &#123; a,b,c &#125;;    &#125;    &#x2F;&#x2F;进入函数    int t &#x3D; boolmen_ford();    &#x2F;&#x2F;判断并输出    if (t &gt; 0x3f3f3f3f &#x2F; 2) puts(&quot;impossible&quot;);    else printf(&quot;%d&quot;, t);    return 0;&#125;</code></pre><h3 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h3><pre class="line-numbers language-none"><code class="language-none">int boolmen_ford()&#123;&#x2F;&#x2F;初始化所有的距离离原点为无穷    memset(dist, 0x3f, sizeof(dist));    &#x2F;&#x2F;初始化第一个点即原点到原点的距离为0    dist[1] &#x3D; 0;    int i;    &#x2F;&#x2F;一共最多k步    for (i &#x3D; 0; i &lt; k; i++)    &#123;    &#x2F;&#x2F;记忆化        memcpy(last, dist, sizeof(dist));        &#x2F;&#x2F;对于每个找到的新点更新        for (int j &#x3D; 0; j &lt; m; j++)        &#123;        &#x2F;&#x2F;自动变量识别            auto e &#x3D; edge[j];            &#x2F;&#x2F;求在k步之内的最小权            dist[e.b] &#x3D; min(dist[e.b], last[e.a] + e.c);        &#125;    &#125;    &#x2F;&#x2F;返回值    return dist[n];&#125;</code></pre><h2 id="结尾的话"><a href="#结尾的话" class="headerlink" title="结尾的话"></a>结尾的话</h2><p>首先,希望个位如果看到有什么错误的地方，或者说对于某些语句有更好的解释的话，烦请告知我(<code>qq1594463152</code>),我看到后会立刻修改自己的错误和错误的思考方向</p><p>另外,如果你用心看到这里的话，相信你一定可以学有所获！不过多多练习才是最重要的哦</p><h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><p>———引自<code>acwing</code>算法基础课</p><p>​                                        <code>yxc</code>主讲</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;bellman-ford算法&quot;&gt;&lt;a href=&quot;#bellman-ford算法&quot; class=&quot;headerlink&quot; title=&quot;bellman-ford算法&quot;&gt;&lt;/a&gt;bellman-ford算法&lt;/h1&gt;&lt;p&gt;今天，我们来讲讲第二种最短路算法，&lt;code</summary>
      
    
    
    
    <category term="c++算法" scheme="https://pxyfcywl.github.io/categories/c-%E7%AE%97%E6%B3%95/"/>
    
    <category term="最短路问题" scheme="https://pxyfcywl.github.io/categories/c-%E7%AE%97%E6%B3%95/%E6%9C%80%E7%9F%AD%E8%B7%AF%E9%97%AE%E9%A2%98/"/>
    
    
    <category term="最短路问题" scheme="https://pxyfcywl.github.io/tags/%E6%9C%80%E7%9F%AD%E8%B7%AF%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>最短路问题(dijkstra算法)</title>
    <link href="https://pxyfcywl.github.io/posts/aaaaaaaf.html"/>
    <id>https://pxyfcywl.github.io/posts/aaaaaaaf.html</id>
    <published>2022-11-21T08:13:15.000Z</published>
    <updated>2022-11-27T02:16:01.759Z</updated>
    
    <content type="html"><![CDATA[<h1 id="最短路问题的几种基本形式"><a href="#最短路问题的几种基本形式" class="headerlink" title="最短路问题的几种基本形式"></a>最短路问题的几种基本形式</h1><p>我们约定俗成这样的惯例，在今后遇到最短路问题的时候，<code>n</code>是格子数，<code>m</code>指的是行数</p><p><img src="/posts/aaaaaaaf/image-20221121181951928.png" alt="image-20221121181951928"></p><p>在学习最短路算法的时候，我们主要学习的是图论中的代码的实现，而不是侧重于对代码的证明</p><h3 id="小细节"><a href="#小细节" class="headerlink" title="小细节"></a>小细节</h3><p><strong>稀疏图用堆优化，稠密图用朴素算法，负权边多用<code>spfa</code></strong></p><p><strong>边数分析的情况下，边数很多时，稠密图用邻接矩阵，稀疏图用邻接表来存</strong></p><p><strong>最短路只考虑有向图的应用，无向图是一种特殊的有向图</strong></p><p>有向图的意思是指两个点是有指向性的，就比如说有两个点<code>a</code>,<code>b</code>，<code>a</code>点指向<code>b</code>点，这就是<strong>指向性</strong></p><p>而无向图的意思就是指<code>a</code>和<code>b</code>之间是没有指向性的，那我们就可以人为的进行指向性判断，我们让它们两个互相指向，这样的话不就相当于没有指向性了吗?(嘿嘿(●ˇ∀ˇ●))</p><h1 id="朴素dijkstra算法"><a href="#朴素dijkstra算法" class="headerlink" title="朴素dijkstra算法"></a>朴素<code>dijkstra</code>算法</h1><p>现在我们来介绍一下最短路问题中的第一种单源最短路算法，它的典型例题是这样的</p><h3 id="1-例题"><a href="#1-例题" class="headerlink" title="1.例题"></a>1.例题</h3><p>给定一个 <code>n</code> 个点 <code>m</code> 条边的有向图，图中可能存在重边和自环，所有边权均为正值。</p><p>请你求出 1 号点到 <code>n</code> 号点的最短距离，如果无法从 1 号点走到 <code>n</code> 号点，则输出 −1</p><h4 id="1-1-输入格式"><a href="#1-1-输入格式" class="headerlink" title="1.1.输入格式"></a>1.1.输入格式</h4><p>第一行包含整数 <code>n</code> 和 <code>m</code>。</p><p>接下来 <code>m</code> 行每行包含三个整数 <code>x</code>,<code>y</code>,<code>z</code>，表示存在一条从点 <code>x</code> 到点<code>y</code> 的有向边，边长为<code>z</code></p><h4 id="1-2输出格式"><a href="#1-2输出格式" class="headerlink" title="1.2输出格式"></a>1.2输出格式</h4><p>输出一个整数，表示 1 号点到 <code>n</code> 号点的最短距离。</p><p>如果路径不存在，则输出 −1</p><p><img src="/posts/aaaaaaaf/image-20221121193011227.png" alt="image-20221121193011227"></p><h2 id="题目解释和算法构建"><a href="#题目解释和算法构建" class="headerlink" title="题目解释和算法构建"></a>题目解释和算法构建</h2><p>​        这道题的意思是说，我们有三个点，三条边(在这道例题里面是没有无向边的说法的)，第一次我们连了1和2，第二次我们连了2和3，第三次我们连了1和3，图像长这样</p><p><img src="/posts/aaaaaaaf/image-20221121183522732.png" alt="image-20221121183522732"></p><p>​        我们现在要输出最短路的距离，我来说一个小故事吧</p><h3 id="1-过桥"><a href="#1-过桥" class="headerlink" title="1.过桥"></a>1.过桥</h3><p>​        记得在小学的时候我们学习过一种规划时间的方法，比如说我现在要做一个番茄炒鸡蛋，要打鸡蛋，洗番茄，煮米饭，炒菜，它们的时间不同，我们该怎么用最短的时间完成所有的方案后顺利吃到我们想要的菜呢？这时候就需要合理的规划时间了</p><p>​        同时，我们看上面的这幅图是不是很像三座桥，2 1 4就是我们过桥所需要的时间，现在我们想知道，当我们从第一座桥出发，到最后一座桥需要的最快时间是多少。用肉眼我们可以很快的知道答案是3。但是电脑不知道，这时候就需要我们设计算法了。</p><h4 id="小思考"><a href="#小思考" class="headerlink" title="小思考"></a>小思考</h4><p>​        我们思考一下，从第一座桥出发，第一座桥到第一座桥需要多长时间呢？(这不很简单嘛，作者怎么会问这么智障的问题？？？)，答案是0，我们就在桥的上面，现在我们的第一座桥连着哪些桥呢？连着2号桥和3号桥，我们看看第二座桥和第三座桥分别到第一座桥的时间分别是2和4，如果是你，你想要快点到终点，你会选择哪座桥呢？</p><p>​        答案无疑是2号桥，现在我们去到2号桥吧</p><h3 id="2-第二座桥"><a href="#2-第二座桥" class="headerlink" title="2.第二座桥"></a>2.第二座桥</h3><p>​        我们来到了2号桥，2号桥连接着哪些桥呢？(连着1号和3号，这不显而易见嘛(●ˇ∀ˇ●))，我们刚刚走过了1号桥了，总不可能再走一次1号桥了吧，所以我们去分析3号桥，3号桥离2号桥的距离是1，2号桥离1号桥的距离是2，这时候我们去到3号桥就有了两种情况，一种要走3步，一种要走4步，为了更快的到达终点，我们选择走3步的，这时候3号桥的距离被刷新成3了，这样一来我们也找到了最快过桥方案</p><p>[说明图如下]</p><p><img src="/posts/aaaaaaaf/image-20221121183537626.png" alt="image-20221121183537626"></p><h2 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h2><p>1.初始化距离(只有起点距离确定)，<code>dist[1]=0</code>,<code>dist[i] =</code> 极大的数(因为我们并不知道要多大)</p><p>2.<code>for</code>循环，循环<code>n</code>次</p><p>2.1已确定最短距离的点<code>s</code>,找到不在<code>s</code>中的距离最近的点<code>t</code></p><p>2.2把<code>t</code>加到<code>s</code>中去</p><p>2.3用<code>t</code>更新其它点的距离<code>dist[x]&gt;dist[t]</code></p><h3 id="1-重边和闭环"><a href="#1-重边和闭环" class="headerlink" title="1.重边和闭环"></a>1.重边和闭环</h3><p>重边<code>(1,2)</code>与闭环<code>(1)</code></p><p>重边就是自己修了两条走向同一个位置的桥</p><p>闭环就是自己修了一条走向自己的桥</p><p><img src="/posts/aaaaaaaf/image-20221121184444798.png" alt="image-20221121184444798"></p><p>重边:只要保留最短的那条边就可以了，<code>g[a][b]</code>=<code>min(g[a][b],c)</code>,</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="1-定义初始值"><a href="#1-定义初始值" class="headerlink" title="1.定义初始值"></a>1.定义初始值</h3><pre class="line-numbers language-code" data-language="code"><code class="language-code">#include&lt;iostream&gt;#include&lt;cstring&gt;#include&lt;algorithm&gt;using namespace std;const int N &#x3D; 510;int n,m;int g[N][N],dist[N];bool st[N];</code></pre><pre class="line-numbers language-code" data-language="code"><code class="language-code">int main()&#123;    scanf(&quot;%d%d&quot;,&amp;n,&amp;m);    memset(g,0x3f,sizeof(g));    while(m--)    &#123;        int a,b,c;        scanf(&quot;%d%d%d&quot;,&amp;a,&amp;b,&amp;c);        g[a][b] &#x3D; min(g[a][b],c);    &#125;    cout&lt;&lt;dijkstra()&lt;&lt;endl;    return 0;&#125;</code></pre><p>其中，<code>n,m,a,b,c</code>都是题目要求的输出变量</p><p>​        定义的<code>bool</code>变量<code>st</code>是用来看我们的桥有没有走过，<code>g[][]</code>是说明<code>a</code>号点与<code>b</code>号点相连接的桥的距离(无向边则表示的是相连的最小距离)，<code>dist</code>变量指的是目前我们所处的这座桥到原点的最短距离</p><p>开始我们按照题目要求输入，开始把<code>g</code>数组的值放的很大，<code>0x3f3f3f3f</code>是一个很大的数了(为什么上面只写了<code>0x3f</code>呢,因为g是一个<code>int</code>变量，而<code>0x3f</code>所指的是<code>char</code>变量的，<code>int</code>变量是<code>char</code>变量的4倍，所以是<code>0x3f3f3f3f</code>)</p><h3 id="2-进入dijkstra函数"><a href="#2-进入dijkstra函数" class="headerlink" title="2.进入dijkstra函数"></a>2.进入<code>dijkstra</code>函数</h3><p>理解的话，我们可以按照上面的算法构建和实现来理解，下面只是对理解形成代码的一种形式(也很重要)<br>这里面的<code>i</code>只要遍历<code>n-1</code>次就可以了,最后的不用遍历了</p><pre class="line-numbers language-code" data-language="code"><code class="language-code">int dijkstra()&#123;memset (dist, 0x3f, sizeof(dist));dist[1] &#x3D; 0;int i, j;for (i &#x3D; 0;i &lt; n - 1; i++)&#123;int t &#x3D; -1;&#x2F;&#x2F;从第一座桥开始遍历，知道找到离第一座桥最短的那座桥for (j &#x3D; 1; j &lt;&#x3D; n; j++)&#123;&#x2F;&#x2F;如果这座桥没有被遍历过&amp;&amp;(没有离开第一座桥 现在 所呆着的桥与原桥的位置 比 新找的桥与原桥的位置 大)if (!st[j] &amp;&amp; (t &#x3D;&#x3D; -1 || dist[t] &gt; dist[j]))&#x2F;&#x2F;更新现在所待的桥t &#x3D; j;&#125;&#x2F;&#x2F;从新找的桥的位置开始，把其它没有走过的桥的 原桥到原点的距离 和原桥从我们现在处于的桥的距离与现出的桥到原点距离之和 比较最小值for (j &#x3D; 1; j &lt;&#x3D; n; j++)&#123;dist[j] &#x3D; min(dist[j], dist[t] + g[t][j]);&#125;&#x2F;&#x2F;走过的桥标记一下st[t] &#x3D; true;&#125;if (dist[n] &#x3D;&#x3D; 0x3f3f3f3f) return -1;else return dist[n];&#125;</code></pre><h3 id="3-输出结果"><a href="#3-输出结果" class="headerlink" title="3.输出结果"></a>3.输出结果</h3><p><img src="/posts/aaaaaaaf/image-20221121202532387.png" alt="image-20221121202532387"></p><h2 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h2><p>从这一章节开始便是正式进入了最短路的这个系列的学习了，笔者也是学了一个知识点，总结之后便发表出来了，这里面可能会存在很多漏洞和未解释清楚的东西，如果有发现的话还请麻烦联系我(<code>qq1594463152</code>)更改内容(不能让这屑作毒害别人<code>hhh</code>)</p><h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><p>—acwing算法基础课 (yxc主讲)</p><h1 id="堆优化版的dijstra算法"><a href="#堆优化版的dijstra算法" class="headerlink" title="堆优化版的dijstra算法"></a>堆优化版的<code>dijstra</code>算法</h1><p>时间复杂度<code>mlogn</code></p><p>实现堆:手写堆，或者优先队列<code>stl</code>算法</p><p>算法实现: 稀疏图，采用邻接表的形式进行(邻接表指的是多个单链表)</p><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><pre class="line-numbers language-code" data-language="code"><code class="language-code">#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;#include &lt;queue&gt;using namespace std;typedef pair&lt;int, int&gt; PII;const int N &#x3D; 1e6 + 10;int n, m;int h[N], w[N], e[N], ne[N], idx;int dist[N];bool st[N];</code></pre><p>​        在单链表专栏中我们有专门介绍<code>e[N],ne[N],idx</code>三个链表中变量的意思, <code>e[N]</code>的意思是保存数字用的,<code>ne[N]</code>是用来存储地址的，<code>idx</code>指的是队列(或列表)中一共有多少次链接</p><p>​        <code>w[N]</code>指的是我们每一条路的权重，就是说我们一给点到另外一个点所需要的权重值(也就是过桥所需要的时间)，<code>h[a]</code>的意思是记录我们在进行链表存储中所需要的数值</p><p>​        在我们按照题目要求输入<code>n</code>,<code>m</code>后，便是我们的算法开始了</p><p>​        首先，作为邻接表，它的表头要首先初始化为空，便于我们后续的<code>idx</code>操作</p><p>​        我们要用一个堆来维护所有点的距离, 在维护所有距离的时候，我们还要知道相对的点的编号是多少, 因此我们要一个<code>pair</code>容器来存储</p><p>​        <strong>注意：用邻接表存储的时候有重复边也没有关系，我们的邻接表会一一记录下来的同时，会选择最小的那个边</strong></p><pre class="line-numbers language-code" data-language="code"><code class="language-code">int main()&#123;    scanf(&quot;%d%d&quot;, &amp;n, &amp;m);    memset(h, -1, sizeof h);    while (m--)    &#123;        int a, b, c;        scanf(&quot;%d%d%d&quot;, &amp;a, &amp;b, &amp;c);        add(a, b, c);    &#125;    cout &lt;&lt; dijkstra() &lt;&lt; endl;    return 0;&#125;</code></pre><h2 id="单链表操作"><a href="#单链表操作" class="headerlink" title="单链表操作"></a>单链表操作</h2><p>​        代码解释: 第一步是对<code>b</code>的数进行存储,说明<code>a</code>是与<code>b</code>有相连的</p><p>​        <code>w</code>是对权重的一个存储, <code>ne</code>操作便是给<code>a</code>这个位置添加一个新的单链</p><pre class="line-numbers language-code" data-language="code"><code class="language-code">void add(int a, int b, int c)&#123;e[idx] &#x3D; b, w[idx] &#x3D; c, ne[idx] &#x3D; h[a], h[a] &#x3D; idx++;&#125;</code></pre><h2 id="dijkstra算法代码实现"><a href="#dijkstra算法代码实现" class="headerlink" title="dijkstra算法代码实现"></a><code>dijkstra</code>算法代码实现</h2><p>很多人可能不知道下面的一串较长的代码是怎么回事, 其实它就是优先队列里面的一种</p><p>详情见(<code>c++</code>中的<code>stl</code>算法—堆)</p><pre class="line-numbers language-code" data-language="code"><code class="language-code">int dijkstra()&#123;    memset(dist, 0x3f, sizeof dist);    dist[1] &#x3D; 0;    &#x2F;&#x2F;定义一个优先队列    priority_queue&lt;PII, vector&lt;PII&gt;, greater&lt;PII&gt;&gt; heap;    &#x2F;&#x2F;入队    heap.push(&#123; 0, 1 &#125;);    while (heap.size())    &#123;    &#x2F;&#x2F;取出队列中的第一个最大优先级的元素        auto t &#x3D; heap.top();        &#x2F;&#x2F;删除队列中最大优先级的元素        heap.pop();        int ver &#x3D; t.second, distance &#x3D; t.first;        if (st[ver]) continue;        st[ver] &#x3D; true;        for (int i &#x3D; h[ver]; i !&#x3D; -1; i &#x3D; ne[i])        &#123;            int j &#x3D; e[i];            if (dist[j] &gt; dist[ver] + w[i])            &#123;                dist[j] &#x3D; dist[ver] + w[i];                heap.push(&#123; dist[j], j &#125;);            &#125;        &#125;    &#125;    if (dist[n] &#x3D;&#x3D; 0x3f3f3f3f) return -1;    return dist[n];&#125;</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;最短路问题的几种基本形式&quot;&gt;&lt;a href=&quot;#最短路问题的几种基本形式&quot; class=&quot;headerlink&quot; title=&quot;最短路问题的几种基本形式&quot;&gt;&lt;/a&gt;最短路问题的几种基本形式&lt;/h1&gt;&lt;p&gt;我们约定俗成这样的惯例，在今后遇到最短路问题的时候，&lt;cod</summary>
      
    
    
    
    <category term="c++算法" scheme="https://pxyfcywl.github.io/categories/c-%E7%AE%97%E6%B3%95/"/>
    
    <category term="最短路问题" scheme="https://pxyfcywl.github.io/categories/c-%E7%AE%97%E6%B3%95/%E6%9C%80%E7%9F%AD%E8%B7%AF%E9%97%AE%E9%A2%98/"/>
    
    
    <category term="最短路问题" scheme="https://pxyfcywl.github.io/tags/%E6%9C%80%E7%9F%AD%E8%B7%AF%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>归并排序</title>
    <link href="https://pxyfcywl.github.io/posts/aaaaaaae.html"/>
    <id>https://pxyfcywl.github.io/posts/aaaaaaae.html</id>
    <published>2022-11-21T06:54:18.000Z</published>
    <updated>2022-11-25T02:38:45.612Z</updated>
    
    <content type="html"><![CDATA[<h1 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h1><h2 id="看前须知"><a href="#看前须知" class="headerlink" title="看前须知"></a>看前须知</h2><p>首先，归并排序和快速排序一样，在算法竞赛中可以直接使用<code>c++</code>中的<code>algorithm</code>来使用就行，但是在面试啊，笔试啊等一些可能要手写代码的地方上面，学习这个排序的思想和模板还是很好的。这个归并排序算法主要运用了二分的思想，对于一个有穷无序数组进行每回分成两半的方式来进行。</p><h3 id="崩坏3小剧场"><a href="#崩坏3小剧场" class="headerlink" title="崩坏3小剧场"></a>崩坏3小剧场</h3><p>正如我听过的一句话，如符华小姐所说，我们先制作一个馒头，第一天吃一半，第二天吃第一天的一半，第三天吃第二天的一半，这样下去就可以永远吃不完我们的馒头了<code>hhh</code></p><h2 id="题目概要"><a href="#题目概要" class="headerlink" title="题目概要"></a>题目概要</h2><p>给定你一个长度为 <code>n</code>的整数数列。请你使用归并排序对这个数列按照从小到大进行排序。并将排好序的数列按顺序输出。</p><p>输入格式</p><p>输入共两行，第一行包含整数 <code>n</code>。</p><p>第二行包含 <code>n</code> 个整数（所有整数均在 <code>1∼10^9</code>,<code>1∼10^9</code> 范围内, 表示整个数列。）</p><p>输出格式</p><p>输出共一行，包含 <code>n</code> 个整数，表示排好序的数列。</p><p><img src="/posts/aaaaaaae/image-20221121145926015.png" alt="image-20221121145926015"></p><h2 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h2><pre class="line-numbers language-code" data-language="code"><code class="language-code">void merge_sort(int q[], int l, int r)&#123;if (l &gt;&#x3D; r)return;int mid &#x3D; l + r &gt;&gt; 1;&#x2F;&#x2F;二进制左移1，相当于除以2merge_sort(q, l, mid); merge_sort(q, mid + 1, r);int k &#x3D; 0, i &#x3D; l, j &#x3D; mid + 1;while (i &lt;&#x3D; mid &amp;&amp; j &lt;&#x3D; r)&#123;if (q[i] &lt;&#x3D; q[j])tmp[k++] &#x3D; q[i++];else tmp[k++] &#x3D; q[j++];&#125;while (i &lt;&#x3D; mid)tmp[k++] &#x3D; q[i++];while (j &lt;&#x3D; r)tmp[k++] &#x3D; q[j++];for (i &#x3D; l, j &#x3D; 0; i &lt;&#x3D; r; i++, j++) q[i] &#x3D; tmp[j];&#125;</code></pre><p>开始的操作和快速排序算法是一样的，如果我们的数列只有一个数了，那我们就不用再继续折腾下去了，直接<code>return</code>就行</p><p>我们假如有这样一行无序数列(数组<code>hh</code>) 3 6 4 9 0 2 1 4 5 7，我们把它分成两半，一半是3 6 4 9 0，另一半是2 1 4 5 7，我们又搞了两个指针<code>i</code>,<code>j</code>它们分别指向第一半和第二半即<code>i=0</code>,<code>j=5</code>我们一个一个比较。首先<code>i</code>指向的数是3，<code>j</code>指向的数是2，<code>2 &lt; 3</code>,我们把2放到新的一个数组里面，设新数组的名字是<code>tmp</code>吧(才，才不是配合我的图片呢<code>hhh</code>),放进去后我们继续，<code>1&lt;3</code>，好，我们把1放到<code>tmp</code>里面，继续！这下子<code>4&gt;3</code>了，我们把3放到<code>tmp</code>里面，不断轮回，最终<code>tmp</code>数组里面的数是这样的 2 1 3 4 5 6 4 7这样的情况，欸，怎么会没有9和0呢？你想，我们让数字进入<code>tmp</code>数组的要求是不是要另外一边的数比它大啊，可是到了9后，<code>j</code>那边没有数比它大了，<code>j</code>已经输了，但是我们的数字还没有全部进去，这时候我们就要对剩下的数进行一个遍历，确保它们全部进去才行，这样以后全部的数都进去了，<code>tmp</code>也成了2 1 3 4 5 6 4 7 9 0，这时候我们开始一轮新的循环，也就是符华小姐吃面包啦，分成两边各自进行排列，排啊排，最后我们可以得到我们想要的答案了,0 1 2 3 4 4 5 6 7 9正是我们想要的结果，很好很好。</p><h2 id="结果实现和算法设计中需要的变量"><a href="#结果实现和算法设计中需要的变量" class="headerlink" title="结果实现和算法设计中需要的变量"></a>结果实现和算法设计中需要的变量</h2><pre class="line-numbers language-code" data-language="code"><code class="language-code">#include&lt;iostream&gt;using namespace std;const int N &#x3D; 1e6 + 10;int q[N], n,tmp[N];</code></pre><pre class="line-numbers language-code" data-language="code"><code class="language-code">int main()&#123;int i;scanf_s(&quot;%d&quot;, &amp;n);for (i &#x3D; 0; i &lt; n; i++)scanf_s(&quot;%d&quot;, &amp;q[i]);merge_sort(q, 0, n - 1);for (i &#x3D; 0; i &lt; n; i++)printf(&quot;%d &quot;, q[i]);return 0;&#125;</code></pre><p><img src="/posts/aaaaaaae/image-20221121152620976.png" alt="image-20221121152620976"></p><h2 id="结尾的话"><a href="#结尾的话" class="headerlink" title="结尾的话"></a>结尾的话</h2><p>看完文章后建议自己动手试一试哦(⊙o⊙)，听说这样的话更容易记忆呢</p><h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><p>—acwing算法基础课 (yxc主讲)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;归并排序&quot;&gt;&lt;a href=&quot;#归并排序&quot; class=&quot;headerlink&quot; title=&quot;归并排序&quot;&gt;&lt;/a&gt;归并排序&lt;/h1&gt;&lt;h2 id=&quot;看前须知&quot;&gt;&lt;a href=&quot;#看前须知&quot; class=&quot;headerlink&quot; title=&quot;看前须知&quot;&gt;&lt;/a</summary>
      
    
    
    
    <category term="c++算法" scheme="https://pxyfcywl.github.io/categories/c-%E7%AE%97%E6%B3%95/"/>
    
    <category term="排序" scheme="https://pxyfcywl.github.io/categories/c-%E7%AE%97%E6%B3%95/%E6%8E%92%E5%BA%8F/"/>
    
    
    <category term="归并排序" scheme="https://pxyfcywl.github.io/tags/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>快速排序</title>
    <link href="https://pxyfcywl.github.io/posts/aaaaaaad.html"/>
    <id>https://pxyfcywl.github.io/posts/aaaaaaad.html</id>
    <published>2022-11-20T11:17:00.000Z</published>
    <updated>2022-11-25T02:37:59.274Z</updated>
    
    <content type="html"><![CDATA[<h1 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h1><p>给定你一个长度为 <code>n</code>的整数数列。</p><p>请你使用快速排序对这个数列按照从小到大进行排序。</p><p>并将排好序的数列按顺序输出。</p><p><img src="/posts/aaaaaaad/image-20221120203230081.png" alt="image-20221120203230081"></p><h2 id="前摘提要"><a href="#前摘提要" class="headerlink" title="前摘提要"></a>前摘提要</h2><p>首先我先来介绍一下快速排序算法，它被誉为最快排序算法，可以快到<code>nlogn</code>级别，而且在<code>c++</code>中已经有了相关的函数<code>sort()</code>,所以在算法竞赛中它的模板其实也没有那么重要(毕竟算法竞赛是要赶时间的嘛，太慢了题都搞不定)，但是这里还是要介绍一下这个算法的思想。</p><h2 id="算法思想"><a href="#算法思想" class="headerlink" title="算法思想"></a>算法思想</h2><pre class="line-numbers language-code" data-language="code"><code class="language-code">void quick_sort(int q[], int l, int r)&#123;if (l &gt;&#x3D; r) return;int x &#x3D; q[l]; int i &#x3D; l - 1, j &#x3D; r + 1;while (i &lt; j)&#123;do i++; while (q[i] &lt; x);do j--; while (q[j] &gt; x);if (i &lt; j) swap(q[i], q[j]);&#125;quick_sort(q, l, j);quick_sort(q, j + 1, r);&#125;</code></pre><p>它主要是采用了双指针的思想来解题的，也就是说我们创建两个指针(其实不是真要创建两个指针，实际上是两个变量<code>l</code>,<code>r</code>)   一个呢，从左到右来进行，一个从右到左来进行,我们再设立一个中间量，就第三个数了</p><p>我们以示例来讲，假设<code>l</code>在左边，<code>r</code>在右边，我们要从小到大来排序，先看<code>l</code>，它指向了第一个数3，3比2大，好<code>l</code>停下来，让<code>r</code>走，<code>r</code>走啊走，走到第四位时大于2，走到第三位时相等了，此时呢我们发现<code>l</code>所指的数3是大于<code>r</code>所指的数的，我们交换一下<code>l</code>和<code>r</code>的数字位置，此时排序变成了 2 1 3 4 5，我们再进行一次快排</p><h3 id="新的循环"><a href="#新的循环" class="headerlink" title="新的循环"></a>新的循环</h3><p>此时的排序是2 1 3，我们还是取中间的量1，<code>l</code>所指的数刚好比1大，停下来，<code>r</code>指的数比1小，再退一个，<code>r</code>现在指的数就是1了，现在<code>l</code>左边的数是严格小于的，<code>r</code>右边的数是严格大于的，交换两数后，变成1 2 3了，我们再进入一次快排</p><h3 id="最后的循环"><a href="#最后的循环" class="headerlink" title="最后的循环"></a>最后的循环</h3><p>我们发现两个循环1 2 3和4 5是严格从小到大的，这时候我们就可以返回去输出了，这样的算法复杂度是最快的</p><h2 id="输出答案和程序书写建议"><a href="#输出答案和程序书写建议" class="headerlink" title="输出答案和程序书写建议"></a>输出答案和程序书写建议</h2><p>下面是定义变量，函数应用和输出变量的写法，谢谢观看@*@！</p><pre class="line-numbers language-code" data-language="code"><code class="language-code">#include&lt;iostream&gt;#include&lt;algorithm&gt;#include&lt;cstdio&gt;using namespace std;const int N &#x3D; 1e6 + 10;int q[N], n;</code></pre><pre class="line-numbers language-code" data-language="code"><code class="language-code">int main()&#123;scanf_s(&quot;%d&quot;, &amp;n);for (int i &#x3D; 0; i &lt; n; i++)&#123;scanf_s(&quot;%d&quot;, &amp;q[i]);&#125;quick_sort(q, 0, n - 1);for (int i &#x3D; 0; i &lt; n; i++)&#123;printf(&quot;%d &quot;, q[i]);&#125;return 0;&#125;</code></pre><h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><p>—acwing算法基础课 (yxc主讲)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;快速排序&quot;&gt;&lt;a href=&quot;#快速排序&quot; class=&quot;headerlink&quot; title=&quot;快速排序&quot;&gt;&lt;/a&gt;快速排序&lt;/h1&gt;&lt;p&gt;给定你一个长度为 &lt;code&gt;n&lt;/code&gt;的整数数列。&lt;/p&gt;
&lt;p&gt;请你使用快速排序对这个数列按照从小到大进行排序。&lt;</summary>
      
    
    
    
    <category term="c++算法" scheme="https://pxyfcywl.github.io/categories/c-%E7%AE%97%E6%B3%95/"/>
    
    <category term="排序" scheme="https://pxyfcywl.github.io/categories/c-%E7%AE%97%E6%B3%95/%E6%8E%92%E5%BA%8F/"/>
    
    
    <category term="快速排序" scheme="https://pxyfcywl.github.io/tags/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>拼图问题</title>
    <link href="https://pxyfcywl.github.io/posts/aaaaaaab.html"/>
    <id>https://pxyfcywl.github.io/posts/aaaaaaab.html</id>
    <published>2022-11-20T08:10:33.000Z</published>
    <updated>2022-11-25T02:39:42.424Z</updated>
    
    <content type="html"><![CDATA[<h1 id="bfs中的八数码问题"><a href="#bfs中的八数码问题" class="headerlink" title="bfs中的八数码问题"></a><code>bfs</code>中的八数码问题</h1><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><p>在一个 3×33×3 的网格中，1∼8 1∼8 这 88 个数字和一个 <code>x</code> 恰好不重不漏地分布在这 3×3 3×3 的网格中。</p><p>例如：</p><p><img src="/posts/aaaaaaab/image-20221120161740222.png" alt="image-20221120161740222"></p><p>在游戏过程中，可以把 <code>x</code> 与其上、下、左、右四个方向之一的数字交换（如果存在）。</p><p>我们的目的是通过交换，使得网格变为如下排列（称为正确排列）：</p><p><img src="/posts/aaaaaaab/image-20221120161815754.png" alt="image-20221120161815754"></p><p>例如，示例中图形就可以通过让 <code>x</code> 先后与右、下、右三个方向的数字交换成功得到正确排列。</p><p>交换过程如下:</p><p><img src="/posts/aaaaaaab/image-20221120161846011.png" alt="image-20221120161846011"></p><p>现在，给你一个初始网格，请你求出得到正确排列至少需要进行多少次交换。</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>看完了题目，这让我想起，我们之前可能玩过一种拼图的游戏，在玩游戏的过程中我们会得到一张比较好看的图片，但是它缺了一个口！然后呢，别人将这个图片给打乱了，就像9宫格这样打乱，让我们一个一个对着这个口移动回去。</p><p>在移动的过程中我们会发现，我们不是计算机，不可以很快的判断出我们要移动几步，因此我们会先按照我们的感觉，对<code>x</code>这个缺口的上下左右依次进行移动，看看移动之后是否会更快地把这个拼图给拼回去。但是我们在拼图的时候也可能会出现重复的情况，比如我们移动了若干步，最后我们还是回到了起点，这样的话，我们之前移动的那些步数不就直接没有用了吗？</p><p>所以，为了让我们的计算机不犯这种低级错误，我们得让我们的计算机知道我们之前走过哪些步骤，这就需要<code>stl</code>中的<code>unordered_map</code>来发挥作用了，我们可以把我们的状态用<code>string</code>类型的字符串来表示，<code>int</code>类型用来记录这种已经出现过的步数是什么时候走过的，同时为了管理我们的步数，我们还要添加一个<code>stl</code>中的<code>queue</code>容器来存储我们的步数</p><p>以下便是我们的初始状态</p><pre class="line-numbers language-none"><code class="language-none">#include&lt;iostream&gt;#include&lt;algorithm&gt;#include&lt;queue&gt;#include&lt;unordered_map&gt;using namespace std;const int N &#x3D; 100010;</code></pre><pre class="line-numbers language-none"><code class="language-none">int main()&#123;    string start;    for (int i &#x3D; 0; i &lt; 9; i++)    &#123;        char ch[2];        cin &gt;&gt; ch;        start +&#x3D; *ch;    &#125;    cout &lt;&lt; bfs(start) &lt;&lt; endl;&#125;</code></pre><p>我们用<code>string</code>类型的字符串数组来存储我们一开始的棋盘格局，例如<code>string start = &quot;123x46758&quot;</code>,这样子也可以与我们的<code>map</code>保持一致，下面的<code>for</code>循环便是我们对初始状态的赋值</p><p>最后对于<code>bfs(start)</code>的返回值进行输出就得到结果啦！</p><h2 id="bfs函数的算法设计"><a href="#bfs函数的算法设计" class="headerlink" title="bfs函数的算法设计"></a>bfs函数的算法设计</h2><pre class="line-numbers language-none"><code class="language-none">queue&lt;string&gt; q;    unordered_map&lt;string, int&gt; d;    q.push(start);    d[start] &#x3D; 0;    int dx[4] &#x3D; &#123; -1,0,1,0 &#125;, dy[4] &#x3D; &#123; 0,1,0,-1 &#125;;    string end &#x3D; &quot;12345678x&quot;;</code></pre><p>上面的<code>q</code>,<code>d</code>是我们定义的两个<code>stl</code>容器，<code>q.push(start)</code>就是把我们的初始状态放到队列中，<code>d[start]</code>是用来记录这是我们第几步得到的结果，如上述的0就是我们的初始状态。</p><p>玩游戏时我们要一一试错，计算机是很蠢的，它也要一一试错，这时我们就要定义偏移量了，下面的<code>dx</code>,<code>dy</code>数组就是给我们调偏移量的，最后我们也要让电脑知道它有没有调错是吧，那我们还要设置一个<code>string</code>字符串<code>end</code>来记录结束标志，一旦我们找到了解那就直接结束了。</p><h3 id="进入队列"><a href="#进入队列" class="headerlink" title="进入队列"></a>进入队列</h3><pre class="line-numbers language-none"><code class="language-none">while (q.size())    &#123;        &#x2F;&#x2F;入队        auto t &#x3D; q.front();        q.pop();        &#x2F;&#x2F;如果t的状态与end状态一致，返回数值        if (t &#x3D;&#x3D; end) return d[t];        int distance &#x3D; d[t];        &#x2F;&#x2F;找到x的位置        int k &#x3D; t.find(&#39;x&#39;);        &#x2F;&#x2F;技巧:从一维数组转成二维将(k&#x2F;竖直方向上的数)，(k%水平方向上的数)        int x &#x3D; k &#x2F; 3, y &#x3D; k % 3;        &#x2F;&#x2F;遍历每一处        for (int i &#x3D; 0; i &lt; 4; i++)        &#123;            int a &#x3D; x + dx[i], b &#x3D; y + dy[i];            if (a &gt;&#x3D; 0 &amp;&amp; a &lt; 3 &amp;&amp; b &gt;&#x3D; 0 &amp;&amp; b &lt; 3)            &#123;                &#x2F;&#x2F;将x值的位置与另外一个值交换                swap(t[a * 3 + b], t[k]);                &#x2F;&#x2F;如果没有换过(没有重复之前的状态)                if (!d.count(t))                &#123;                    d[t] &#x3D; distance + 1;                    q.push(t);                &#125;                &#x2F;&#x2F;状态恢复                swap(t[a * 3 + b], t[k]);            &#125;        &#125;    &#125;    return -1;</code></pre><p>首先，我们定义一个<code>auto</code>类型的变量<code>t</code>来更好地运用队列，引用队列中的第一个元素后，<code>q.pop()</code>把第一个元素出列，由于队列容器不支持我们拿出来它的中间值，所以我们这样做更加方便一些</p><p>每次我们先判断是否达到了预期效果，假如我们一开始就成功了，那就不用动图片任何一步就可以返回值了</p><p>我们在移动九宫格的时候是根据<code>x</code>的位置来进行移动的，同理，我们要让电脑找到我们<code>x</code>的位置在哪里，不然的话我们根本移动不了好吧，我们用<code>k</code>记录我们<code>x</code>的位置，用<code>distance</code>来记录当前步数所对应的值，比如在这个示例中，开始不是结束状态，我们不能一下子返回值，我们要拿一个<code>distance</code>来记录，由于我们一开始定义的<code>string</code>是一维数组的形式，这使得我们可以更好的找到<code>x</code>的位置</p><p>下面的方法就很有技巧性了，我们在一维数组中找到了<code>x</code>的位置，那怎么在二维数组上还原呢？有个技巧</p><h4 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧"></a>小技巧</h4><p>​        设一个一维数组的容量为100，把这个一维数组用二维数组4*25的形式表现出来，我们在一维数组上找的<code>x</code>的位置在72这个位置上(72指的是数组下标，指的是<code>a[72]</code>)，那么对应的二维数组上的位置就是<code>[72/25][72%25]</code>的位置上，也就是<code>[2][22]</code>这个位置，是不是很巧妙？</p><p>​        那么二维数组是怎么还原成一维数组呢？我们现在已经可以把一维数组转变成二维数组了，那么我们也可以通过这种方法把二维数组下标重新变成一维的形式，比如说在二维数组上的<code>a[1][15]</code>,二维数组的形式还是4<em>25,那么二维转一维就是`a[1</em>25+15]<code>,也就是</code>a[40]`</p><h2 id="遍历每一处"><a href="#遍历每一处" class="headerlink" title="遍历每一处"></a>遍历每一处</h2><p>现在我们进行傻瓜式移动，对<code>x</code>上下左右进行移动，只要它，欸，跟之前的不重复，没越界，我们就记录它好吧，我们设<code>a</code>,<code>b</code>是<code>x</code>移动后的坐标</p><p>只要不越界，我们就进入第一处循环，交换<code>x</code>与那个数字的位置</p><p>再到<code>map</code>地图中找一下有没有重复</p><p>没有的话，就再进入下一层<code>if</code></p><p>我们的<code>d[t]</code>也要在上一步<code>distance</code>距离的情况下加1(我们移了一步嘛)，然后进队<code>q.push(t)</code></p><h2 id="状态恢复"><a href="#状态恢复" class="headerlink" title="状态恢复"></a>状态恢复</h2><p>再来一次<code>swap</code>恢复状态，不影响后面的发挥</p><h2 id="得出结果"><a href="#得出结果" class="headerlink" title="得出结果"></a>得出结果</h2><p>要么<code>return d[t]</code>,要么<code>return -1</code></p><p>比如这个</p><p><img src="/posts/aaaaaaab/image-20221120171026630.png" alt="image-20221120171026630"></p><h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><p>—acwing算法基础课 (yxc主讲)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;bfs中的八数码问题&quot;&gt;&lt;a href=&quot;#bfs中的八数码问题&quot; class=&quot;headerlink&quot; title=&quot;bfs中的八数码问题&quot;&gt;&lt;/a&gt;&lt;code&gt;bfs&lt;/code&gt;中的八数码问题&lt;/h1&gt;&lt;h2 id=&quot;例题&quot;&gt;&lt;a href=&quot;#例题&quot; cl</summary>
      
    
    
    
    <category term="c++算法" scheme="https://pxyfcywl.github.io/categories/c-%E7%AE%97%E6%B3%95/"/>
    
    <category term="bfs宽度优先搜索" scheme="https://pxyfcywl.github.io/categories/c-%E7%AE%97%E6%B3%95/bfs%E5%AE%BD%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2/"/>
    
    
    <category term="bfs宽度优先搜索" scheme="https://pxyfcywl.github.io/tags/bfs%E5%AE%BD%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2/"/>
    
  </entry>
  
</feed>
