<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>浮云世事改, 过月此心明</title>
  
  <subtitle>披星戴月走过的路, 最终将会繁花满地。记住, 一个人, 便是千军万马</subtitle>
  <link href="https://pxyfcywl.github.io/atom.xml" rel="self"/>
  
  <link href="https://pxyfcywl.github.io/"/>
  <updated>2022-11-20T13:05:36.949Z</updated>
  <id>https://pxyfcywl.github.io/</id>
  
  <author>
    <name>彼岸花开</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>快速排序</title>
    <link href="https://pxyfcywl.github.io/posts/aaaaaaad.html"/>
    <id>https://pxyfcywl.github.io/posts/aaaaaaad.html</id>
    <published>2022-11-20T11:17:00.000Z</published>
    <updated>2022-11-20T13:05:36.949Z</updated>
    
    <content type="html"><![CDATA[<h1 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h1><p>给定你一个长度为 <code>n</code>的整数数列。</p><p>请你使用快速排序对这个数列按照从小到大进行排序。</p><p>并将排好序的数列按顺序输出。</p><p><img src="/posts/aaaaaaad/image-20221120203230081.png" alt="image-20221120203230081"></p><h2 id="前摘提要"><a href="#前摘提要" class="headerlink" title="前摘提要"></a>前摘提要</h2><p>首先我先来介绍一下快速排序算法，它被誉为最快排序算法，可以快到<code>nlogn</code>级别，而且在<code>c++</code>中已经有了相关的函数<code>sort()</code>,所以在算法竞赛中它的模板其实也没有那么重要(毕竟算法竞赛是要赶时间的嘛，太慢了题都搞不定)，但是这里还是要介绍一下这个算法的思想。</p><h2 id="算法思想"><a href="#算法思想" class="headerlink" title="算法思想"></a>算法思想</h2><p><img src="/posts/aaaaaaad/image-20221120205019465.png" alt="image-20221120205019465"></p><p>它主要是采用了双指针的思想来解题的，也就是说我们创建两个指针(其实不是真要创建两个指针，实际上是两个变量<code>l</code>,<code>r</code>)   一个呢，从左到右来进行，一个从右到左来进行,我们再设立一个中间量，就第三个数了</p><p>我们以示例来讲，假设<code>l</code>在左边，<code>r</code>在右边，我们要从小到大来排序，先看<code>l</code>，它指向了第一个数3，3比2大，好<code>l</code>停下来，让<code>r</code>走，<code>r</code>走啊走，走到第四位时大于2，走到第三位时相等了，此时呢我们发现<code>l</code>所指的数3是大于<code>r</code>所指的数的，我们交换一下<code>l</code>和<code>r</code>的数字位置，此时排序变成了 2 1 3 4 5，我们再进行一次快排</p><h3 id="新的循环"><a href="#新的循环" class="headerlink" title="新的循环"></a>新的循环</h3><p>此时的排序是2 1 3，我们还是取中间的量1，<code>l</code>所指的数刚好比1大，停下来，<code>r</code>指的数比1小，再退一个，<code>r</code>现在指的数就是1了，现在<code>l</code>左边的数是严格小于的，<code>r</code>右边的数是严格大于的，交换两数后，变成1 2 3了，我们再进入一次快排</p><h3 id="最后的循环"><a href="#最后的循环" class="headerlink" title="最后的循环"></a>最后的循环</h3><p>我们发现两个循环1 2 3和4 5是严格从小到大的，这时候我们就可以返回去输出了，这样的算法复杂度是最快的</p><h2 id="输出答案和程序书写建议"><a href="#输出答案和程序书写建议" class="headerlink" title="输出答案和程序书写建议"></a>输出答案和程序书写建议</h2><p>下面是定义变量，函数应用和输出变量的写法，谢谢观看@*@！</p><p><img src="/posts/aaaaaaad/image-20221120205933283.png" alt="image-20221120205933283"></p><p><img src="/posts/aaaaaaad/image-20221120205915333.png" alt="image-20221120205915333"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;快速排序&quot;&gt;&lt;a href=&quot;#快速排序&quot; class=&quot;headerlink&quot; title=&quot;快速排序&quot;&gt;&lt;/a&gt;快速排序&lt;/h1&gt;&lt;p&gt;给定你一个长度为 &lt;code&gt;n&lt;/code&gt;的整数数列。&lt;/p&gt;
&lt;p&gt;请你使用快速排序对这个数列按照从小到大进行排序。&lt;</summary>
      
    
    
    
    
    <category term="快速排序" scheme="https://pxyfcywl.github.io/tags/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>拼图问题</title>
    <link href="https://pxyfcywl.github.io/posts/aaaaaaab.html"/>
    <id>https://pxyfcywl.github.io/posts/aaaaaaab.html</id>
    <published>2022-11-20T08:10:33.000Z</published>
    <updated>2022-11-20T14:07:20.180Z</updated>
    
    <content type="html"><![CDATA[<h1 id="bfs中的八数码问题"><a href="#bfs中的八数码问题" class="headerlink" title="bfs中的八数码问题"></a><code>bfs</code>中的八数码问题</h1><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><p>在一个 3×33×3 的网格中，1∼8 1∼8 这 88 个数字和一个 <code>x</code> 恰好不重不漏地分布在这 3×3 3×3 的网格中。</p><p>例如：</p><p><img src="/posts/aaaaaaab/image-20221120161740222.png" alt="image-20221120161740222"></p><p>在游戏过程中，可以把 <code>x</code> 与其上、下、左、右四个方向之一的数字交换（如果存在）。</p><p>我们的目的是通过交换，使得网格变为如下排列（称为正确排列）：</p><p><img src="/posts/aaaaaaab/image-20221120161815754.png" alt="image-20221120161815754"></p><p>例如，示例中图形就可以通过让 <code>x</code> 先后与右、下、右三个方向的数字交换成功得到正确排列。</p><p>交换过程如下:</p><p><img src="/posts/aaaaaaab/image-20221120161846011.png" alt="image-20221120161846011"></p><p>现在，给你一个初始网格，请你求出得到正确排列至少需要进行多少次交换。</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>看完了题目，这让我想起，我们之前可能玩过一种拼图的游戏，在玩游戏的过程中我们会得到一张比较好看的图片，但是它缺了一个口！然后呢，别人将这个图片给打乱了，就像9宫格这样打乱，让我们一个一个对着这个口移动回去。</p><p>在移动的过程中我们会发现，我们不是计算机，不可以很快的判断出我们要移动几步，因此我们会先按照我们的感觉，对<code>x</code>这个缺口的上下左右依次进行移动，看看移动之后是否会更快地把这个拼图给拼回去。但是我们在拼图的时候也可能会出现重复的情况，比如我们移动了若干步，最后我们还是回到了起点，这样的话，我们之前移动的那些步数不就直接没有用了吗？</p><p>所以，为了让我们的计算机不犯这种低级错误，我们得让我们的计算机知道我们之前走过哪些步骤，这就需要<code>stl</code>中的<code>unordered_map</code>来发挥作用了，我们可以把我们的状态用<code>string</code>类型的字符串来表示，<code>int</code>类型用来记录这种已经出现过的步数是什么时候走过的，同时为了管理我们的步数，我们还要添加一个<code>stl</code>中的<code>queue</code>容器来存储我们的步数</p><p>以下便是我们的初始状态</p><p><img src="/posts/aaaaaaab/image-20221120163245275.png" alt="image-20221120163245275"></p><p><img src="/posts/aaaaaaab/image-20221120163305395.png" alt="image-20221120163305395"></p><p>我们用<code>string</code>类型的字符串数组来存储我们一开始的棋盘格局，例如<code>string start = &quot;123x46758&quot;</code>,这样子也可以与我们的<code>map</code>保持一致，下面的<code>for</code>循环便是我们对初始状态的赋值</p><p>最后对于<code>bfs(start)</code>的返回值进行输出就得到结果啦！</p><h2 id="bfs函数的算法设计"><a href="#bfs函数的算法设计" class="headerlink" title="bfs函数的算法设计"></a>bfs函数的算法设计</h2><p><img src="/posts/aaaaaaab/image-20221120163716563.png" alt="image-20221120163716563"></p><p>上面的<code>q</code>,<code>d</code>是我们定义的两个<code>stl</code>容器，<code>q.push(start)</code>就是把我们的初始状态放到队列中，<code>d[start]</code>是用来记录这是我们第几步得到的结果，如上述的0就是我们的初始状态。</p><p>玩游戏时我们要一一试错，计算机是很蠢的，它也要一一试错，这时我们就要定义偏移量了，下面的<code>dx</code>,<code>dy</code>数组就是给我们调偏移量的，最后我们也要让电脑知道它有没有调错是吧，那我们还要设置一个<code>string</code>字符串<code>end</code>来记录结束标志，一旦我们找到了解那就直接结束了。</p><h3 id="进入队列"><a href="#进入队列" class="headerlink" title="进入队列"></a>进入队列</h3><p><img src="/posts/aaaaaaab/image-20221120164652935.png" alt="image-20221120164652935"></p><p>首先，我们定义一个<code>auto</code>类型的变量<code>t</code>来更好地运用队列，引用队列中的第一个元素后，<code>q.pop()</code>把第一个元素出列，由于队列容器不支持我们拿出来它的中间值，所以我们这样做更加方便一些</p><p>每次我们先判断是否达到了预期效果，假如我们一开始就成功了，那就不用动图片任何一步就可以返回值了</p><p>我们在移动九宫格的时候是根据<code>x</code>的位置来进行移动的，同理，我们要让电脑找到我们<code>x</code>的位置在哪里，不然的话我们根本移动不了好吧，我们用<code>k</code>记录我们<code>x</code>的位置，用<code>distance</code>来记录当前步数所对应的值，比如在这个示例中，开始不是结束状态，我们不能一下子返回值，我们要拿一个<code>distance</code>来记录，由于我们一开始定义的<code>string</code>是一维数组的形式，这使得我们可以更好的找到<code>x</code>的位置</p><p>下面的方法就很有技巧性了，我们在一维数组中找到了<code>x</code>的位置，那怎么在二维数组上还原呢？有个技巧</p><h4 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧"></a>小技巧</h4><p>设一个一维数组的容量为100，把这个一维数组用二维数组4*25的形式表现出来，我们在一维数组上找的<code>x</code>的位置在72这个位置上，那么对应的二维数组上的位置就是<code>[72%25][72/4]</code>的位置上，也就是<code>[3][18]</code>这个位置，是不是很巧妙？</p><h2 id="遍历每一处"><a href="#遍历每一处" class="headerlink" title="遍历每一处"></a>遍历每一处</h2><p>现在我们进行傻瓜式移动，对<code>x</code>上下左右进行移动，只要它，欸，跟之前的不重复，没越界，我们就记录它好吧，我们设<code>a</code>,<code>b</code>是<code>x</code>移动后的坐标</p><p>只要不越界，我们就进入第一处循环，交换<code>x</code>与那个数字的位置</p><p>再到<code>map</code>地图中找一下有没有重复</p><p>没有的话，就再进入下一层<code>if</code></p><p>我们的<code>d[t]</code>也要在上一步<code>distance</code>距离的情况下加1(我们移了一步嘛)，然后进队<code>q.push(t)</code></p><h2 id="状态恢复"><a href="#状态恢复" class="headerlink" title="状态恢复"></a>状态恢复</h2><p>再来一次<code>swap</code>恢复状态，不影响后面的发挥</p><h2 id="得出结果"><a href="#得出结果" class="headerlink" title="得出结果"></a>得出结果</h2><p>要么<code>return d[t]</code>,要么<code>return -1</code></p><p>比如这个</p><p><img src="/posts/aaaaaaab/image-20221120171026630.png" alt="image-20221120171026630"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;bfs中的八数码问题&quot;&gt;&lt;a href=&quot;#bfs中的八数码问题&quot; class=&quot;headerlink&quot; title=&quot;bfs中的八数码问题&quot;&gt;&lt;/a&gt;&lt;code&gt;bfs&lt;/code&gt;中的八数码问题&lt;/h1&gt;&lt;h2 id=&quot;例题&quot;&gt;&lt;a href=&quot;#例题&quot; cl</summary>
      
    
    
    
    
    <category term="bfs宽度优先搜索" scheme="https://pxyfcywl.github.io/tags/bfs%E5%AE%BD%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2/"/>
    
  </entry>
  
  <entry>
    <title>一个测试博客</title>
    <link href="https://pxyfcywl.github.io/posts/aaaaaaaa.html"/>
    <id>https://pxyfcywl.github.io/posts/aaaaaaaa.html</id>
    <published>2022-11-19T06:10:25.000Z</published>
    <updated>2022-11-20T12:29:53.175Z</updated>
    
    <content type="html"><![CDATA[<h1 id="主要是拿来测试的"><a href="#主要是拿来测试的" class="headerlink" title="主要是拿来测试的"></a>主要是拿来测试的</h1><p><code>hh</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;主要是拿来测试的&quot;&gt;&lt;a href=&quot;#主要是拿来测试的&quot; class=&quot;headerlink&quot; title=&quot;主要是拿来测试的&quot;&gt;&lt;/a&gt;主要是拿来测试的&lt;/h1&gt;&lt;p&gt;&lt;code&gt;hh&lt;/code&gt;&lt;/p&gt;
</summary>
      
    
    
    
    
    <category term="testing" scheme="https://pxyfcywl.github.io/tags/testing/"/>
    
  </entry>
  
  <entry>
    <title>八皇后问题</title>
    <link href="https://pxyfcywl.github.io/posts/aaaaaaac.html"/>
    <id>https://pxyfcywl.github.io/posts/aaaaaaac.html</id>
    <published>2022-11-19T01:59:14.000Z</published>
    <updated>2022-11-20T12:20:48.832Z</updated>
    
    <content type="html"><![CDATA[<h1 id="八皇后问题"><a href="#八皇后问题" class="headerlink" title="八皇后问题"></a>八皇后问题</h1><p><code>n−n−</code>皇后问题是指将<code>nn</code> 个皇后放在 <code>n×n``n×n</code> 的国际象棋棋盘上, 使得皇后不能相互攻击到, 即任意两个皇后都不能处于同一行, 同一列或同一斜线上</p><p>这道题目有两种分析情况，我先来分析第一种。</p><h2 id="设变量"><a href="#设变量" class="headerlink" title="设变量"></a>设变量</h2><p><img src="/posts/aaaaaaac/image-20221119100554724.png" alt></p><p>首先，我们要知道皇后在每一行，每一列，每一斜列都不可以遇到一样的皇后，那么我们不妨创立三种变量来表示竖向的，左斜方向的，右斜方向的三个<code>bool</code>数组来分析，同时我们要创立一盘棋，用<code>char</code>变量来表示</p><h2 id="摆棋"><a href="#摆棋" class="headerlink" title="摆棋"></a>摆棋</h2><p>这样我们就可以把变量创建出来了，第二步就是摆上一盘棋</p><p><img src="/posts/aaaaaaac/image-20221119100912629.png" alt></p><h2 id="bfs解法"><a href="#bfs解法" class="headerlink" title="bfs解法"></a><code>bfs</code>解法</h2><p>现在开始我们就可以来分析这道题的<code>dfs</code>问题解法了</p><p>​        这种方法是对于每一行进行依次枚举, 看看这一行的哪个格子是否满足情况，符合的话我们就把皇后插进去. </p><p><img src="/posts/aaaaaaac/image-20221119101250914.png" alt></p><p>注意: 上述的<code>n</code>指的是有几行, <code>u</code>指的是第一列(数组上的表示是0),我们假设<code>n</code>是3</p><p>​        我们一步步分析, 开始<code>col[0]</code>是<code>ture</code>，代表这一行是没有放皇后的，<code>dg[u+i]</code>和<code>udg[n-u+1]</code>也是一样，都没有插入任何一个数，所以我们把第一个皇后插入<code>g[0][0]</code>,那么对应的<code>col[0]</code>变成<code>true</code>,<code>dg[0]</code>和<code>udg[3]</code>也变成了<code>true</code>,此后进入下一个<code>dfs</code>循环.</p><p>​        下一个进来后，<code>u</code>的值变成1了，现在是在第二行, <code>g[1][0]</code>直接排除.第二行的<code>col[1]</code>和<code>dg[2]</code>是可以过的，但是我们想想就知道，<code>g[1][1]</code>是不可以塞皇后的，所以我们不还有最后一层保险吗，我们的<code>udg[3]</code>是<code>true</code>，它不允许我们的皇后插进去，所以<code>u</code>只能最后去走走<code>g[1][2]</code>,终于三个都不挡住它了,我们可以进入下一个<code>dfs</code>了.</p><p>​        第三层中,我们的<code>u</code>是2，它先走到<code>g[2][0]</code>上面, <code>col[0]=true,dg[2]=false,udg[1]=false</code>是不能放的，到<code>g[2][1]</code>的时候也是放不了皇后的, <code>g[2][2]</code>一样放不了，这波直接出<code>for</code>循环了，根据<code>dfs</code>的性质，我们如果都不满足会回到上一个<code>dfs</code>中，但是由于我们在回到上一步<code>dfs</code>的时候有一些数值变了，那我们就要恢复原来改变的数值，甚至可能全部推翻。</p><h2 id="找到解"><a href="#找到解" class="headerlink" title="找到解"></a>找到解</h2><p>​        最后我们终于找到了一个解,那我们就直接把解输出出来.</p><p><img src="/posts/aaaaaaac/image-20221119104726250.png" alt></p><p><code>return</code>是返回上一个<code>dfs</code>节点上，可能会有多个解法出现</p><p><img src="/posts/aaaaaaac/image-20221119104841836.png" alt></p><p>在3的时候是没有解的, <code>hh</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;八皇后问题&quot;&gt;&lt;a href=&quot;#八皇后问题&quot; class=&quot;headerlink&quot; title=&quot;八皇后问题&quot;&gt;&lt;/a&gt;八皇后问题&lt;/h1&gt;&lt;p&gt;&lt;code&gt;n−n−&lt;/code&gt;皇后问题是指将&lt;code&gt;nn&lt;/code&gt; 个皇后放在 &lt;code&gt;n×n``n</summary>
      
    
    
    
    
    <category term="dfs深度优先搜索" scheme="https://pxyfcywl.github.io/tags/dfs%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2/"/>
    
  </entry>
  
  <entry>
    <title>我的第一篇博客</title>
    <link href="https://pxyfcywl.github.io/posts/d95d7e09.html"/>
    <id>https://pxyfcywl.github.io/posts/d95d7e09.html</id>
    <published>2022-11-18T05:21:48.000Z</published>
    <updated>2022-11-19T15:30:28.201Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>这是我的第一篇<code>hexo</code>博客文章。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;这是我的第一篇&lt;code&gt;hexo&lt;/code&gt;博客文章。&lt;/p&gt;
</summary>
      
    
    
    
    
    <category term="初篇的一个实验介绍" scheme="https://pxyfcywl.github.io/tags/%E5%88%9D%E7%AF%87%E7%9A%84%E4%B8%80%E4%B8%AA%E5%AE%9E%E9%AA%8C%E4%BB%8B%E7%BB%8D/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://pxyfcywl.github.io/posts/4a17b156.html"/>
    <id>https://pxyfcywl.github.io/posts/4a17b156.html</id>
    <published>2022-11-18T03:24:27.405Z</published>
    <updated>2022-11-19T15:32:59.300Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new &quot;My New Post&quot;</code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
