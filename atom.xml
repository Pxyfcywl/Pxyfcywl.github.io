<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>浮云世事改, 过月此心明</title>
  
  <subtitle>披星戴月走过的路, 最终将会繁花满地。记住, 一个人, 便是千军万马</subtitle>
  <link href="https://pxyfcywl.github.io/atom.xml" rel="self"/>
  
  <link href="https://pxyfcywl.github.io/"/>
  <updated>2022-11-23T14:43:05.053Z</updated>
  <id>https://pxyfcywl.github.io/</id>
  
  <author>
    <name>彼岸花开</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>堆</title>
    <link href="https://pxyfcywl.github.io/posts/aaaaaaah.html"/>
    <id>https://pxyfcywl.github.io/posts/aaaaaaah.html</id>
    <published>2022-11-22T07:46:09.000Z</published>
    <updated>2022-11-23T14:43:05.053Z</updated>
    
    <content type="html"><![CDATA[<h1 id="堆的概览"><a href="#堆的概览" class="headerlink" title="堆的概览"></a>堆的概览</h1><p>在这篇文章中，将会对<code>c++</code>中的<code>stl</code>容器中的堆进行一个讲解，主要讲解<strong>堆的概念，堆的使用，模拟堆，堆排序和优先队列</strong>这些内容</p><h2 id="堆的概念"><a href="#堆的概念" class="headerlink" title="堆的概念"></a>堆的概念</h2><p>堆的本质实际上是一个完全二叉树，怎样才算是一个完全二叉树呢？</p><p><img src="/posts/aaaaaaah/image-20221122161034091.png" alt="image-20221122161034091"></p><p>以下这些便是完全二叉树</p><p><img src="/posts/aaaaaaah/image-20221122183232311.png" alt="image-20221122183232311"></p><p>非完全二叉树</p><p><img src="/posts/aaaaaaah/image-20221122183459870.png" alt="image-20221122183459870"></p><h2 id="堆的堆序性"><a href="#堆的堆序性" class="headerlink" title="堆的堆序性"></a>堆的堆序性</h2><p>堆分为两种类型,第一种是大根堆，第二种是小根堆</p><p><img src="/posts/aaaaaaah/image-20221122183644512.png" alt="image-20221122183644512"></p><p>小根堆，顾名思义，就是指在每一棵二叉树中，父节点都要比它的两个子节点要小，而所有点连起来的最上面的祖父节点就是最小的，</p><p>大根堆就是与小根堆完全相反的两个事物，在这里就不多做赘述了</p><p><img src="/posts/aaaaaaah/image-20221122184128494.png" alt="image-20221122184128494"></p><h2 id="堆的储存"><a href="#堆的储存" class="headerlink" title="堆的储存"></a>堆的储存</h2><p>首先，我们可以按照层序遍历的顺序来给堆里面的元素编号   (层序遍历就是一层层的往下走,类似于宽度优先搜索)</p><p><img src="/posts/aaaaaaah/image-20221122184314390.png" alt="image-20221122184314390"></p><p>由于堆的层数是与编号是一一对应的,所以我们可以将一个堆通过使用一个一维数组的方式来实现</p><hr><p>​    用一个父节点的位置找到子节点位置的方式就是通过数学规律来实现的，如这样<code>2*n+1</code>和<code>2*n+2</code>，便是上图中父节点找到子节点的一种方式</p><p>​    但是在竞赛中为了更加方便，一般情况下是将自顶而下的第一个父节点对应到一维数组中的第二个位置，这样的话，每一个父节点查找子节点的方式就改为了<code>2*n</code>和<code>2*n+1</code></p><hr><h2 id="堆的基本操作"><a href="#堆的基本操作" class="headerlink" title="堆的基本操作"></a>堆的基本操作</h2><p>​        第一种是上滤，用函数表示的话就是<code>up[x]</code>，第二种是下滤,用函数表示的话就是<code>down[x]</code>,上滤是什么意思呢？我们在建造一个堆的时候，我们会涉及到堆的堆序性，也就是大根堆和小根堆的判断</p><p>我们以一张图来说明我们关于上滤和下滤的操作流程</p><p><img src="/posts/aaaaaaah/image-20221122192209213.png" alt="image-20221122192209213"></p><p>首先，我们可以知道目前这个完全二叉树不是有序的，现在假设我们要将现在这个二叉树变成一个小根堆的形式</p><hr><p>关于规则，我们假设加<code>[]</code>的是排好了序的，<code>&#123;&#125;</code>是没有排好序的</p><p>目前这个二叉树用一维数组表示的话是这样的{1 7 6 4 5 1 2}</p><hr><p>​        现在这个二叉树有7个节点(包括根结点)，我们在恢复成小根堆二叉树的时候只需要从倒数第二排的最后一个节点开始就行了，现在我们从6那个数的位置开始，让它与它的子节点进行比较。6比1大，也比2大，那么我们应该让6和谁换位置呢？</p><p>​        我们让6和1换位置，现在根节点的右子树变成了[1 6 2]</p><p>[1 6 2]现在是一个规范的右子树了，它满足了小根堆的性质</p><p>​        那如果我们让6和2换位置呢？那么右子树就会变成{2 1 6}这样的，它不满足小根堆的性质(2比1要大，按道理应该让1在右子树上的父节点)，所以我们在换位置的时候<strong>还要选择与谁换位置</strong></p><p>​        接下来是对于祖父节点上的二叉树的判断了，祖父节点上的二叉树用一维数组表示是{1 7 1},我们要看左边的7的位置是否正确，左子树上的元素是{7 4 5}，不满足小根堆的要求，所以我们要让7和4交换</p><hr><p>现在这个二叉树用一维数组表示的话是{1 4 1 7 5 6 2}</p><hr><p>现在的话，这个二叉树就是用小根堆的形式呈现出来的二叉树了</p><p>下滤和上滤的代码如下</p><p><code>u</code>指的是现在所处于的父节点,<code>h[]</code>是模拟堆形成的一个一维数组</p><pre class="line-numbers language-none"><code class="language-none">void down(int u)&#123;    int t &#x3D; u;    if (u * 2 &lt;&#x3D; idx &amp;&amp; h[u * 2] &lt; h[t]) t &#x3D; u * 2;    if (u * 2 + 1 &lt;&#x3D; idx &amp;&amp; h[u * 2 + 1] &lt; h[t]) t &#x3D; u * 2 + 1;    if (u !&#x3D; t)    &#123;        swap(h[u], h[t]);        down(t);    &#125;&#125;void up(int u)&#123;    while (u &#x2F; 2 &amp;&amp; h[u &#x2F; 2] &gt; h[u])    &#123;        swap(h[u &#x2F; 2], [u]);        u &#x2F;&#x3D; 2;    &#125;&#125;</code></pre><h3 id="建堆方法"><a href="#建堆方法" class="headerlink" title="建堆方法"></a>建堆方法</h3><p>一共分为两种方式建一个堆，第一种是自顶而下建堆，第二种是自下而上建堆</p><p>自顶而下建堆就跟我们刚刚讲过的上滤操作相关</p><p><img src="/posts/aaaaaaah/image-20221122195304330.png" alt="image-20221122195304330"></p><p>而自下而上建堆的话，就跟我刚刚讲过的下滤操作有关</p><p><img src="/posts/aaaaaaah/image-20221122195439489.png" alt="image-20221122195439489"></p><h1 id="优先队列"><a href="#优先队列" class="headerlink" title="优先队列"></a>优先队列</h1><p>优先队列可以在堆排序算法中使用，普通的队列(队列的概念详见<code>c++</code>中的<code>stl</code>算法)是谁先进去，谁就先出来，优先队列不太一样(毕竟在名字上就已经体现出它的特殊性了)，优先队列是谁先进去，但是要按照一定的顺序出来，比如说从大到小的顺序和从小到大的顺序这样子</p><p><img src="/posts/aaaaaaah/image-20221122195816779.png" alt="image-20221122195816779"></p><p>我们来按照要求依次弹出最小的元素，但是堆的性质却不让我们这么做(堆只能一次次弹出头节点)，那我们只好换个方式来做了</p><p>​        你们有没有玩过刺客信条？刺客在刺杀别人的时候是先刺杀最后一个人才不会被前面的人看见，如果我们直接去刺杀第一个人，那就不是刺杀了，是光明正大的杀人啊，所以为了将头元素取出来，我们要先把头节点放到最后一个节点上去，再把最后一个节点删掉，然后对头节点实行下滤<code>down[x]</code>，这样我们就可以从小到大依次删除每一个元素了</p><p><code>idx</code>指的是我们现在在所谓的堆上有多少个树(被删除的数都在数组后面)</p><pre class="line-numbers language-none"><code class="language-none">swap(h[1], h[idx]);           [idx]--;           down(1);</code></pre><h2 id="优先队列的使用"><a href="#优先队列的使用" class="headerlink" title="优先队列的使用"></a>优先队列的使用</h2><hr><p>自定义顺序的优先队列：</p><p>1.按从小到大顺序</p><p><code>priority_queue&lt;int, vector&lt;int&gt;, greater&lt;int&gt; &gt; heap;</code></p><p>2.按从大到小排序</p><p><code>priority_queue&lt;int, vector&lt;int&gt;, less&lt;int&gt; &gt; heap;</code></p><p>普通的优先队列：</p><p>1.按从大到小排序</p><p><code>priority_queue&lt;int&gt; heap;</code></p><p>特殊的优先队列：</p><p>1.必须要重载运算符</p><p><code>priority_queue&lt;node&gt; heap;</code></p><p>优先队列中的函数使用</p><p>取出队列中最高优先级的元素</p><p><code>heap.top()</code></p><p>删除队列中的目前最高优先级的元素</p><p><code>heap.pop()</code></p><p>计算队列中目前一共有多少个元素</p><p><code>heap.size()</code></p><p>插入一个元素到队尾的同时将队列按顺序排序</p><p><code>heap.push()</code></p><p>在优先队列中构造元素</p><p><code>heap.enplace()</code></p><p>判断优先队列内是否有元素</p><p><code>heap.empty()</code></p><p>与其他容器交换元素</p><p><code>heap.swap()</code></p><hr><h1 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h1><p>我们会发现，上面的优先队列把所有的点全部都弄出去了，但是呢，实际上我们不需要真的把点给丢弃掉，我们是把那些点依旧放在了数组里面，便于之后对于题目所处的问题进行一个及时的答复</p><p>这是一开始的大根堆，我们要对它的头节点进行一个删除处理</p><p><img src="/posts/aaaaaaah/image-20221122203501425.png" alt="image-20221122203501425"></p><p>实际上，我们不是真的删除了头节点，只是把它给移到了下面去</p><p><img src="/posts/aaaaaaah/image-20221122203429367.png" alt="image-20221122203429367"></p><h2 id="无序堆变成有序堆-实战"><a href="#无序堆变成有序堆-实战" class="headerlink" title="无序堆变成有序堆(实战)"></a>无序堆变成有序堆(实战)</h2><p>我们先给堆里面添加元素，之后从第<code>n/2</code>个节点开始依次采用<code>down[]</code>,使得一个无序堆变成一个有序的小根堆</p><p>代码如下:</p><pre class="line-numbers language-none"><code class="language-none">int main()&#123;    cin &gt;&gt; n &gt;&gt; m;    int i;    for (i &#x3D; 1; i &lt;&#x3D; n; i++) cin &gt;&gt; h[i];    idx &#x3D; n;    for (i &#x3D; n &#x2F; 2; i; i--) down(i);    while (m--)    &#123;        printf(&quot;%d &quot;, h[1]);        h[1] &#x3D; h[idx], idx--, down(1);    &#125;    return 0;&#125;</code></pre><h1 id="结尾的话"><a href="#结尾的话" class="headerlink" title="结尾的话"></a>结尾的话</h1><p>首先,希望个位如果看到有什么错误的地方，或者说对于某些语句有更好的解释的话，烦请告知我(<code>qq1594463152</code>),我看到后会立刻修改自己的错误和错误的思考方向</p><p>另外,如果你用心看到这里的话，相信你一定可以学有所获！不过多多练习才是最重要的哦</p><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p>我这些图片一部分是来自于b站的up主制作的一个视频里面的截图，如有侵权等问题请立刻联系我，我立刻删除相关文章</p><p>引用视频网址如下</p><p>​    <a href="https://www.bilibili.com/video/BV1AF411G7cA/?spm_id_from=333.337.search-card.all.click&amp;vd_source=761675b97a969cb27e2baf475b4f2be3">https://www.bilibili.com/video/BV1AF411G7cA/?spm_id_from=333.337.search-card.all.click&amp;vd_source=761675b97a969cb27e2baf475b4f2be3</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;堆的概览&quot;&gt;&lt;a href=&quot;#堆的概览&quot; class=&quot;headerlink&quot; title=&quot;堆的概览&quot;&gt;&lt;/a&gt;堆的概览&lt;/h1&gt;&lt;p&gt;在这篇文章中，将会对&lt;code&gt;c++&lt;/code&gt;中的&lt;code&gt;stl&lt;/code&gt;容器中的堆进行一个讲解，主要讲解&lt;s</summary>
      
    
    
    
    <category term="c++中的stl算法" scheme="https://pxyfcywl.github.io/categories/c-%E4%B8%AD%E7%9A%84stl%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="-堆与堆排序 -优先队列" scheme="https://pxyfcywl.github.io/tags/%E5%A0%86%E4%B8%8E%E5%A0%86%E6%8E%92%E5%BA%8F-%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>bellman-ford(最短路问题)</title>
    <link href="https://pxyfcywl.github.io/posts/aaaaaaag.html"/>
    <id>https://pxyfcywl.github.io/posts/aaaaaaag.html</id>
    <published>2022-11-22T03:18:55.000Z</published>
    <updated>2022-11-23T14:47:59.976Z</updated>
    
    <content type="html"><![CDATA[<h1 id="bellman-ford算法"><a href="#bellman-ford算法" class="headerlink" title="bellman-ford算法"></a>bellman-ford算法</h1><p>今天，我们来讲讲第二种最短路算法，<code>boolman_ford</code>算法，这个算法可以用来处理两种情况</p><pre class="line-numbers language-none"><code class="language-none">第一种是含有 边权可能为负数 这种情况第二种是 给定了步数 的这种情况</code></pre><p>接下来给的这道题就是典型的只可以使用<code>boolman_ford</code>算法解决的，如果用<code>spfa</code>算法(<strong>另外一种负权类最短路算法</strong>)的话会被控时间</p><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个 <code>n</code> 个点 <code>m</code> 条边的有向图，图中可能存在<strong>重边和自环</strong>， <strong>边权可能为负数</strong></p><p>请你求出从 1 号点到 <code>n</code> 号点的最多经过 <code>k</code> 条边的最短距离，如果无法从 1 号点走到 <code>n</code> 号点，输出 <code>impossible</code></p><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行包含三个整数 <code>n,m,k</code></p><p>接下来<code>m</code> 行，每行包含三个整数<code>x,y,z</code>，表示存在一条从点 <code>x</code> 到点 <code>y</code> 的有向边，边长为 <code>z</code></p><p>点的编号为 1∼<code>n</code></p><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>输出一个整数，表示从 1号点到 <code>n</code>号点的最多经过<code>k</code> 条边的最短距离。</p><p>如果不存在满足条件的路径，则输出 <code>impossible</code></p><h4 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h4><p>1≤n,k≤500<br>1≤m≤10000<br>1≤x,y≤n<br>任意边长的绝对值不超过 10000</p><h4 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h4><pre class="line-numbers language-none"><code class="language-none">3 3 11 2 12 3 11 3 3</code></pre><h4 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h4><pre class="line-numbers language-none"><code class="language-none">3</code></pre><h2 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h2><p>我们在进行讲解算法前，我们需要先知道一下边权为负数是个什么样的情况</p><p><img src="/posts/aaaaaaag/01eaf8a7b7f90794c66e0299f93531c.jpg" alt></p><p><strong>为了更好的表达意思，我在下面的文章会统一把a指向b的线所占的负权的值c用{a,b,c}表示</strong></p><p>我们可以看看左上角的那幅图，图中的{3,4,-2},{4,2,-4}指的是3到4和4到2所占的负权边，一个是-2，另一个是-4</p><p>我还是来讲一个故事吧</p><h3 id="小故事"><a href="#小故事" class="headerlink" title="小故事"></a>小故事</h3><p>我们现在遇到了一个抽奖大冒险，我们可以选择无数次机会，去走我们想要的路，在道路中我们会的得到钱或者失去钱，假设<strong>+3是我们失去了三块钱，老板得到了3块钱的意思，-3是我们得到了三块钱，老板失去了3块钱的意思</strong>，我们把上面的图再搬运过来，我们可以从<code>1 - 2，2 - 3，3 - 4，4 - 2，2 - 3，3 - 4，4 - 2，2 -3......</code>无限循环下去，这样的话，老板就会一直亏钱，直到全部赔完，相反，我们会拿钱拿到手软(天哪，世上怎么会有这种好事)</p><p>所以老板为了限制我们获得无数的钱，便制定了一条手段，就说我们最多可以走多少步，最后所得到的结果就是我们获得的最后的钱(可能会赔钱)，这也是使用<code>boolman_ford</code>算法的两条定律(如开头)</p><h3 id="算法构造"><a href="#算法构造" class="headerlink" title="算法构造"></a>算法构造</h3><p>现在，我们就可以通过上面的小故事来了解我们的算法原理了，就是说在限定的次数内，我们要尽可能地走向终点</p><p>为了更好地存储我们的点以及两个点之间的权，我们创立一个<strong>结构体变量</strong>(结构体就不用解释了吧…)</p><pre class="line-numbers language-none"><code class="language-none">#include&lt;iostream&gt;#include&lt;algorithm&gt;#include&lt;cstring&gt;using namespace std;const int N &#x3D; 510, M &#x3D; 100010;struct Edge&#123;    int a, b, c;&#125;edge[M];</code></pre><p>紧接着,我们再定义相关变量</p><pre class="line-numbers language-none"><code class="language-none">int n, m, k;int last[N], dist[N];</code></pre><p><code>dist[N]</code>是用来<strong>存储我们的每个点到原点的最近距离的</strong>，而<code>last[N]</code>是用来<strong>记忆我们的上上步是怎么走的</strong></p><h3 id="last的理解"><a href="#last的理解" class="headerlink" title="last的理解"></a>last的理解</h3><p>​        还记得之前的第一篇最短路的博客吗？里面的小故事有提到过桥的概念，就是说我们每走一步，都会更新我们的位置，但是在这个题中我们不可以用那种思维来写，请看此题</p><p>要求: 我们要在1步之内走到终点</p><pre class="line-numbers language-none"><code class="language-none">图  1    11 -&gt; 2 -&gt; 3 \-------&#x2F;     3</code></pre><p>上面那幅图，如果我们按照走桥的思维走，我们最少只要2的权，但是需要走2步，这是不合理的</p><pre class="line-numbers language-none"><code class="language-none">     1    2   3    (00指无穷)第0步 0   00  00第1步 0    1  00第2步 0    1   2</code></pre><p>我们要满足题目所给的要求，这就需要我们走下面那个权为3的桥，这才可以满足题目中走一步的要求</p><pre class="line-numbers language-none"><code class="language-none">     1    2   3    (00指无穷)第0步 0   00  00第1步 0    1  00第2步 0    1   3    (用last记录了上上步的位置)</code></pre><h3 id="定义类代码书写"><a href="#定义类代码书写" class="headerlink" title="定义类代码书写"></a>定义类代码书写</h3><p>定义代码如下</p><pre class="line-numbers language-none"><code class="language-none">int main()&#123;&#x2F;&#x2F;按照题目要求输入    scanf(&quot;%d%d%d&quot;, &amp;n, &amp;m, &amp;k);    int i;    &#x2F;&#x2F;一共有m次相连接的点    for (i &#x3D; 0; i &lt; m; i++)    &#123;        int a, b, c;        scanf(&quot;%d%d%d&quot;, &amp;a, &amp;b, &amp;c);        edge[i] &#x3D; &#123; a,b,c &#125;;    &#125;    &#x2F;&#x2F;进入函数    int t &#x3D; boolmen_ford();    &#x2F;&#x2F;判断并输出    if (t &gt; 0x3f3f3f3f &#x2F; 2) puts(&quot;impossible&quot;);    else printf(&quot;%d&quot;, t);    return 0;&#125;</code></pre><h3 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h3><pre class="line-numbers language-none"><code class="language-none">int boolmen_ford()&#123;&#x2F;&#x2F;初始化所有的距离离原点为无穷    memset(dist, 0x3f, sizeof(dist));    &#x2F;&#x2F;初始化第一个点即原点到原点的距离为0    dist[1] &#x3D; 0;    int i;    &#x2F;&#x2F;一共最多k步    for (i &#x3D; 0; i &lt; k; i++)    &#123;    &#x2F;&#x2F;记忆化        memcpy(last, dist, sizeof(dist));        &#x2F;&#x2F;对于每个找到的新点更新        for (int j &#x3D; 0; j &lt; m; j++)        &#123;        &#x2F;&#x2F;自动变量识别            auto e &#x3D; edge[j];            &#x2F;&#x2F;求在k步之内的最小权            dist[e.b] &#x3D; min(dist[e.b], last[e.a] + e.c);        &#125;    &#125;    &#x2F;&#x2F;返回值    return dist[n];&#125;</code></pre><h2 id="结尾的话"><a href="#结尾的话" class="headerlink" title="结尾的话"></a>结尾的话</h2><p>首先,希望个位如果看到有什么错误的地方，或者说对于某些语句有更好的解释的话，烦请告知我(<code>qq1594463152</code>),我看到后会立刻修改自己的错误和错误的思考方向</p><p>另外,如果你用心看到这里的话，相信你一定可以学有所获！不过多多练习才是最重要的哦</p><h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><p>———引自<code>acwing</code>算法基础课</p><p>​                                        <code>yxc</code>主讲</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;bellman-ford算法&quot;&gt;&lt;a href=&quot;#bellman-ford算法&quot; class=&quot;headerlink&quot; title=&quot;bellman-ford算法&quot;&gt;&lt;/a&gt;bellman-ford算法&lt;/h1&gt;&lt;p&gt;今天，我们来讲讲第二种最短路算法，&lt;code</summary>
      
    
    
    
    <category term="c++算法" scheme="https://pxyfcywl.github.io/categories/c-%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="最短路问题" scheme="https://pxyfcywl.github.io/tags/%E6%9C%80%E7%9F%AD%E8%B7%AF%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>最短路问题(dijkstra算法)</title>
    <link href="https://pxyfcywl.github.io/posts/aaaaaaaf.html"/>
    <id>https://pxyfcywl.github.io/posts/aaaaaaaf.html</id>
    <published>2022-11-21T08:13:15.000Z</published>
    <updated>2022-11-23T14:44:48.059Z</updated>
    
    <content type="html"><![CDATA[<h1 id="最短路问题的几种基本形式"><a href="#最短路问题的几种基本形式" class="headerlink" title="最短路问题的几种基本形式"></a>最短路问题的几种基本形式</h1><p>我们约定俗成这样的惯例，在今后遇到最短路问题的时候，<code>n</code>是格子数，<code>m</code>指的是行数</p><p><img src="/posts/aaaaaaaf/image-20221121181951928.png" alt="image-20221121181951928"></p><p>在学习最短路算法的时候，我们主要学习的是图论中的代码的实现，而不是侧重于对代码的证明</p><h3 id="小细节"><a href="#小细节" class="headerlink" title="小细节"></a>小细节</h3><p><strong>稀疏图用堆优化，稠密图用朴素算法，负权边多用<code>spfa</code></strong></p><p><strong>边数分析的情况下，边数很多时，稠密图用邻接矩阵，稀疏图用邻接表来存</strong></p><p><strong>最短路只考虑有向图的应用，无向图是一种特殊的有向图</strong></p><p>有向图的意思是指两个点是有指向性的，就比如说有两个点<code>a</code>,<code>b</code>，<code>a</code>点指向<code>b</code>点，这就是<strong>指向性</strong></p><p>而无向图的意思就是指<code>a</code>和<code>b</code>之间是没有指向性的，那我们就可以人为的进行指向性判断，我们让它们两个互相指向，这样的话不就相当于没有指向性了吗?(嘿嘿(●ˇ∀ˇ●))</p><h1 id="朴素dijkstra算法"><a href="#朴素dijkstra算法" class="headerlink" title="朴素dijkstra算法"></a>朴素<code>dijkstra</code>算法</h1><p>现在我们来介绍一下最短路问题中的第一种单源最短路算法，它的典型例题是这样的</p><h3 id="1-例题"><a href="#1-例题" class="headerlink" title="1.例题"></a>1.例题</h3><p>给定一个 <code>n</code> 个点 <code>m</code> 条边的有向图，图中可能存在重边和自环，所有边权均为正值。</p><p>请你求出 1 号点到 <code>n</code> 号点的最短距离，如果无法从 1 号点走到 <code>n</code> 号点，则输出 −1</p><h4 id="1-1-输入格式"><a href="#1-1-输入格式" class="headerlink" title="1.1.输入格式"></a>1.1.输入格式</h4><p>第一行包含整数 <code>n</code> 和 <code>m</code>。</p><p>接下来 <code>m</code> 行每行包含三个整数 <code>x</code>,<code>y</code>,<code>z</code>，表示存在一条从点 <code>x</code> 到点<code>y</code> 的有向边，边长为<code>z</code></p><h4 id="1-2输出格式"><a href="#1-2输出格式" class="headerlink" title="1.2输出格式"></a>1.2输出格式</h4><p>输出一个整数，表示 1 号点到 <code>n</code> 号点的最短距离。</p><p>如果路径不存在，则输出 −1</p><p><img src="/posts/aaaaaaaf/image-20221121193011227.png" alt="image-20221121193011227"></p><h2 id="题目解释和算法构建"><a href="#题目解释和算法构建" class="headerlink" title="题目解释和算法构建"></a>题目解释和算法构建</h2><p>​        这道题的意思是说，我们有三个点，三条边(在这道例题里面是没有无向边的说法的)，第一次我们连了1和2，第二次我们连了2和3，第三次我们连了1和3，图像长这样</p><p><img src="/posts/aaaaaaaf/image-20221121183522732.png" alt="image-20221121183522732"></p><p>​        我们现在要输出最短路的距离，我来说一个小故事吧</p><h3 id="1-过桥"><a href="#1-过桥" class="headerlink" title="1.过桥"></a>1.过桥</h3><p>​        记得在小学的时候我们学习过一种规划时间的方法，比如说我现在要做一个番茄炒鸡蛋，要打鸡蛋，洗番茄，煮米饭，炒菜，它们的时间不同，我们该怎么用最短的时间完成所有的方案后顺利吃到我们想要的菜呢？这时候就需要合理的规划时间了</p><p>​        同时，我们看上面的这幅图是不是很像三座桥，2 1 4就是我们过桥所需要的时间，现在我们想知道，当我们从第一座桥出发，到最后一座桥需要的最快时间是多少。用肉眼我们可以很快的知道答案是3。但是电脑不知道，这时候就需要我们设计算法了。</p><h4 id="小思考"><a href="#小思考" class="headerlink" title="小思考"></a>小思考</h4><p>​        我们思考一下，从第一座桥出发，第一座桥到第一座桥需要多长时间呢？(这不很简单嘛，作者怎么会问这么智障的问题？？？)，答案是0，我们就在桥的上面，现在我们的第一座桥连着哪些桥呢？连着2号桥和3号桥，我们看看第二座桥和第三座桥分别到第一座桥的时间分别是2和4，如果是你，你想要快点到终点，你会选择哪座桥呢？</p><p>​        答案无疑是2号桥，现在我们去到2号桥吧</p><h3 id="2-第二座桥"><a href="#2-第二座桥" class="headerlink" title="2.第二座桥"></a>2.第二座桥</h3><p>​        我们来到了2号桥，2号桥连接着哪些桥呢？(连着1号和3号，这不显而易见嘛(●ˇ∀ˇ●))，我们刚刚走过了1号桥了，总不可能再走一次1号桥了吧，所以我们去分析3号桥，3号桥离2号桥的距离是1，2号桥离1号桥的距离是2，这时候我们去到3号桥就有了两种情况，一种要走3步，一种要走4步，为了更快的到达终点，我们选择走3步的，这时候3号桥的距离被刷新成3了，这样一来我们也找到了最快过桥方案</p><p>[说明图如下]</p><p><img src="/posts/aaaaaaaf/image-20221121183537626.png" alt="image-20221121183537626"></p><h2 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h2><p>1.初始化距离(只有起点距离确定)，<code>dist[1]=0</code>,<code>dist[i] =</code> 极大的数(因为我们并不知道要多大)</p><p>2.<code>for</code>循环，循环<code>n</code>次</p><p>2.1已确定最短距离的点<code>s</code>,找到不在<code>s</code>中的距离最近的点<code>t</code></p><p>2.2把<code>t</code>加到<code>s</code>中去</p><p>2.3用<code>t</code>更新其它点的距离<code>dist[x]&gt;dist[t]</code></p><h3 id="1-重边和闭环"><a href="#1-重边和闭环" class="headerlink" title="1.重边和闭环"></a>1.重边和闭环</h3><p>重边<code>(1,2)</code>与闭环<code>(1)</code></p><p>重边就是自己修了两条走向同一个位置的桥</p><p>闭环就是自己修了一条走向自己的桥</p><p><img src="/posts/aaaaaaaf/image-20221121184444798.png" alt="image-20221121184444798"></p><p>重边:只要保留最短的那条边就可以了，<code>g[a][b]</code>=<code>min(g[a][b],c)</code>,</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="1-定义初始值"><a href="#1-定义初始值" class="headerlink" title="1.定义初始值"></a>1.定义初始值</h3><pre class="line-numbers language-code" data-language="code"><code class="language-code">#include&lt;iostream&gt;#include&lt;cstring&gt;#include&lt;algorithm&gt;using namespace std;const int N &#x3D; 510;int n,m;int g[N][N],dist[N];bool st[N];</code></pre><pre class="line-numbers language-code" data-language="code"><code class="language-code">int main()&#123;    scanf(&quot;%d%d&quot;,&amp;n,&amp;m);    memset(g,0x3f,sizeof(g));    while(m--)    &#123;        int a,b,c;        scanf(&quot;%d%d%d&quot;,&amp;a,&amp;b,&amp;c);        g[a][b] &#x3D; min(g[a][b],c);    &#125;    cout&lt;&lt;dijkstra()&lt;&lt;endl;    return 0;&#125;</code></pre><p>其中，<code>n,m,a,b,c</code>都是题目要求的输出变量</p><p>​        定义的<code>bool</code>变量<code>st</code>是用来看我们的桥有没有走过，<code>g[][]</code>是说明<code>a</code>号点与<code>b</code>号点相连接的桥的距离(无向边则表示的是相连的最小距离)，<code>dist</code>变量指的是目前我们所处的这座桥到原点的最短距离</p><p>开始我们按照题目要求输入，开始把<code>g</code>数组的值放的很大，<code>0x3f3f3f3f</code>是一个很大的数了(为什么上面只写了<code>0x3f</code>呢,因为g是一个<code>int</code>变量，而<code>0x3f</code>所指的是<code>char</code>变量的，<code>int</code>变量是<code>char</code>变量的4倍，所以是<code>0x3f3f3f3f</code>)</p><h3 id="2-进入dijkstra函数"><a href="#2-进入dijkstra函数" class="headerlink" title="2.进入dijkstra函数"></a>2.进入<code>dijkstra</code>函数</h3><p>理解的话，我们可以按照上面的算法构建和实现来理解，下面只是对理解形成代码的一种形式(也很重要)<br>这里面的<code>i</code>只要遍历<code>n-1</code>次就可以了,最后的不用遍历了</p><pre class="line-numbers language-code" data-language="code"><code class="language-code">int dijkstra()&#123;memset (dist, 0x3f, sizeof(dist));dist[1] &#x3D; 0;int i, j;for (i &#x3D; 0;i &lt; n - 1; i++)&#123;int t &#x3D; -1:&#x2F;&#x2F;从第一座桥开始遍历，知道找到离第一座桥最短的那座桥for (j &#x3D; 1, j &lt;&#x3D; n; j++)&#123;&#x2F;&#x2F;如果这座桥没有被遍历过&amp;&amp;(没有离开第一座桥 现在 所呆着的桥与原桥的位置 比 新找的桥与原桥的位置 大)if (!st[j] &amp;&amp; (t &#x3D;&#x3D; -1 || dist[t] &gt; dist[j]))&#x2F;&#x2F;更新现在所待的桥t &#x3D; j;&#125;&#x2F;&#x2F;从新找的桥的位置开始，把其它没有走过的桥的 原桥到原点的距离 和原桥从我们现在处于的桥的距离与现出的桥到原点距离之和 比较最小值for (j &#x3D; 1; j &lt;&#x3D; n; j++)&#123;dist[j] &#x3D; min(dist[j], dist[t] + g[t][j]);&#125;&#x2F;&#x2F;走过的桥标记一下st[t] &#x3D; true;&#125;if (dist[n] &#x3D;&#x3D; 0x3f3f3f3f) return -1;else return dist[n];&#125;</code></pre><h3 id="3-输出结果"><a href="#3-输出结果" class="headerlink" title="3.输出结果"></a>3.输出结果</h3><p><img src="/posts/aaaaaaaf/image-20221121202532387.png" alt="image-20221121202532387"></p><h2 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h2><p>从这一章节开始便是正式进入了最短路的这个系列的学习了，笔者也是学了一个知识点，总结之后便发表出来了，这里面可能会存在很多漏洞和未解释清楚的东西，如果有发现的话还请麻烦联系我(<code>qq1594463152</code>)更改内容(不能让这屑作毒害别人<code>hhh</code>)</p><h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><p>—acwing算法基础课 (yxc主讲)</p><h1 id="堆优化版的dijstra算法"><a href="#堆优化版的dijstra算法" class="headerlink" title="堆优化版的dijstra算法"></a>堆优化版的<code>dijstra</code>算法</h1><p>时间复杂度<code>mlogn</code></p><p>实现堆:手写堆，或者优先队列<code>stl</code>算法</p><p>算法实现: 稀疏图，采用邻接表的形式进行(邻接表指的是多个单链表)</p><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><pre class="line-numbers language-code" data-language="code"><code class="language-code">#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;#include &lt;queue&gt;using namespace std;typedef pair&lt;int, int&gt; PII;const int N &#x3D; 1e6 + 10;int n, m;int h[N], w[N], e[N], ne[N], idx;int dist[N];bool st[N];</code></pre><p>​        在单链表专栏中我们有专门介绍<code>e[N],ne[N],idx</code>三个链表中变量的意思, <code>e[N]</code>的意思是保存数字用的,<code>ne[N]</code>是用来存储地址的，<code>idx</code>指的是队列(或列表)中一共有多少次链接</p><p>​        <code>w[N]</code>指的是我们每一条路的权重，就是说我们一给点到另外一个点所需要的权重值(也就是过桥所需要的时间)，<code>h[a]</code>的意思是记录我们在进行链表存储中所需要的数值</p><p>​        在我们按照题目要求输入<code>n</code>,<code>m</code>后，便是我们的算法开始了</p><p>​        首先，作为邻接表，它的表头要首先初始化为空，便于我们后续的<code>idx</code>操作</p><p>​        我们要用一个堆来维护所有点的距离, 在维护所有距离的时候，我们还要知道相对的点的编号是多少, 因此我们要一个<code>pair</code>容器来存储</p><p>​        <strong>注意：用邻接表存储的时候有重复边也没有关系，我们的邻接表会一一记录下来的同时，会选择最小的那个边</strong></p><pre class="line-numbers language-code" data-language="code"><code class="language-code">int main()&#123;    scanf(&quot;%d%d&quot;, &amp;n, &amp;m);    memset(h, -1, sizeof h);    while (m--)    &#123;        int a, b, c;        scanf(&quot;%d%d%d&quot;, &amp;a, &amp;b, &amp;c);        add(a, b, c);    &#125;    cout &lt;&lt; dijkstra() &lt;&lt; endl;    return 0;&#125;</code></pre><h2 id="单链表操作"><a href="#单链表操作" class="headerlink" title="单链表操作"></a>单链表操作</h2><p>​        代码解释: 第一步是对<code>b</code>的数进行存储,说明<code>a</code>是与<code>b</code>有相连的</p><p>​        <code>w</code>是对权重的一个存储, <code>ne</code>操作便是给<code>a</code>这个位置添加一个新的单链</p><pre class="line-numbers language-code" data-language="code"><code class="language-code">void add(int a, int b, int c)&#123;e[idx] &#x3D; b, w[idx] &#x3D; c, ne[idx] &#x3D; h[a], h[a] &#x3D; idx++;&#125;</code></pre><h2 id="dijkstra算法代码实现"><a href="#dijkstra算法代码实现" class="headerlink" title="dijkstra算法代码实现"></a><code>dijkstra</code>算法代码实现</h2><p>很多人可能不知道下面的一串较长的代码是怎么回事, 其实它就是优先队列里面的一种</p><p>详情见(<code>c++</code>中的<code>stl</code>算法—堆)</p><pre class="line-numbers language-code" data-language="code"><code class="language-code">int dijkstra()&#123;    memset(dist, 0x3f, sizeof dist);    dist[1] &#x3D; 0;    priority_queue&lt;PII, vector&lt;PII&gt;, greater&lt;PII&gt;&gt; heap;    heap.push(&#123; 0, 1 &#125;);    while (heap.size())    &#123;        auto t &#x3D; heap.top();        heap.pop();        int ver &#x3D; t.second, distance &#x3D; t.first;        if (st[ver]) continue;        st[ver] &#x3D; true;        for (int i &#x3D; h[ver]; i !&#x3D; -1; i &#x3D; ne[i])        &#123;            int j &#x3D; e[i];            if (dist[j] &gt; dist[ver] + w[i])            &#123;                dist[j] &#x3D; dist[ver] + w[i];                heap.push(&#123; dist[j], j &#125;);            &#125;        &#125;    &#125;    if (dist[n] &#x3D;&#x3D; 0x3f3f3f3f) return -1;    return dist[n];&#125;</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;最短路问题的几种基本形式&quot;&gt;&lt;a href=&quot;#最短路问题的几种基本形式&quot; class=&quot;headerlink&quot; title=&quot;最短路问题的几种基本形式&quot;&gt;&lt;/a&gt;最短路问题的几种基本形式&lt;/h1&gt;&lt;p&gt;我们约定俗成这样的惯例，在今后遇到最短路问题的时候，&lt;cod</summary>
      
    
    
    
    <category term="c++算法" scheme="https://pxyfcywl.github.io/categories/c-%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="最短路问题" scheme="https://pxyfcywl.github.io/tags/%E6%9C%80%E7%9F%AD%E8%B7%AF%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>归并排序</title>
    <link href="https://pxyfcywl.github.io/posts/aaaaaaae.html"/>
    <id>https://pxyfcywl.github.io/posts/aaaaaaae.html</id>
    <published>2022-11-21T06:54:18.000Z</published>
    <updated>2022-11-22T14:51:52.097Z</updated>
    
    <content type="html"><![CDATA[<h1 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h1><h2 id="看前须知"><a href="#看前须知" class="headerlink" title="看前须知"></a>看前须知</h2><p>首先，归并排序和快速排序一样，在算法竞赛中可以直接使用<code>c++</code>中的<code>algorithm</code>来使用就行，但是在面试啊，笔试啊等一些可能要手写代码的地方上面，学习这个排序的思想和模板还是很好的。这个归并排序算法主要运用了二分的思想，对于一个有穷无序数组进行每回分成两半的方式来进行。</p><h3 id="崩坏3小剧场"><a href="#崩坏3小剧场" class="headerlink" title="崩坏3小剧场"></a>崩坏3小剧场</h3><p>正如我听过的一句话，如符华小姐所说，我们先制作一个馒头，第一天吃一半，第二天吃第一天的一半，第三天吃第二天的一半，这样下去就可以永远吃不完我们的馒头了<code>hhh</code></p><h2 id="题目概要"><a href="#题目概要" class="headerlink" title="题目概要"></a>题目概要</h2><p>给定你一个长度为 <code>n</code>的整数数列。请你使用归并排序对这个数列按照从小到大进行排序。并将排好序的数列按顺序输出。</p><p>输入格式</p><p>输入共两行，第一行包含整数 <code>n</code>。</p><p>第二行包含 <code>n</code> 个整数（所有整数均在 <code>1∼10^9</code>,<code>1∼10^9</code> 范围内, 表示整个数列。）</p><p>输出格式</p><p>输出共一行，包含 <code>n</code> 个整数，表示排好序的数列。</p><p><img src="/posts/aaaaaaae/image-20221121145926015.png" alt="image-20221121145926015"></p><h2 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h2><pre class="line-numbers language-code" data-language="code"><code class="language-code">void merge_sort(int q[], int l, int r)&#123;if (l &gt;&#x3D; r)return;int mid &#x3D; l + r &gt;&gt; 1;&#x2F;&#x2F;二进制左移1，相当于除以2merge_sort(q, l, mid); merge_sort(q, mid + 1, r);int k &#x3D; 0, i &#x3D; l, j &#x3D; mid + 1;while (i &lt;&#x3D; mid &amp;&amp; j &lt;&#x3D; r)&#123;if (q[i] &lt;&#x3D; q[j])tmp[k++] &#x3D; q[i++];else tmp[k++] &#x3D; q[j++];&#125;while (i &lt;&#x3D; mid)tmp[k++] &#x3D; q[i++];while (j &lt;&#x3D; r)tmp[k++] &#x3D; q[j++];for (i &#x3D; l, j &#x3D; 0; i &lt;&#x3D; r; i++, j++) q[i] &#x3D; tmp[j];&#125;</code></pre><p>开始的操作和快速排序算法是一样的，如果我们的数列只有一个数了，那我们就不用再继续折腾下去了，直接<code>return</code>就行</p><p>我们假如有这样一行无序数列(数组<code>hh</code>) 3 6 4 9 0 2 1 4 5 7，我们把它分成两半，一半是3 6 4 9 0，另一半是2 1 4 5 7，我们又搞了两个指针<code>i</code>,<code>j</code>它们分别指向第一半和第二半即<code>i=0</code>,<code>j=5</code>我们一个一个比较。首先<code>i</code>指向的数是3，<code>j</code>指向的数是2，<code>2 &lt; 3</code>,我们把2放到新的一个数组里面，设新数组的名字是<code>tmp</code>吧(才，才不是配合我的图片呢<code>hhh</code>),放进去后我们继续，<code>1&lt;3</code>，好，我们把1放到<code>tmp</code>里面，继续！这下子<code>4&gt;3</code>了，我们把3放到<code>tmp</code>里面，不断轮回，最终<code>tmp</code>数组里面的数是这样的 2 1 3 4 5 6 4 7这样的情况，欸，怎么会没有9和0呢？你想，我们让数字进入<code>tmp</code>数组的要求是不是要另外一边的数比它大啊，可是到了9后，<code>j</code>那边没有数比它大了，<code>j</code>已经输了，但是我们的数字还没有全部进去，这时候我们就要对剩下的数进行一个遍历，确保它们全部进去才行，这样以后全部的数都进去了，<code>tmp</code>也成了2 1 3 4 5 6 4 7 9 0，这时候我们开始一轮新的循环，也就是符华小姐吃面包啦，分成两边各自进行排列，排啊排，最后我们可以得到我们想要的答案了,0 1 2 3 4 4 5 6 7 9正是我们想要的结果，很好很好。</p><h2 id="结果实现和算法设计中需要的变量"><a href="#结果实现和算法设计中需要的变量" class="headerlink" title="结果实现和算法设计中需要的变量"></a>结果实现和算法设计中需要的变量</h2><pre class="line-numbers language-code" data-language="code"><code class="language-code">#include&lt;iostream&gt;using namespace std;const int N &#x3D; 1e6 + 10;int q[N], n,tmp[N];</code></pre><pre class="line-numbers language-code" data-language="code"><code class="language-code">int main()&#123;int i;scanf_s(&quot;%d&quot;, &amp;n);for (i &#x3D; 0; i &lt; n; i++)scanf_s(&quot;%d&quot;, &amp;q[i]);merge_sort(q, 0, n - 1);for (i &#x3D; 0; i &lt; n; i++)printf(&quot;%d &quot;, q[i]);return 0;&#125;</code></pre><p><img src="/posts/aaaaaaae/image-20221121152620976.png" alt="image-20221121152620976"></p><h2 id="结尾的话"><a href="#结尾的话" class="headerlink" title="结尾的话"></a>结尾的话</h2><p>看完文章后建议自己动手试一试哦(⊙o⊙)，听说这样的话更容易记忆呢</p><h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><p>—acwing算法基础课 (yxc主讲)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;归并排序&quot;&gt;&lt;a href=&quot;#归并排序&quot; class=&quot;headerlink&quot; title=&quot;归并排序&quot;&gt;&lt;/a&gt;归并排序&lt;/h1&gt;&lt;h2 id=&quot;看前须知&quot;&gt;&lt;a href=&quot;#看前须知&quot; class=&quot;headerlink&quot; title=&quot;看前须知&quot;&gt;&lt;/a</summary>
      
    
    
    
    <category term="c++算法" scheme="https://pxyfcywl.github.io/categories/c-%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="归并排序" scheme="https://pxyfcywl.github.io/tags/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>快速排序</title>
    <link href="https://pxyfcywl.github.io/posts/aaaaaaad.html"/>
    <id>https://pxyfcywl.github.io/posts/aaaaaaad.html</id>
    <published>2022-11-20T11:17:00.000Z</published>
    <updated>2022-11-22T14:50:41.533Z</updated>
    
    <content type="html"><![CDATA[<h1 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h1><p>给定你一个长度为 <code>n</code>的整数数列。</p><p>请你使用快速排序对这个数列按照从小到大进行排序。</p><p>并将排好序的数列按顺序输出。</p><p><img src="/posts/aaaaaaad/image-20221120203230081.png" alt="image-20221120203230081"></p><h2 id="前摘提要"><a href="#前摘提要" class="headerlink" title="前摘提要"></a>前摘提要</h2><p>首先我先来介绍一下快速排序算法，它被誉为最快排序算法，可以快到<code>nlogn</code>级别，而且在<code>c++</code>中已经有了相关的函数<code>sort()</code>,所以在算法竞赛中它的模板其实也没有那么重要(毕竟算法竞赛是要赶时间的嘛，太慢了题都搞不定)，但是这里还是要介绍一下这个算法的思想。</p><h2 id="算法思想"><a href="#算法思想" class="headerlink" title="算法思想"></a>算法思想</h2><pre class="line-numbers language-code" data-language="code"><code class="language-code">void quick_sort(int q[], int l, int r)&#123;if (l &gt;&#x3D; r) return;int x &#x3D; q[l]; int i &#x3D; l - 1, j &#x3D; r + 1;while (i &lt; j)&#123;do i++; while (q[i] &lt; x);do j--; while (q[j] &gt; x);if (i &lt; j) swap(q[i], q[j]);&#125;quick_sort(q, l, j);quick_sort(q, j + 1, r);&#125;</code></pre><p>它主要是采用了双指针的思想来解题的，也就是说我们创建两个指针(其实不是真要创建两个指针，实际上是两个变量<code>l</code>,<code>r</code>)   一个呢，从左到右来进行，一个从右到左来进行,我们再设立一个中间量，就第三个数了</p><p>我们以示例来讲，假设<code>l</code>在左边，<code>r</code>在右边，我们要从小到大来排序，先看<code>l</code>，它指向了第一个数3，3比2大，好<code>l</code>停下来，让<code>r</code>走，<code>r</code>走啊走，走到第四位时大于2，走到第三位时相等了，此时呢我们发现<code>l</code>所指的数3是大于<code>r</code>所指的数的，我们交换一下<code>l</code>和<code>r</code>的数字位置，此时排序变成了 2 1 3 4 5，我们再进行一次快排</p><h3 id="新的循环"><a href="#新的循环" class="headerlink" title="新的循环"></a>新的循环</h3><p>此时的排序是2 1 3，我们还是取中间的量1，<code>l</code>所指的数刚好比1大，停下来，<code>r</code>指的数比1小，再退一个，<code>r</code>现在指的数就是1了，现在<code>l</code>左边的数是严格小于的，<code>r</code>右边的数是严格大于的，交换两数后，变成1 2 3了，我们再进入一次快排</p><h3 id="最后的循环"><a href="#最后的循环" class="headerlink" title="最后的循环"></a>最后的循环</h3><p>我们发现两个循环1 2 3和4 5是严格从小到大的，这时候我们就可以返回去输出了，这样的算法复杂度是最快的</p><h2 id="输出答案和程序书写建议"><a href="#输出答案和程序书写建议" class="headerlink" title="输出答案和程序书写建议"></a>输出答案和程序书写建议</h2><p>下面是定义变量，函数应用和输出变量的写法，谢谢观看@*@！</p><pre class="line-numbers language-code" data-language="code"><code class="language-code">#include&lt;iostream&gt;#include&lt;algorithm&gt;#include&lt;cstdio&gt;using namespace std;const int N &#x3D; 1e6 + 10;int q[N], n;</code></pre><pre class="line-numbers language-code" data-language="code"><code class="language-code">int main()&#123;scanf_s(&quot;%d&quot;, &amp;n);for (int i &#x3D; 0; i &lt; n; i++)&#123;scanf_s(&quot;%d&quot;, &amp;q[i]);&#125;quick_sort(q, 0, n - 1);for (int i &#x3D; 0; i &lt; n; i++)&#123;printf(&quot;%d &quot;, q[i]);&#125;return 0;&#125;</code></pre><h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><p>—acwing算法基础课 (yxc主讲)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;快速排序&quot;&gt;&lt;a href=&quot;#快速排序&quot; class=&quot;headerlink&quot; title=&quot;快速排序&quot;&gt;&lt;/a&gt;快速排序&lt;/h1&gt;&lt;p&gt;给定你一个长度为 &lt;code&gt;n&lt;/code&gt;的整数数列。&lt;/p&gt;
&lt;p&gt;请你使用快速排序对这个数列按照从小到大进行排序。&lt;</summary>
      
    
    
    
    <category term="c++算法" scheme="https://pxyfcywl.github.io/categories/c-%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="快速排序" scheme="https://pxyfcywl.github.io/tags/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>拼图问题</title>
    <link href="https://pxyfcywl.github.io/posts/aaaaaaab.html"/>
    <id>https://pxyfcywl.github.io/posts/aaaaaaab.html</id>
    <published>2022-11-20T08:10:33.000Z</published>
    <updated>2022-11-22T14:48:18.826Z</updated>
    
    <content type="html"><![CDATA[<h1 id="bfs中的八数码问题"><a href="#bfs中的八数码问题" class="headerlink" title="bfs中的八数码问题"></a><code>bfs</code>中的八数码问题</h1><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><p>在一个 3×33×3 的网格中，1∼8 1∼8 这 88 个数字和一个 <code>x</code> 恰好不重不漏地分布在这 3×3 3×3 的网格中。</p><p>例如：</p><p><img src="/posts/aaaaaaab/image-20221120161740222.png" alt="image-20221120161740222"></p><p>在游戏过程中，可以把 <code>x</code> 与其上、下、左、右四个方向之一的数字交换（如果存在）。</p><p>我们的目的是通过交换，使得网格变为如下排列（称为正确排列）：</p><p><img src="/posts/aaaaaaab/image-20221120161815754.png" alt="image-20221120161815754"></p><p>例如，示例中图形就可以通过让 <code>x</code> 先后与右、下、右三个方向的数字交换成功得到正确排列。</p><p>交换过程如下:</p><p><img src="/posts/aaaaaaab/image-20221120161846011.png" alt="image-20221120161846011"></p><p>现在，给你一个初始网格，请你求出得到正确排列至少需要进行多少次交换。</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>看完了题目，这让我想起，我们之前可能玩过一种拼图的游戏，在玩游戏的过程中我们会得到一张比较好看的图片，但是它缺了一个口！然后呢，别人将这个图片给打乱了，就像9宫格这样打乱，让我们一个一个对着这个口移动回去。</p><p>在移动的过程中我们会发现，我们不是计算机，不可以很快的判断出我们要移动几步，因此我们会先按照我们的感觉，对<code>x</code>这个缺口的上下左右依次进行移动，看看移动之后是否会更快地把这个拼图给拼回去。但是我们在拼图的时候也可能会出现重复的情况，比如我们移动了若干步，最后我们还是回到了起点，这样的话，我们之前移动的那些步数不就直接没有用了吗？</p><p>所以，为了让我们的计算机不犯这种低级错误，我们得让我们的计算机知道我们之前走过哪些步骤，这就需要<code>stl</code>中的<code>unordered_map</code>来发挥作用了，我们可以把我们的状态用<code>string</code>类型的字符串来表示，<code>int</code>类型用来记录这种已经出现过的步数是什么时候走过的，同时为了管理我们的步数，我们还要添加一个<code>stl</code>中的<code>queue</code>容器来存储我们的步数</p><p>以下便是我们的初始状态</p><pre class="line-numbers language-none"><code class="language-none">#include&lt;iostream&gt;#include&lt;algorithm&gt;#include&lt;queue&gt;#include&lt;unordered_map&gt;using namespace std;const int N &#x3D; 100010;</code></pre><pre class="line-numbers language-none"><code class="language-none">int main()&#123;    string start;    for (int i &#x3D; 0; i &lt; 9; i++)    &#123;        char ch[2];        cin &gt;&gt; ch;        start +&#x3D; *ch;    &#125;    cout &lt;&lt; bfs(start) &lt;&lt; endl;&#125;</code></pre><p>我们用<code>string</code>类型的字符串数组来存储我们一开始的棋盘格局，例如<code>string start = &quot;123x46758&quot;</code>,这样子也可以与我们的<code>map</code>保持一致，下面的<code>for</code>循环便是我们对初始状态的赋值</p><p>最后对于<code>bfs(start)</code>的返回值进行输出就得到结果啦！</p><h2 id="bfs函数的算法设计"><a href="#bfs函数的算法设计" class="headerlink" title="bfs函数的算法设计"></a>bfs函数的算法设计</h2><pre class="line-numbers language-none"><code class="language-none">queue&lt;string&gt; q;    unordered_map&lt;string, int&gt; d;    q.push(start);    d[start] &#x3D; 0;    int dx[4] &#x3D; &#123; -1,0,1,0 &#125;, dy[4] &#x3D; &#123; 0,1,0,-1 &#125;;    string end &#x3D; &quot;12345678x&quot;;</code></pre><p>上面的<code>q</code>,<code>d</code>是我们定义的两个<code>stl</code>容器，<code>q.push(start)</code>就是把我们的初始状态放到队列中，<code>d[start]</code>是用来记录这是我们第几步得到的结果，如上述的0就是我们的初始状态。</p><p>玩游戏时我们要一一试错，计算机是很蠢的，它也要一一试错，这时我们就要定义偏移量了，下面的<code>dx</code>,<code>dy</code>数组就是给我们调偏移量的，最后我们也要让电脑知道它有没有调错是吧，那我们还要设置一个<code>string</code>字符串<code>end</code>来记录结束标志，一旦我们找到了解那就直接结束了。</p><h3 id="进入队列"><a href="#进入队列" class="headerlink" title="进入队列"></a>进入队列</h3><pre class="line-numbers language-none"><code class="language-none">while (q.size())    &#123;        &#x2F;&#x2F;入队        auto t &#x3D; q.front();        q.pop();        &#x2F;&#x2F;如果t的状态与end状态一致，返回数值        if (t &#x3D;&#x3D; end) return d[t];        int distance &#x3D; d[t];        &#x2F;&#x2F;找到x的位置        int k &#x3D; t.find(&#39;x&#39;);        &#x2F;&#x2F;技巧:从一维数组转成二维将(k&#x2F;竖直方向上的数)，(k%水平方向上的数)        int x &#x3D; k &#x2F; 3, y &#x3D; k % 3;        &#x2F;&#x2F;遍历每一处        for (int i &#x3D; 0; i &lt; 4; i++)        &#123;            int a &#x3D; x + dx[i], b &#x3D; y + dy[i];            if (a &gt;&#x3D; 0 &amp;&amp; a &lt; 3 &amp;&amp; b &gt;&#x3D; 0 &amp;&amp; b &lt; 3)            &#123;                &#x2F;&#x2F;将x值的位置与另外一个值交换                swap(t[a * 3 + b], t[k]);                &#x2F;&#x2F;如果没有换过(没有重复之前的状态)                if (!d.count(t))                &#123;                    d[t] &#x3D; distance + 1;                    q.push(t);                &#125;                &#x2F;&#x2F;状态恢复                swap(t[a * 3 + b], t[k]);            &#125;        &#125;    &#125;    return -1;</code></pre><p>首先，我们定义一个<code>auto</code>类型的变量<code>t</code>来更好地运用队列，引用队列中的第一个元素后，<code>q.pop()</code>把第一个元素出列，由于队列容器不支持我们拿出来它的中间值，所以我们这样做更加方便一些</p><p>每次我们先判断是否达到了预期效果，假如我们一开始就成功了，那就不用动图片任何一步就可以返回值了</p><p>我们在移动九宫格的时候是根据<code>x</code>的位置来进行移动的，同理，我们要让电脑找到我们<code>x</code>的位置在哪里，不然的话我们根本移动不了好吧，我们用<code>k</code>记录我们<code>x</code>的位置，用<code>distance</code>来记录当前步数所对应的值，比如在这个示例中，开始不是结束状态，我们不能一下子返回值，我们要拿一个<code>distance</code>来记录，由于我们一开始定义的<code>string</code>是一维数组的形式，这使得我们可以更好的找到<code>x</code>的位置</p><p>下面的方法就很有技巧性了，我们在一维数组中找到了<code>x</code>的位置，那怎么在二维数组上还原呢？有个技巧</p><h4 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧"></a>小技巧</h4><p>​        设一个一维数组的容量为100，把这个一维数组用二维数组4*25的形式表现出来，我们在一维数组上找的<code>x</code>的位置在72这个位置上(72指的是数组下标，指的是<code>a[72]</code>)，那么对应的二维数组上的位置就是<code>[72/25][72%25]</code>的位置上，也就是<code>[2][22]</code>这个位置，是不是很巧妙？</p><p>​        那么二维数组是怎么还原成一维数组呢？我们现在已经可以把一维数组转变成二维数组了，那么我们也可以通过这种方法把二维数组下标重新变成一维的形式，比如说在二维数组上的<code>a[1][15]</code>,二维数组的形式还是4<em>25,那么二维转一维就是`a[1</em>25+15]<code>,也就是</code>a[40]`</p><h2 id="遍历每一处"><a href="#遍历每一处" class="headerlink" title="遍历每一处"></a>遍历每一处</h2><p>现在我们进行傻瓜式移动，对<code>x</code>上下左右进行移动，只要它，欸，跟之前的不重复，没越界，我们就记录它好吧，我们设<code>a</code>,<code>b</code>是<code>x</code>移动后的坐标</p><p>只要不越界，我们就进入第一处循环，交换<code>x</code>与那个数字的位置</p><p>再到<code>map</code>地图中找一下有没有重复</p><p>没有的话，就再进入下一层<code>if</code></p><p>我们的<code>d[t]</code>也要在上一步<code>distance</code>距离的情况下加1(我们移了一步嘛)，然后进队<code>q.push(t)</code></p><h2 id="状态恢复"><a href="#状态恢复" class="headerlink" title="状态恢复"></a>状态恢复</h2><p>再来一次<code>swap</code>恢复状态，不影响后面的发挥</p><h2 id="得出结果"><a href="#得出结果" class="headerlink" title="得出结果"></a>得出结果</h2><p>要么<code>return d[t]</code>,要么<code>return -1</code></p><p>比如这个</p><p><img src="/posts/aaaaaaab/image-20221120171026630.png" alt="image-20221120171026630"></p><h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><p>—acwing算法基础课 (yxc主讲)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;bfs中的八数码问题&quot;&gt;&lt;a href=&quot;#bfs中的八数码问题&quot; class=&quot;headerlink&quot; title=&quot;bfs中的八数码问题&quot;&gt;&lt;/a&gt;&lt;code&gt;bfs&lt;/code&gt;中的八数码问题&lt;/h1&gt;&lt;h2 id=&quot;例题&quot;&gt;&lt;a href=&quot;#例题&quot; cl</summary>
      
    
    
    
    <category term="c++算法" scheme="https://pxyfcywl.github.io/categories/c-%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="bfs宽度优先搜索" scheme="https://pxyfcywl.github.io/tags/bfs%E5%AE%BD%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2/"/>
    
  </entry>
  
  <entry>
    <title>一个测试博客</title>
    <link href="https://pxyfcywl.github.io/posts/aaaaaaaa.html"/>
    <id>https://pxyfcywl.github.io/posts/aaaaaaaa.html</id>
    <published>2022-11-19T06:10:25.000Z</published>
    <updated>2022-11-21T05:56:52.494Z</updated>
    
    <content type="html"><![CDATA[<h1 id="主要是拿来测试的"><a href="#主要是拿来测试的" class="headerlink" title="主要是拿来测试的"></a>主要是拿来测试的</h1><p><code>hh</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;主要是拿来测试的&quot;&gt;&lt;a href=&quot;#主要是拿来测试的&quot; class=&quot;headerlink&quot; title=&quot;主要是拿来测试的&quot;&gt;&lt;/a&gt;主要是拿来测试的&lt;/h1&gt;&lt;p&gt;&lt;code&gt;hh&lt;/code&gt;&lt;/p&gt;
</summary>
      
    
    
    
    <category term="测试的" scheme="https://pxyfcywl.github.io/categories/%E6%B5%8B%E8%AF%95%E7%9A%84/"/>
    
    
    <category term="testing" scheme="https://pxyfcywl.github.io/tags/testing/"/>
    
  </entry>
  
  <entry>
    <title>八皇后问题</title>
    <link href="https://pxyfcywl.github.io/posts/aaaaaaac.html"/>
    <id>https://pxyfcywl.github.io/posts/aaaaaaac.html</id>
    <published>2022-11-19T01:59:14.000Z</published>
    <updated>2022-11-22T14:54:01.751Z</updated>
    
    <content type="html"><![CDATA[<h1 id="八皇后问题"><a href="#八皇后问题" class="headerlink" title="八皇后问题"></a>八皇后问题</h1><p><code>n−n−</code>皇后问题是指将<code>nn</code> 个皇后放在 <code>n×n``n×n</code> 的国际象棋棋盘上, 使得皇后不能相互攻击到, 即任意两个皇后都不能处于同一行, 同一列或同一斜线上</p><p>这道题目有两种分析情况，我先来分析第一种。</p><h2 id="设变量"><a href="#设变量" class="headerlink" title="设变量"></a>设变量</h2><pre class="line-numbers language-code" data-language="code"><code class="language-code">#include&lt;iostream&gt;using namespace std;const int N &#x3D; 20;int n;bool col[N], dg[N], udg[N];char g[N][N];</code></pre><p>首先，我们要知道皇后在每一行，每一列，每一斜列都不可以遇到一样的皇后，那么我们不妨创立三种变量来表示竖向的，左斜方向的，右斜方向的三个<code>bool</code>数组来分析，同时我们要创立一盘棋，用<code>char</code>变量来表示</p><h2 id="摆棋"><a href="#摆棋" class="headerlink" title="摆棋"></a>摆棋</h2><p>这样我们就可以把变量创建出来了，第二步就是摆上一盘棋</p><pre class="line-numbers language-code" data-language="code"><code class="language-code">int main()&#123;cin &gt;&gt; n;int i, j;for (i &#x3D; 0; i &lt; n; i++)for (j &#x3D; 0; j &lt; n; j++)g[i][j] &#x3D; &#39;.&#39;;dfs(0);return 0;&#125;</code></pre><h2 id="bfs解法"><a href="#bfs解法" class="headerlink" title="bfs解法"></a><code>bfs</code>解法</h2><p>现在开始我们就可以来分析这道题的<code>dfs</code>问题解法了</p><p>​        这种方法是对于每一行进行依次枚举, 看看这一行的哪个格子是否满足情况，符合的话我们就把皇后插进去. </p><pre class="line-numbers language-code" data-language="code"><code class="language-code">for (int i &#x3D; 0; i &lt; n; i++)&#123;if (!col[i] &amp;&amp; !dg[u + i] &amp;&amp; !udg[n - u + i])&#123;g[u][i] &#x3D; &#39;Q&#39;;col[i] &#x3D; dg[u + i] &#x3D; udg[n - u + i] &#x3D; true;dfs(u + 1);col[i] &#x3D; dg[u + i] &#x3D; udg[n - u + i] &#x3D; false;g[u][i] &#x3D; &#39;.&#39;;&#125;&#125;</code></pre><p>注意: 上述的<code>n</code>指的是有几行, <code>u</code>指的是第一列(数组上的表示是0),我们假设<code>n</code>是3</p><p>​        我们一步步分析, 开始<code>col[0]</code>是<code>ture</code>，代表这一行是没有放皇后的，<code>dg[u+i]</code>和<code>udg[n-u+1]</code>也是一样，都没有插入任何一个数，所以我们把第一个皇后插入<code>g[0][0]</code>,那么对应的<code>col[0]</code>变成<code>true</code>,<code>dg[0]</code>和<code>udg[3]</code>也变成了<code>true</code>,此后进入下一个<code>dfs</code>循环.</p><p>​        下一个进来后，<code>u</code>的值变成1了，现在是在第二行, <code>g[1][0]</code>直接排除.第二行的<code>col[1]</code>和<code>dg[2]</code>是可以过的，但是我们想想就知道，<code>g[1][1]</code>是不可以塞皇后的，所以我们不还有最后一层保险吗，我们的<code>udg[3]</code>是<code>true</code>，它不允许我们的皇后插进去，所以<code>u</code>只能最后去走走<code>g[1][2]</code>,终于三个都不挡住它了,我们可以进入下一个<code>dfs</code>了.</p><p>​        第三层中,我们的<code>u</code>是2，它先走到<code>g[2][0]</code>上面, <code>col[0]=true,dg[2]=false,udg[1]=false</code>是不能放的，到<code>g[2][1]</code>的时候也是放不了皇后的, <code>g[2][2]</code>一样放不了，这波直接出<code>for</code>循环了，根据<code>dfs</code>的性质，我们如果都不满足会回到上一个<code>dfs</code>中，但是由于我们在回到上一步<code>dfs</code>的时候有一些数值变了，那我们就要恢复原来改变的数值，甚至可能全部推翻。</p><h2 id="找到解"><a href="#找到解" class="headerlink" title="找到解"></a>找到解</h2><p>​        最后我们终于找到了一个解,那我们就直接把解输出出来.</p><pre class="line-numbers language-code" data-language="code"><code class="language-code">if (u &#x3D;&#x3D; n)&#123;for (int i &#x3D; 0; i &lt; n; i++) puts(g[i]);puts(&quot;&quot;);return;&#125;</code></pre><p><code>return</code>是返回上一个<code>dfs</code>节点上，可能会有多个解法出现</p><p><img src="/posts/aaaaaaac/image-20221119104841836.png" alt></p><p>在3的时候是没有解的, <code>hh</code></p><h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><p>—acwing算法基础课 (yxc主讲)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;八皇后问题&quot;&gt;&lt;a href=&quot;#八皇后问题&quot; class=&quot;headerlink&quot; title=&quot;八皇后问题&quot;&gt;&lt;/a&gt;八皇后问题&lt;/h1&gt;&lt;p&gt;&lt;code&gt;n−n−&lt;/code&gt;皇后问题是指将&lt;code&gt;nn&lt;/code&gt; 个皇后放在 &lt;code&gt;n×n``n</summary>
      
    
    
    
    <category term="c++算法" scheme="https://pxyfcywl.github.io/categories/c-%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="dfs深度优先搜索" scheme="https://pxyfcywl.github.io/tags/dfs%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2/"/>
    
  </entry>
  
  <entry>
    <title>我的第一篇博客</title>
    <link href="https://pxyfcywl.github.io/posts/d95d7e09.html"/>
    <id>https://pxyfcywl.github.io/posts/d95d7e09.html</id>
    <published>2022-11-18T05:21:48.000Z</published>
    <updated>2022-11-21T05:56:42.360Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>这是我的第一篇<code>hexo</code>博客文章。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;这是我的第一篇&lt;code&gt;hexo&lt;/code&gt;博客文章。&lt;/p&gt;
</summary>
      
    
    
    
    <category term="测试的" scheme="https://pxyfcywl.github.io/categories/%E6%B5%8B%E8%AF%95%E7%9A%84/"/>
    
    
    <category term="初篇的一个实验介绍" scheme="https://pxyfcywl.github.io/tags/%E5%88%9D%E7%AF%87%E7%9A%84%E4%B8%80%E4%B8%AA%E5%AE%9E%E9%AA%8C%E4%BB%8B%E7%BB%8D/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://pxyfcywl.github.io/posts/4a17b156.html"/>
    <id>https://pxyfcywl.github.io/posts/4a17b156.html</id>
    <published>2022-11-18T03:24:27.405Z</published>
    <updated>2022-11-21T05:56:59.797Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new &quot;My New Post&quot;</code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    <category term="测试的" scheme="https://pxyfcywl.github.io/categories/%E6%B5%8B%E8%AF%95%E7%9A%84/"/>
    
    
  </entry>
  
</feed>
