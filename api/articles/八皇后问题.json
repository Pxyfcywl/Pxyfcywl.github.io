{"title":"八皇后问题","uid":"e57cd6102d2ba21e7e0e2b44ca51b2ac","slug":"八皇后问题","date":"2022-11-19T01:59:14.000Z","updated":"2022-11-19T03:32:02.520Z","comments":true,"path":"api/articles/八皇后问题.json","keywords":null,"cover":[],"content":"<h1 id=\"八皇后问题\"><a href=\"#八皇后问题\" class=\"headerlink\" title=\"八皇后问题\"></a>八皇后问题</h1><p><code>n−n−</code>皇后问题是指将<code>nn</code> 个皇后放在 <code>n×n``n×n</code> 的国际象棋棋盘上, 使得皇后不能相互攻击到, 即任意两个皇后都不能处于同一行, 同一列或同一斜线上</p>\n<p>这道题目有两种分析情况，我先来分析第一种。</p>\n<h2 id=\"设变量\"><a href=\"#设变量\" class=\"headerlink\" title=\"设变量\"></a>设变量</h2><p>首先，我们要知道皇后在每一行，每一列，每一斜列都不可以遇到一样的皇后，那么我们不妨创立三种变量来表示竖向的，左斜方向的，右斜方向的三个<code>bool</code>数组来分析，同时我们要创立一盘棋，用<code>char</code>变量来表示</p>\n<p><img src=\"https://github.com/Pxyfcywl/Pxyfcywl.github.io/blob/main/picture/image-20221119100554724.png?raw=true\"></p>\n<h2 id=\"摆棋\"><a href=\"#摆棋\" class=\"headerlink\" title=\"摆棋\"></a>摆棋</h2><p>这样我们就可以把变量创建出来了，第二步就是摆上一盘棋</p>\n<p><img src=\"https://github.com/Pxyfcywl/Pxyfcywl.github.io/blob/main/picture/image-20221119100912629.png?raw=true\"></p>\n<h2 id=\"bfs解法\"><a href=\"#bfs解法\" class=\"headerlink\" title=\"bfs解法\"></a><code>bfs</code>解法</h2><p>现在开始我们就可以来分析这道题的<code>dfs</code>问题解法了</p>\n<p>​\t\t这种方法是对于每一行进行依次枚举, 看看这一行的哪个格子是否满足情况，符合的话我们就把皇后插进去. </p>\n<p><img src=\"https://github.com/Pxyfcywl/Pxyfcywl.github.io/blob/main/picture/image-20221119101250914.png?raw=true\"></p>\n<p>注意: 上述的<code>n</code>指的是有几行, <code>u</code>指的是第一列(数组上的表示是0),我们假设<code>n</code>是3</p>\n<p>​\t\t我们一步步分析, 开始<code>col[0]</code>是<code>ture</code>，代表这一行是没有放皇后的，<code>dg[u+i]</code>和<code>udg[n-u+1]</code>也是一样，都没有插入任何一个数，所以我们把第一个皇后插入<code>g[0][0]</code>,那么对应的<code>col[0]</code>变成<code>true</code>,<code>dg[0]</code>和<code>udg[3]</code>也变成了<code>true</code>,此后进入下一个<code>dfs</code>循环.</p>\n<p>​\t\t下一个进来后，<code>u</code>的值变成1了，现在是在第二行, <code>g[1][0]</code>直接排除.第二行的<code>col[1]</code>和<code>dg[2]</code>是可以过的，但是我们想想就知道，<code>g[1][1]</code>是不可以塞皇后的，所以我们不还有最后一层保险吗，我们的<code>udg[3]</code>是<code>true</code>，它不允许我们的皇后插进去，所以<code>u</code>只能最后去走走<code>g[1][2]</code>,终于三个都不挡住它了,我们可以进入下一个<code>dfs</code>了.</p>\n<p>​\t\t第三层中,我们的<code>u</code>是2，它先走到<code>g[2][0]</code>上面, <code>col[0]=true,dg[2]=false,udg[1]=false</code>是不能放的，到<code>g[2][1]</code>的时候也是放不了皇后的, <code>g[2][2]</code>一样放不了，这波直接出<code>for</code>循环了，根据<code>dfs</code>的性质，我们如果都不满足会回到上一个<code>dfs</code>中，但是由于我们在回到上一步<code>dfs</code>的时候有一些数值变了，那我们就要恢复原来改变的数值，甚至可能全部推翻。</p>\n<h2 id=\"找到解\"><a href=\"#找到解\" class=\"headerlink\" title=\"找到解\"></a>找到解</h2><p>​\t\t最后我们终于找到了一个解,那我们就直接把解输出出来.</p>\n<p><img src=\"https://github.com/Pxyfcywl/Pxyfcywl.github.io/blob/main/picture/image-20221119104726250.png?raw=true\"></p>\n<p><code>return</code>是返回上一个<code>dfs</code>节点上，可能会有多个解法出现</p>\n<p><img src=\"https://github.com/Pxyfcywl/Pxyfcywl.github.io/blob/main/picture/image-20221119104841836.png?raw=true\"></p>\n<p>在3的时候是没有解的, <code>hh</code></p>\n","feature":true,"text":"八皇后问题n−n−皇后问题是指将nn 个皇后放在 n×n``n×n 的国际象棋棋盘上, 使得皇后不能相互攻击到, 即任意两个皇后都不能处于同一行, 同一列或同一斜线上 这道题目有两种分析情况，我先来分析第一种。 设变量首先，我们要知道皇后在每一行，每一列，每一斜列都不可以遇到一样...","link":"","photos":[],"count_time":{"symbolsCount":963,"symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"dfs深度优先搜索","slug":"dfs深度优先搜索","count":1,"path":"api/tags/dfs深度优先搜索.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%85%AB%E7%9A%87%E5%90%8E%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">八皇后问题</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%AE%BE%E5%8F%98%E9%87%8F\"><span class=\"toc-text\">设变量</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%91%86%E6%A3%8B\"><span class=\"toc-text\">摆棋</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#bfs%E8%A7%A3%E6%B3%95\"><span class=\"toc-text\">bfs解法</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%89%BE%E5%88%B0%E8%A7%A3\"><span class=\"toc-text\">找到解</span></a></li></ol></li></ol>","author":{"name":"Pxyfcywl","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"一位正在努力学习算法和数据结构的大学生","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{},"next_post":{"title":"我的第一篇博客","uid":"03e1cda0baa3a649921c8af01fed4d68","slug":"我的第一篇博客","date":"2022-11-18T05:21:48.000Z","updated":"2022-11-18T10:38:09.333Z","comments":true,"path":"api/articles/我的第一篇博客.json","keywords":null,"cover":null,"text":"简介这是我的第一篇hexo博客文章。 ","link":"","photos":[],"count_time":{"symbolsCount":19,"symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"初篇的一个实验介绍","slug":"初篇的一个实验介绍","count":1,"path":"api/tags/初篇的一个实验介绍.json"}],"author":{"name":"Pxyfcywl","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"一位正在努力学习算法和数据结构的大学生","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true}}